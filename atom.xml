<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amnesia&#39;s blog</title>
  
  
  <link href="https://amnesia-f.github.io/atom.xml" rel="self"/>
  
  <link href="https://amnesia-f.github.io/"/>
  <updated>2021-02-10T07:49:28.639Z</updated>
  <id>https://amnesia-f.github.io/</id>
  
  <author>
    <name>Amnesia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客技巧：利用JsDeliver加速文件</title>
    <link href="https://amnesia-f.github.io/posts/20b3.html"/>
    <id>https://amnesia-f.github.io/posts/20b3.html</id>
    <published>2021-02-10T06:23:06.000Z</published>
    <updated>2021-02-10T07:49:28.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，GItHub的服务器是在国外的，曾经还被墙过，那么利用GitHub Pages搭建好的博客后本身就已经够慢了，再加上博客里的图片、css、js等这类文件就更慢了。</p><p>那么可能有人会说，我把图片放图床上，css这类文件少写点不就行了。那你又可曾想过万一图床跑路了，你的博客里全是失效图片了呢。</p><p>下面就讲一种方法，令你的文件访问不仅速度快，还不用担心它失效。</p><h1 id="JsDeliver的优势"><a href="#JsDeliver的优势" class="headerlink" title="JsDeliver的优势"></a>JsDeliver的优势</h1><ul><li>免费</li><li>稳定</li><li>速度快</li></ul><p>你不用担心它会跑路，因为你的文件是存储在GitHub上的。</p><p>且这是免费的，无上限。</p><p>文末会有GitHub与JsDeliver的对比，没有对比就没有伤害，届时你就能看到这两者的速度差别。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>一个Github账号</li><li>你的图片等文件</li><li>一个聪明的大脑和勤劳的双手</li></ol><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>进入<a href="https://github.com/">GitHub</a>且登录后点击右上角加号然后再点击“New repository”</p><p>新建一个仓库，名字随意，当然越简洁越好，这里推荐直截了当用“CDN”作仓库名。</p><p><img src="https://upimage.alexhchu.com/2021/01/21/4e6e17b1d23db.png" alt="新建仓库.png"></p><p>（这是以前的图，主要是懒得再截了）</p><blockquote><p>！注意：仓库一定要公开，选择<code>Public</code>！！！</p></blockquote><p>接下来是两种方法，任选一操作即可：</p><p>接下来是两种方法，任选一操作即可：</p><p>接下来是两种方法，任选一操作即可：</p><h2 id="2-上传文件"><a href="#2-上传文件" class="headerlink" title="2.上传文件"></a>2.上传文件</h2><h3 id="本地环境（方法一）"><a href="#本地环境（方法一）" class="headerlink" title="本地环境（方法一）"></a>本地环境（方法一）</h3><p>在你的电脑硬盘上新建一个文件夹，然后将刚建好的仓库克隆到本地 (右键Git Bash)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Amnesia-f/CDN.git <span class="comment">### 这里是你的CDN仓库地址</span></span><br></pre></td></tr></table></figure><p>克隆完成后将需要上传的文件放进文件夹中，执行以下操作：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加全部内容文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加说明</span></span><br><span class="line">git commit -m<span class="string">&#x27;第一次提交&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到远程仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>第一步add后面有个点，复制的时候不要漏了。</p></blockquote><p>操作完成后你就可以直接跳到第四步了，第三步虽方式和第二步不一样，但结果是一样的。</p><h3 id="直接上传（方法二）"><a href="#直接上传（方法二）" class="headerlink" title="直接上传（方法二）"></a>直接上传（方法二）</h3><p>新建完仓库后，选择你需要的文件上传到库中即可。</p><p>（就是这么简单粗暴）</p><h2 id="3-调用文件"><a href="#3-调用文件" class="headerlink" title="3.调用文件"></a>3.调用文件</h2><p>直接访问就可以了：<a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84Github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84CDN%E4%BB%93%E5%BA%93%E5%90%8D/%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%87%E4%BB%B6">https://cdn.jsdelivr.net/gh/你的Github用户名/你的CDN仓库名/文件文件夹/文件</a></p><p>例如：<a href="https://cdn.jsdelivr.net/gh/Amnesia-f/CDN@1.0/Test/1.jpg">https://cdn.jsdelivr.net/gh/Amnesia-f/CDN@1.0/Test/1.jpg</a></p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>这是两个链接，存储着一张图片，打开它们就可以看到差距了：（链接来源@Lete乐特）</p><ul><li>GitHub：<a href="https://lete114.github.io/CDN/BoBoPic/01.jpg">https://lete114.github.io/CDN/BoBoPic/01.jpg</a></li><li>JsDelivr：<a href="https://cdn.jsdelivr.net/gh/lete114/CDN@3.0/BoBoPic/12.jpg">https://cdn.jsdelivr.net/gh/lete114/CDN@3.0/BoBoPic/12.jpg</a></li></ul><p>加载速度是不是后者比Github快？</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><blockquote><p>下文皆来源于<a href="https://www.antmoe.com/posts/e33d1c55/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">小康博客：优雅使用 JsDeliver 加速文件</a></p></blockquote><h3 id="JSD-的链接是什么"><a href="#JSD-的链接是什么" class="headerlink" title="JSD 的链接是什么"></a>JSD 的链接是什么</h3><p>JSD 的链接是什么？</p><p>在我上图的链接为 <code>https://cdn.jsdelivr.net/gh/sviptzk/Jsd_test/79601805_p0.png</code>，但这并不意味着 JSD 只有这一种引用方式。</p><ol><li><p>直接引用</p><p>这种方式也就是上边的方式，格式为：<code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;/&lt;文件及路径&gt;</code></p><p>例如：<code>https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2/2020/05/28/911db4c3b95ed896b066b6e9aabae311.png</code> 代表用户名 <code>blogimg</code> 下的 <code>HexoStaticFlle2</code> 仓库中文件夹 <code>/2020/05/28/</code> 里的 <code>911db4c3b95ed896b066b6e9aabae311.png</code> 文件。</p></li><li><p>分支及版本号</p><p>分支与版本号加到仓库后变，用 <code>@</code>符链接。格式为：<code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;@[分支/版本号]/&lt;文件及路径&gt;</code></p><table><thead><tr><th align="center">分支名</th><th align="center">简述</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">普通分支</td><td align="center">即 GitHub 的分支，可以创建多个。默认为 master</td><td align="center">按分支引用，如同按分支开发</td></tr><tr><td align="center"><code>latest</code></td><td align="center">最后一次提交</td><td align="center">代表最后一次的提交，即每上传一个新文件，都可以用这个分支引用到。也就是不加版本号的默认情况。</td></tr><tr><td align="center">版本号</td><td align="center">即指定版本的内容，需配合版本发布</td><td align="center">已发布的版本不会受到仓库内容变化的影响</td></tr></tbody></table></li></ol><h3 id="如何按版本号引用"><a href="#如何按版本号引用" class="headerlink" title="如何按版本号引用"></a>如何按版本号引用</h3><p>如何按版本号引用</p><p>使用版本号引用的优点在于：这个链接仅停留在发布版本号的时刻，无论仓库如何变化，这个版本号的文件都不会受到影响。同时可以避免 JSD 缓存问题。</p><ol><li><p>发布版本</p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/87a5106dae590cb9d4aa6373c969286a.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/87a5106dae590cb9d4aa6373c969286a.png" alt="image-20200528084631488"></a></p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/1a7a301470e6564a118585aded6dc972.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/1a7a301470e6564a118585aded6dc972.png" alt="image-20200528084647411"></a></p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/cb43fa11bd315ed8f5346ace0ea08b5c.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/cb43fa11bd315ed8f5346ace0ea08b5c.png" alt="image-20200528084720237"></a></p></li><li><p>使用版本号引用</p><p>刚刚发布的版本中只有一个图片，那么即使我在上传一张图片也是无法引用到的。</p><p>例如我在向仓库 push 一张 <code>1.jpg</code>，使用版本号方式引用。</p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/6bfbc3a1f5e33fa07801acd99038edb4.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/6bfbc3a1f5e33fa07801acd99038edb4.png" alt="image-20200528085930130"></a></p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/27308378700d0eb953aa47751df86560.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/27308378700d0eb953aa47751df86560.png" alt="image-20200528085944413"></a></p></li></ol><h3 id="关于缓存问题"><a href="#关于缓存问题" class="headerlink" title="关于缓存问题"></a>关于缓存问题</h3><p>关于缓存问题</p><p>这个问题向迷一样，根据我自己的实测不仅与分支有关系而且与文件名有关系。文件名为 <code>*.min.*</code> 或者是 <code>*.*</code>，也就是带 <code>min</code> 的和不带 <code>min</code> 的。这里我以 <code>index.min.css</code> 和 <code>index.css</code> 为例。</p><p>先来看看 <code>index.css</code></p><table><thead><tr><th align="center">分支</th><th>首次上传</th><th align="center">能否及时更新</th><th align="center">缓存天数</th></tr></thead><tbody><tr><td align="center"><code>master</code></td><td>可以被引用</td><td align="center">第一次 push 和第一次修改可以更新</td><td align="center">可能 1 天</td></tr><tr><td align="center"><code>latest</code></td><td>可以被引用</td><td align="center">与 master 分支几乎一致</td><td align="center">可能 1 天</td></tr><tr><td align="center">版本号</td><td>发布版本后引用</td><td align="center">发布后及时更新</td><td align="center">每个版本独立</td></tr></tbody></table><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/e5cb1fb4ee213a924436ef3008a82ecb.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/e5cb1fb4ee213a924436ef3008a82ecb.png" alt="image-20200528091044063"></a></p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/5d86cbae93878d06c323c6bcdc7603b4.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/5d86cbae93878d06c323c6bcdc7603b4.png" alt="image-20200528091150570"></a></p><p>在来看看 <code>index.min.css</code></p><table><thead><tr><th align="center">分支</th><th>首次上传</th><th align="center">能否及时更新</th><th align="center">缓存天数</th></tr></thead><tbody><tr><td align="center"><code>master</code></td><td>可以被引用</td><td align="center">第一次 push 可以更新</td><td align="center">可能 1 天</td></tr><tr><td align="center"><code>latest</code></td><td>可以被引用</td><td align="center">第一次 push 和第一次修改可以更新</td><td align="center">可能 1 天</td></tr><tr><td align="center">版本号</td><td>发布版本后引用</td><td align="center">发布后及时更新</td><td align="center">每个版本独立</td></tr></tbody></table><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/a800e6fdd6ae614dca6e78237d24c0b7.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/a800e6fdd6ae614dca6e78237d24c0b7.png" alt="image-20200528091907595"></a></p><p><a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/5d32f3d272157531ac383ba30ba5933b.png"><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/28/5d32f3d272157531ac383ba30ba5933b.png" alt="image-20200528092301901"></a></p><p>因此总结下的使用方式就是：</p><ul><li><p>图床（不需要修改文件）</p><p>使用 latest 分支或者 master 分支即可。</p></li><li><p>静态文件仓库（经常改动文件）</p><p>建议使用版本号方式</p></li></ul><h3 id="文件是否有限制"><a href="#文件是否有限制" class="headerlink" title="文件是否有限制"></a>文件是否有限制</h3><p>文件是否有限制？</p><ol><li><p>先说说 GitHub 仓库</p><p>GitHub 公开仓库大小为 100GB，是不是听起来很爽。并且可以创建无数个仓库哦！</p><p>但是这 100GB 我们并不能全用完，甚至每个仓库不能超过 1G。为什么？因为可能被封号。官方的解释是尽量不要传大文件，且仓库超过 1G 后会有人工审核仓库内容，如果发现用来做图床～～～😏。轻则删库，重则封号。因此为了安全建议在 1G 之前就换个仓库，反正可以创建无数个仓库嘛。</p></li><li><p>文件大小</p><p>Github 单文件上传为 100M，但是 JSD 加速的单文件大小为 50M。因此也就意味着单文件大小为 50MB。</p></li><li><p>文件类型</p><p>基本的图片视频静态文件应该都可以。</p></li></ol><h3 id="查看仓库文件"><a href="#查看仓库文件" class="headerlink" title="查看仓库文件"></a>查看仓库文件</h3><p>查看仓库文件</p><p>查看仓库文件有大小限制，因此当你的仓库文件大于 50MB 时，就无法通过 JSD 查看了，只能在 GitHub 仓库查看。</p><p>JSD 的查看仓库文件有两种方式：</p><ol><li><p>查看仓库的版本号</p><p>格式：<code>https://www.jsdelivr.com/package/gh/</code>+ 用户名 +<code>/</code>+ 仓库名</p><p>例如：<code>https://www.jsdelivr.com/package/gh/sviptzk/HexoStaticFile</code></p></li><li><p>查看仓库文件</p><p>格式 <code>https://cdn.jsdelivr.net/gh/</code>+ 用户名 +<code>/</code>+ 仓库名 +<code>/</code> 仓库名 [@分支]</p><p>例如<code>仓库名@master</code>，默认为 master 分支 <code>https://cdn.jsdelivr.net/gh/sviptzk/sviptzk.github.io@master/</code></p></li></ol><h2 id="利用-CloudFare"><a href="#利用-CloudFare" class="headerlink" title="利用 CloudFare"></a>利用 CloudFare</h2><p>这个没有啥难度，因此只提供思路。</p><ol><li><p>将 GitHub 仓库开启 Pages 服务，并绑定自己的域名</p></li><li><p>域名需要在 CloudFare 解析</p></li><li><p>接下来就可以用你的域名访问仓库文件了。</p><p>例如：<code>https://cdn.antmoe.com/1.jpg</code>。代表访问仓库根目录下的 <code>1.jpg</code> 文件</p><p>上边只是一个示例，不要试图访问哦！</p></li></ol><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ol><li>上传文件后如果不能立即访问到，那么稍等片刻即可。</li><li>JSD 最近很不稳定，遇到突然不能打开很正常。</li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>JsDeliver官方网址：<a href="https://www.jsdelivr.com/?docs=gh">https://www.jsdelivr.com/?docs=gh</a></p></blockquote><blockquote><p>除常见问题小节外的文章为原创，常见问题小节来源于<a href="https://www.antmoe.com/posts/e33d1c55/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">小康博客：优雅使用 JsDeliver 加速文件</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;众所周知，GItHub的服务器是在国外的，曾经还被墙过，那么利用GitHub Pages搭建好的博客后本身就已经够慢了，再加上博客里的图片、</summary>
      
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="JsDeliver" scheme="https://amnesia-f.github.io/tags/JsDeliver/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客技巧：添加说说页面</title>
    <link href="https://amnesia-f.github.io/posts/d6c8.html"/>
    <id>https://amnesia-f.github.io/posts/d6c8.html</id>
    <published>2021-02-08T07:27:26.000Z</published>
    <updated>2021-02-08T14:21:40.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo搭建的博客是静态的，意味着每一次更新文章或进行其他操作都需要部署上传。</p><p>而Artitalk是一款基于 LeanCloud 实现的可实时发布说说/微语的插件，可以做到：</p><ul><li><input checked disabled type="checkbox"> 实时发布说说，点击即可删除</li><li><input checked disabled type="checkbox"> 支持 Markdown/HTML 语法</li><li><input checked disabled type="checkbox"> 方便引用</li></ul><p>下面就来讲讲怎么利用Artitalk为博客添加说说页面。</p><p>在此之前你可以前往 <a href="https://amnesia-f.github.io/shuoshuo/">https://amnesia-f.github.io/shuoshuo/</a> 看看我的说说页面</p><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><p>一些主题已经整合了Artitalk，可以直接使用：</p><h3 id="hexo-theme-volantis"><a href="#hexo-theme-volantis" class="headerlink" title="hexo-theme-volantis"></a><a href="https://github.com/xaoxuu/hexo-theme-volantis/">hexo-theme-volantis</a></h3><h3 id="hexo-theme-cards"><a href="#hexo-theme-cards" class="headerlink" title="hexo-theme-cards"></a><a href="https://github.com/ChrAlpha/hexo-theme-cards">hexo-theme-cards</a></h3><h3 id="hexo-theme-butterfly"><a href="#hexo-theme-butterfly" class="headerlink" title="hexo-theme-butterfly"></a><a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></h3><h3 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a><a href="https://github.com/blinkfox/hexo-theme-matery/">hexo-theme-matery</a></h3><h3 id="gridea-theme-dark"><a href="#gridea-theme-dark" class="headerlink" title="gridea-theme-dark"></a><a href="https://github.com/jalenchuh/gridea-theme-dark">gridea-theme-dark</a></h3><h3 id="hexo-theme-MengD"><a href="#hexo-theme-MengD" class="headerlink" title="hexo-theme-MengD"></a><a href="https://github.com/lete114/hexo-theme-mengd/">hexo-theme-MengD</a></h3><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><p>如果博客使用的是<strong>Valine</strong>评论系统，那么将 Artitalk 与 Valine 在同一个页面使用需要Artitalk与Valine使用同一个LeanCloud应用。</p></blockquote><h1 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h1><h2 id="LeanCloud的操作"><a href="#LeanCloud的操作" class="headerlink" title="LeanCloud的操作"></a>LeanCloud的操作</h2><p>1.前往<a href="https://console.leancloud.app/register">LeanCloud 国际版</a>，注册账号。</p><p>2.注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱。</p><p><img src="https://img.imgdb.cn/item/6020ebff3ffa7d37b38e46a0.png" alt="完善信息"></p><p>3.绑定完成之后点击<code>创建应用</code>，应用名称随意，应用的计价方案选择<code>开发版</code></p><p><img src="https://img.imgdb.cn/item/6020ebff3ffa7d37b38e4698.png" alt="创建应用"></p><p>4.创建完应用后点击控制台中的存储，点击<code>结构化数据</code>中创建<code>class</code>，命名为<code>shuoshuo</code>。</p><p><img src="https://img.imgdb.cn/item/6020ecf53ffa7d37b38ed243.png" alt="点击存储"></p><p><img src="https://img.imgdb.cn/item/6020ebff3ffa7d37b38e4696.png" alt="创建class"></p><p>5.在你新建的应用中找到<code>结构化数据</code>下的<code>用户</code>。点击<code>添加用户</code>，输入想用的用户名及密码。</p><p><img src="https://img.imgdb.cn/item/6020ebff3ffa7d37b38e469b.png" alt="添加用户"></p><p><img src="https://img.imgdb.cn/item/6020ecf53ffa7d37b38ed23a.png" alt="添加用户参数"></p><p>6.回到<code>结构化数据</code>中，点击<code>class</code>下的<code>shuoshuo</code>。找到权限，在<code>Class 访问权限</code>中将 <code>add_fields</code> 以及 <code>create</code> 权限设置为指定用户，输入你刚才输入的用户名会自动匹配。为了安全起见，将 <code>delete</code> 和 <code>update</code> 也设置为跟它们一样的权限。</p><p><img src="https://img.imgdb.cn/item/6020eeec3ffa7d37b38fd782.png" alt="修改权限"></p><p>7.然后新建一个名为<code>atComment</code>的class，权限什么的使用默认的即可。</p><p>8.点击 <code>class</code> 下的 <code>_User</code> 添加列，列名称为 <code>img</code>，默认值填上你这个账号想要用的发布说说的头像url，这一项不进行配置，说说头像会显示为默认头像 —— Artitalk 的 logo。</p><p><img src="https://img.imgdb.cn/item/6020eeec3ffa7d37b38fd784.png" alt="添加列"></p><p>9.在最菜单栏中找到设置-&gt; 应用 keys，记下来 <code>AppID</code> 和 <code>AppKey</code> ，一会会用。</p><p><img src="https://img.imgdb.cn/item/6020eeec3ffa7d37b38fd792.png" alt="应用key"></p><p>10.最后将 <code>_User</code> 中的权限全部调为指定用户，或者数据创建者，为了保证不被篡改用户数据已达到强制发布说说。</p><p><img src="https://img.imgdb.cn/item/6020ecf53ffa7d37b38ed23e.png" alt="修改权限"></p><blockquote><p>这几步一定要设置好，才可以保证不被 “闲人” 破解发布说说的验证</p></blockquote><h2 id="主题的操作"><a href="#主题的操作" class="headerlink" title="主题的操作"></a>主题的操作</h2><h3 id="1-创建页面"><a href="#1-创建页面" class="headerlink" title="1.创建页面"></a>1.创建页面</h3><p>在博客根目录输入<code>hexo new page shuoshuo</code>创建一个page</p><p>打开创建的 md 文件， 在 Front-matter 添加 <code>type: artitalk</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxxx</span><br><span class="line">date: 2021-02-08 00:58:58</span><br><span class="line">type: artitalk</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Artitalk</span></span><br><span class="line"><span class="comment"># see https://artitalk.js.org/</span></span><br><span class="line"><span class="attr">artitalk:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">xxxxx</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">xxxxx</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>Artitalk 提供了很多可选参数配置，可以写在 option 里，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">option:</span><br><span class="line">  lang: zh</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>Artitalk的GitHub仓库：<a href="https://github.com/ArtitalkJS/Artitalk">https://github.com/ArtitalkJS/Artitalk</a></p></blockquote><blockquote><p>Artitalk的使用文档：<a href="https://artitalk.js.org/doc.html">https://artitalk.js.org/doc.html</a></p></blockquote><blockquote><p>Butterfly主题的使用方法：<a href="https://butterfly.js.org/posts/dc584b87/#%E8%AA%AC%E8%AA%AC">https://butterfly.js.org/posts/dc584b87/#%E8%AA%AC%E8%AA%AC</a></p></blockquote><blockquote><p>我的说说页面：<a href="https://amnesia-f.github.io/shuoshuo/">https://amnesia-f.github.io/shuoshuo/</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Hexo搭建的博客是静态的，意味着每一次更新文章或进行其他操作都需要部署上传。&lt;/p&gt;
&lt;p&gt;而Artitalk是一款基于 LeanClou</summary>
      
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="说说" scheme="https://amnesia-f.github.io/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>阿里云IoT：控制掌控板板载灯亮灭</title>
    <link href="https://amnesia-f.github.io/posts/c232.html"/>
    <id>https://amnesia-f.github.io/posts/c232.html</id>
    <published>2021-02-07T05:20:58.000Z</published>
    <updated>2021-02-07T13:39:29.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="1-注册账号并登录阿里云IoT平台"><a href="#1-注册账号并登录阿里云IoT平台" class="headerlink" title="1.注册账号并登录阿里云IoT平台"></a>1.注册账号并登录阿里云IoT平台</h2><p>打开浏览器，进入阿里云IoT平台<a href="http://iot.aliyun.com/">http://iot.aliyun.com</a>，如图1所示，点击右上角【免费注册】按钮，进入图2界面进行注册。</p><p>如已有账号点击右上角的【登录】按钮直接登录即可。</p><p><img src="https://upimage.alexhchu.com/2021/02/07/8605396d6cdb7.png" alt="界面.png"></p><center>图1 阿里云平台界面</center><p><img src="https://upimage.alexhchu.com/2021/02/07/814d59d363a1d.png" alt="注册界面.png"></p><center>图2  阿里云平台注册界面</center><h3 id="2-进行实名验证"><a href="#2-进行实名验证" class="headerlink" title="2.进行实名验证"></a>2.进行实名验证</h3><p>登录或注册成功后，进入 <a href="https://account.console.aliyun.com/v2/#/authc/home">https://account.console.aliyun.com/v2/#/authc/home</a> 进行实名验证。目前有两种验证方式：支付宝快捷验证或使用淘宝或阿里云App扫脸并上传身份证验证。（不进行实名验证无法开通物联网平台服务）</p><h3 id="3-开通物联网平台"><a href="#3-开通物联网平台" class="headerlink" title="3.开通物联网平台"></a>3.开通物联网平台</h3><p>进入 <a href="https://iot.console.aliyun.com/product">https://iot.console.aliyun.com/product</a> ，按照步骤点击【立即开通】即可，是免费的。（这里没有截图，记得不是太清了）</p><p>开通成功后会出现开通成功的界面，见图3：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/bb9d94d63e3ca.png" alt="验证成功.png"></p><center>图3 物联网平台开通成功界面</center><p>以上均为准备工作，进行到这里，接下来就可以开始创建产品、创建设备并开发App了。</p><h1 id="创建产品"><a href="#创建产品" class="headerlink" title="创建产品"></a>创建产品</h1><h3 id="1-新建一个名为“Light”的产品"><a href="#1-新建一个名为“Light”的产品" class="headerlink" title="1.新建一个名为“Light”的产品"></a>1.新建一个名为“Light”的产品</h3><p>进入控制台 <a href="https://iot.console.aliyun.com/product">https://iot.console.aliyun.com/product</a> ；</p><p>点击左上角新建产品，见图4</p><p><img src="https://upimage.alexhchu.com/2021/02/07/ce968a0ae6c9e.png" alt="创建产品.png"></p><center>图4 新建产品</center><p>新建一个名为“Light”的产品，节点类型为直连设备，见图5：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/64a4800babb8e.png" alt="新建产品.png"></p><center>图5 新建产品参数</center><p>产品创建完成后，将自动出现在产品列表中。</p><h3 id="2-进行功能定义"><a href="#2-进行功能定义" class="headerlink" title="2.进行功能定义"></a>2.进行功能定义</h3><p>点击【查看】进行功能定义，步骤见图6、图7和图8：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/5a77e0533d345.png" alt="查看设备.png"></p><center>图6 查看产品</center><p><img src="https://upimage.alexhchu.com/2021/02/07/02720033d48eb.png" alt="功能定义.png"></p><center>图7 编辑草稿</center><p><img src="https://upimage.alexhchu.com/2021/02/07/37d039df1ff7e.png" alt="添加自定义功能.png"></p><center>图8 添加自定义功能</center><p>为刚刚新建的“Light”产品添加一个名为“工作状态”的功能，产品标识符为“LightStatus”。</p><p>将LED灯的工作状态定义为产品属性，数据类型为布尔值(bool)，即0表示灯灭，1表示灯亮。具体设置参考<strong>图8</strong>，单击确定。</p><p>功能添加完成后，将自动出现在自定义功能列表中，用户可在该处查看产品的标识符“LightStatus”。</p><p><img src="https://upimage.alexhchu.com/2021/02/07/d62bac97ec97a.png" alt="功能属性.png"></p><center>图9 添加自定义功能界面</center><h1 id="添加设备"><a href="#添加设备" class="headerlink" title="添加设备"></a>添加设备</h1><p>回到控制台，点击<strong>“设备&gt;添加设备”</strong>，见图10：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/dcc7e29441e69.png" alt="添加设备.png"></p><center>图10 添加设备</center><p>选择刚才新建的产品，挂载一个名为“My_Light”的设备，见图11：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/ab531331edc52.png" alt="添加设备属性.png"></p><center>图11 添加设备页面</center><h1 id="开发手机App"><a href="#开发手机App" class="headerlink" title="开发手机App"></a>开发手机App</h1><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p>进入项目管理 <a href="https://studio.iot.aliyun.com/projects">https://studio.iot.aliyun.com/projects</a> ，将页面滚到下方，找到<strong>新建项目</strong>按钮，注意是创建<strong>普通项目</strong>，不是全局资源项目！见图12：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/8ffd7061d914e.png" alt="新建项目.png"></p><center>图12 新建项目</center><p>新建一个空白项目，见图13：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/41b8bf3aaf402.png" alt="新建项目属性.png"></p><center>图13 新建空白项目</center><h3 id="2-关联产品和设备"><a href="#2-关联产品和设备" class="headerlink" title="2.关联产品和设备"></a>2.关联产品和设备</h3><p>新建项目完成后来到项目的主页，关联产品和设备，具体步骤见图14、图15和图16：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/1c03f75c5661e.png" alt="关联.png"></p><center>图14 关联界面</center><p><img src="https://upimage.alexhchu.com/2021/02/07/9e52c1a304adb.png" alt="关联产品.png"></p><center>图15 关联产品</center><p><img src="https://upimage.alexhchu.com/2021/02/07/2dbd6f042f056.png" alt="关联设备.png"></p><center>图16 关联设备</center><h3 id="3-开发移动应用"><a href="#3-开发移动应用" class="headerlink" title="3.开发移动应用"></a>3.开发移动应用</h3><p>回到项目主页，点击【移动应用】，再点击【新建】，新建一个移动应用，然后新建一个空白页面，见图17、图18和图19：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/8699b22b272e8.png" alt="新建App.png"></p><center>图17 新建移动应用</center><p><img src="https://img.imgdb.cn/item/601fad383ffa7d37b30dac42.png" alt="新建App属性"></p><center>图18 新建移动应用页面</center><p><img src="https://upimage.alexhchu.com/2021/02/07/97a0a59220975.png" alt="新建空白页面.png"></p><center>图19 新建空白页面</center><p><strong>进行ui的设计</strong>，使用的组件：图片、文本、指示灯和开关，灯泡图片是用来美化的。</p><p>具体过程就不详细讲了，最终效果见图20：</p><p><img src="https://img.imgdb.cn/item/601fad383ffa7d37b30dac3e.png" alt="App&#39;s ui"></p><center>图20 App的ui图</center><p>接下来将指示灯和开关这两个组件与设备关联，先点击指示灯这个组件，然后点击右侧的【配置数据源】，见图21和图22</p><p><img src="https://img.imgdb.cn/item/601fae363ffa7d37b30e305f.png" alt="配置指示灯状态"></p><center>图21 配置指示灯状态</center><p><img src="https://img.imgdb.cn/item/601fae963ffa7d37b30e62cc.png" alt="数据源配置"></p><center>图22 数据源配置</center><p><strong>开关的配置同理且步骤相同，这里就不放图了。</strong></p><p>配置完成后App的设计到这里就告一段落了，接下来就可以发布App并使用了，点击右上角纸飞机状的按钮进行发布，见图23：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/66a8fd262bb9d.png" alt="发布App.png"></p><center>图23 发布App</center><h1 id="掌控板程序"><a href="#掌控板程序" class="headerlink" title="掌控板程序"></a>掌控板程序</h1><h3 id="1-初始化MQTT"><a href="#1-初始化MQTT" class="headerlink" title="1.初始化MQTT"></a>1.初始化MQTT</h3><p>其中对应的参数在控制台中直接复制即可，其中DeviceSecret需要点击【查看】才会出现，见图24和图25</p><p><img src="https://upimage.alexhchu.com/2021/02/07/a91e432c886d9.png" alt="初始化MQTT.png"></p><center>图24 初始化MQTT</center><p><img src="https://upimage.alexhchu.com/2021/02/07/6eed403f3c482.png" alt="设备信息.png"></p><center>图25 设备信息</center><h3 id="2-Topic-信息"><a href="#2-Topic-信息" class="headerlink" title="2.Topic 信息"></a>2.Topic 信息</h3><p>详见官方给出的Topic 类列表：</p><p><strong>基础通信 Topic 列表：</strong></p><table><thead><tr><th align="center">功能</th><th align="center">Topic类</th><th align="center">操作权限</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">OTA 升级</td><td align="center">/ota/device/inform/a1m39v8scxG/${deviceName}</td><td align="center">发布</td><td align="center">设备上报固件升级信息</td></tr><tr><td align="center">OTA 升级</td><td align="center">/ota/device/upgrade/a1m39v8scxG/${deviceName}</td><td align="center">订阅</td><td align="center">固件升级信息下行</td></tr><tr><td align="center">OTA 升级</td><td align="center">/ota/device/progress/a1m39v8scxG/${deviceName}</td><td align="center">发布</td><td align="center">设备上报固件升级进度</td></tr><tr><td align="center">OTA 升级</td><td align="center">/ota/device/request/a1m39v8scxG/${deviceName}</td><td align="center">发布</td><td align="center">设备主动拉取固件升级信息</td></tr><tr><td align="center">设备标签</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/deviceinfo/update</td><td align="center">发布</td><td align="center">设备上报标签数据</td></tr><tr><td align="center">设备标签</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/deviceinfo/update_reply</td><td align="center">订阅</td><td align="center">云端响应标签上报</td></tr><tr><td align="center">设备标签</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/deviceinfo/delete</td><td align="center">订阅</td><td align="center">设备删除标签信息</td></tr><tr><td align="center">设备标签</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/deviceinfo/delete_reply</td><td align="center">发布</td><td align="center">云端响应标签删除</td></tr><tr><td align="center">时钟同步</td><td align="center">/ext/ntp/a1m39v8scxG/${deviceName}/request</td><td align="center">发布</td><td align="center">NTP 时钟同步请求</td></tr><tr><td align="center">时钟同步</td><td align="center">/ext/ntp/a1m39v8scxG/${deviceName}/response</td><td align="center">订阅</td><td align="center">NTP 时钟同步响应</td></tr><tr><td align="center">设备影子</td><td align="center">/shadow/update/a1m39v8scxG/${deviceName}</td><td align="center">发布</td><td align="center">设备影子发布</td></tr><tr><td align="center">设备影子</td><td align="center">/shadow/get/a1m39v8scxG/${deviceName}</td><td align="center">订阅</td><td align="center">设备接收影子变更</td></tr><tr><td align="center">配置更新</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/config/push</td><td align="center">订阅</td><td align="center">云端主动下推配置信息</td></tr><tr><td align="center">配置更新</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/config/get</td><td align="center">发布</td><td align="center">设备端查询配置信息</td></tr><tr><td align="center">配置更新</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/config/get_reply</td><td align="center">订阅</td><td align="center">云端响应配置信息</td></tr><tr><td align="center">广播</td><td align="center">/broadcast/a1m39v8scxG/${identifier}</td><td align="center">订阅</td><td align="center">广播 Topic，identifier 为用户自定义字符串</td></tr></tbody></table><p><strong>物模型通信 Topic 列表：</strong></p><table><thead><tr><th align="center">功能</th><th align="center">Topic类</th><th align="center">操作权限</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">属性上报</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/event/property/post</td><td align="center">发布</td><td align="center">设备属性上报</td></tr><tr><td align="center">属性上报</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/event/property/post_reply</td><td align="center">订阅</td><td align="center">云端响应属性上报</td></tr><tr><td align="center">属性设置</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/service/property/set</td><td align="center">订阅</td><td align="center">设备属性设置</td></tr><tr><td align="center">事件上报</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/event/${tsl.event.identifier}/post</td><td align="center">发布</td><td align="center">设备事件上报</td></tr><tr><td align="center">事件上报</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/event/${tsl.event.identifier}/post_reply</td><td align="center">订阅</td><td align="center">云端响应事件上报</td></tr><tr><td align="center">服务调用</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/service/${tsl.service.identifier}</td><td align="center">订阅</td><td align="center">设备服务调用</td></tr><tr><td align="center">服务调用</td><td align="center">/sys/a1m39v8scxG/${deviceName}/thing/service/${tsl.service.identifier}_reply</td><td align="center">发布</td><td align="center">设备端响应服务调用</td></tr></tbody></table><p>这里我们使用“/sys/a1m39v8scxG/${deviceName}/thing/service/property/set”进行订阅。</p><h3 id="3-判断收到的消息"><a href="#3-判断收到的消息" class="headerlink" title="3.判断收到的消息"></a>3.判断收到的消息</h3><p>前往 <a href="https://iot.console.aliyun.com/lk/monitor/log">https://iot.console.aliyun.com/lk/monitor/log</a> </p><p>查看日志服务可以发现，云到设备的消息中，灯灭状态发出的消息见图26；而灯亮状态发出的消息见图27：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/ba256985cea5c.png" alt="灯灭状态消息.png"></p><center>图26 灯灭状态消息</center><p><img src="https://upimage.alexhchu.com/2021/02/07/8ba6e7335fcfe.png" alt="灯亮状态消息.png"></p><center>图27 灯亮状态消息</center><p>直接判断收到的消息即可，见图28：</p><p><img src="https://upimage.alexhchu.com/2021/02/07/d48306128263c.png" alt="判断消息.png"></p><center>图28 判断消息</center><h3 id="4-全部代码"><a href="#4-全部代码" class="headerlink" title="4.全部代码"></a>4.全部代码</h3><p><img src="https://upimage.alexhchu.com/2021/02/07/2fb5f1d3f0fcb.png" alt="全部代码.png"></p><center>图29 全部代码</center><h3 id="5-源代码"><a href="#5-源代码" class="headerlink" title="5.源代码"></a>5.源代码</h3><p><a href="https://mc.dfrobot.com.cn/forum.php?mod=attachment&aid=MTE5MDAxfGVlNzgzNThjfDE2MTI2ODc3MTN8ODM0NzM1fDMwODMzNg==">下载链接</a></p><h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><blockquote><p><a href="https://mc.dfrobot.com.cn/thread-275452-1-1.html">https://mc.dfrobot.com.cn/thread-275452-1-1.html</a> （App部分是参照这个教程照葫芦画瓢做出来的）</p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;1-注册账号并登录阿里云IoT平台&quot;&gt;&lt;a href=&quot;#1-注册账号并登录阿里云IoT平台&quot; class=&quot;he</summary>
      
    
    
    
    <category term="IoT物联网" scheme="https://amnesia-f.github.io/categories/IoT%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="物联网" scheme="https://amnesia-f.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="阿里云" scheme="https://amnesia-f.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Arduino驱动的安装</title>
    <link href="https://amnesia-f.github.io/posts/21396629.html"/>
    <id>https://amnesia-f.github.io/posts/21396629.html</id>
    <published>2021-02-04T13:54:46.000Z</published>
    <updated>2021-02-04T14:53:39.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、下载Arduino-IDE"><a href="#一、下载Arduino-IDE" class="headerlink" title="一、下载Arduino IDE"></a>一、下载Arduino IDE</h1><blockquote><p>如果您已经下载了Arduino IDE请直接跳过此步骤。</p></blockquote><p>官方下载地址： <a href="http://arduino.cc/en/Main/Software">http://arduino.cc/en/Main/Software</a></p><p>Arduino IDE老版本下载链接：<a href="https://www.arduino.cc/en/Main/OldSoftwareReleases/#previous">https://www.arduino.cc/en/Main/OldSoftwareReleases/#previous</a></p><p>进入到页面后，找到下图显示部分。</p><p><img src="https://img.imgdb.cn/item/601c07363ffa7d37b3884a2f.png"></p><p>Windows用户，点击下载Windows(ZIPfile)，如果Mac，Linux用户则选择相应的系统。 下载完成后，解压文件，把解压后的Arduino文件夹放到你电脑熟悉的位置，便于你之后查找。打开Arduino文件夹，就是下图看到的内容。</p><p><img src="https://img.imgdb.cn/item/601c07363ffa7d37b3884a2c.png"></p><h1 id="二、驱动安装"><a href="#二、驱动安装" class="headerlink" title="二、驱动安装"></a>二、驱动安装</h1><h2 id="方法1：使用官方提供的一键安装程序安装（推荐）"><a href="#方法1：使用官方提供的一键安装程序安装（推荐）" class="headerlink" title="方法1：使用官方提供的一键安装程序安装（推荐）"></a>方法1：使用官方提供的一键安装程序安装（推荐）</h2><p>　　打开解压后的文件，打开**”drivers”**文件夹 　　如果你的电脑是32位系统，就运行dpinst-x86.exe 　　如果是64位系统，就运行dpinst-amd64.exe 　　然后在弹出的对话框中点击“下一步”，即可完成安装，如下图：</p><p><img src="https://img.imgdb.cn/item/601c07363ffa7d37b3884a32.png"><br><img src="https://img.imgdb.cn/item/601c07363ffa7d37b3884a39.png"><br><img src="https://img.imgdb.cn/item/601c07363ffa7d37b3884a3e.png"> 　 　　</p><h2 id="方法2：传统的安装驱动的方法"><a href="#方法2：传统的安装驱动的方法" class="headerlink" title="方法2：传统的安装驱动的方法"></a>方法2：传统的安装驱动的方法</h2><p>第一步：如果你使用的是旧的板子，解压Old_Arduino_Drivers.zip</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_1.png" alt="driver_1"></p><p>第二步：把USB一端插到UNO上，另一端连到电脑。连接成功后，UNO板的红色电源指示灯ON亮起。然后，打开控制面板，选择设备管理器。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_2.png" alt="driver_2"></p><p>第三步：找到其它设备 –&gt;Arduino-xx，右击选择更新驱动程序软件。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_3.png" alt="driver_3"></p><p>第四步：在弹出的对话框中选择下面一项 –&gt; 手动查找并安装驱动程序软件。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_4.png" alt="driver_4"></p><p>第五步：打开到Arduino IDE安装位置，就是上面那个解压文件的位置，选择搜索路径到drivers，点击下一步。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_5.png" alt="driver_5"></p><p>第六步：选择始终安装此驱动程序软件，直至完成。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_6.png" alt="driver_6"></p><p>第七步：出现下图，说明驱动安装成功。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_7.png" alt="driver_7"></p><p>第八步：此时，设备管理器端口会显示一个串口号。</p><p><img src="http://imgtest.dfrobot.com.cn/DFRobotCnWikiImage/driver_8.png" alt="driver_8"></p><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><h3 id="1、问题：“这个INF中的服务安装段落无效”、“系统找不到指定文件”"><a href="#1、问题：“这个INF中的服务安装段落无效”、“系统找不到指定文件”" class="headerlink" title="1、问题：“这个INF中的服务安装段落无效”、“系统找不到指定文件”"></a>1、问题：“这个INF中的服务安装段落无效”、“系统找不到指定文件”</h3><p>原因：您使用了精简版系统，缺少系统文件</p><p>解决办法1：</p><p><a href="http://www.dfrobot.com.cn/community/forum.php?mod=viewthread&tid=23706&fromuid=724121">【图文教程】驱动安装故障解决办法之系统文件缺失</a><br>解决办法2：</p><p><a href="http://mc.dfrobot.com.cn/forum.php?mod=viewthread&tid=361&fromuid=724121">Arduino无法安装驱动找不到指定文件问题的解决方法</a></p><h3 id="2、问题：“Windows无法验证此设备所需的驱动程序的数字签名”"><a href="#2、问题：“Windows无法验证此设备所需的驱动程序的数字签名”" class="headerlink" title="2、问题：“Windows无法验证此设备所需的驱动程序的数字签名”"></a>2、问题：“Windows无法验证此设备所需的驱动程序的数字签名”</h3><p>原因：win7及以上版本系统安装驱动需要签名<br><strong>首先尝试：</strong><br>1、安装<a href="http://mindplus.cc/">新版本Mind+</a><br>2、关闭电脑网络（防止自动安装）<br>3、设备管理器把签名有问题的com口卸载掉<br>4、使用新版本Mind+的一键安装驱动</p><p><strong>如果上面方法无法解决</strong>，按照如下操作：<br>解决办法1：<a href="http://jingyan.baidu.com/article/3f16e003cb7d0f2590c10345.html">win7禁用驱动数字签名的方法-组策略管理器</a><br>解决办法2：<a href="http://jingyan.baidu.com/article/3d69c5518ca3fdf0cf02d7c9.html">win7禁用驱动数字签名的方法-高级启动项</a><br>解决办法3：<a href="http://jingyan.baidu.com/article/3f16e003d1f4612591c103ce.html">win8/win8.1禁用驱动数字签名的一种方法</a><br>解决办法4：<a href="http://www.jb51.net/os/win10/366701.html">Win10系统遇到驱动需要数字签名无法安装问题的解决方法</a><br>解决办法5：<a href="http://jingyan.baidu.com/article/5553fa82c560bf65a2393486.html">Win10禁用驱动程序强制签名</a></p><h3 id="3、问题：“在win7-32-amp-64-下识别为未知设备”"><a href="#3、问题：“在win7-32-amp-64-下识别为未知设备”" class="headerlink" title="3、问题：“在win7 32&amp;64 下识别为未知设备”"></a>3、问题：“在win7 32&amp;64 下识别为未知设备”</h3><p>解决办法：<a href="http://www.arduino.cn/thread-5514-1-1.html">win7 32&amp;64 下强行安装Arduino图解(by NumB</a></p><h3 id="4、其他解决办法："><a href="#4、其他解决办法：" class="headerlink" title="4、其他解决办法："></a>4、其他解决办法：</h3><p>a)<a href="http://www.arduino.cn/forum.php?mod=viewthread&tid=12349&highlight=%E9%A9%B1%E5%8A%A8">Arduino驱动问题一键修复工具</a><br>b)<a href="https://www.arduino.cc/en/Main/OldSoftwareReleases#previous">安装老版本1.5.6ide的驱动</a><br>c)<a href="http://www.wch.cn/download/CH341SER_EXE.html">安装CH341SER的驱动</a></p><h3 id="5、leonardo主控板没有串口："><a href="#5、leonardo主控板没有串口：" class="headerlink" title="5、leonardo主控板没有串口："></a>5、leonardo主控板没有串口：</h3><p><a href="http://mc.dfrobot.com.cn/forum.php?mod=viewthread&tid=2687&fromuid=724121">Arduino Leonardo的串口消失了，该怎么办呢？</a></p><blockquote><p><strong>注意：如果以上均无法解决，建议重装</strong><a href="http://www.itellyou.cn/">完整原版系统</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、下载Arduino-IDE&quot;&gt;&lt;a href=&quot;#一、下载Arduino-IDE&quot; class=&quot;headerlink&quot; title=&quot;一、下载Arduino IDE&quot;&gt;&lt;/a&gt;一、下载Arduino IDE&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如果您已经</summary>
      
    
    
    
    <category term="Arduino" scheme="https://amnesia-f.github.io/categories/Arduino/"/>
    
    
    <category term="Arduino" scheme="https://amnesia-f.github.io/tags/Arduino/"/>
    
    <category term="安装驱动" scheme="https://amnesia-f.github.io/tags/%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>修改Windows文件和文件夹的时间戳</title>
    <link href="https://amnesia-f.github.io/posts/e98f2569.html"/>
    <id>https://amnesia-f.github.io/posts/e98f2569.html</id>
    <published>2021-02-02T10:01:57.000Z</published>
    <updated>2021-02-02T13:15:46.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在正常情况下，文件和文件夹的时间戳是无法手动修改的。</p><p>但是在某些特殊情况下，例如应对检查或交差时我们需要更改文件或文件夹的时间戳，该如何是好呢？</p><p>这时就需要用到一个叫做<code>NewFileTime</code>的软件了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><code>NewFileTime</code>是一款小巧易用且可以修改文件时间属性的工具。</p><p>这个工具可以便捷地修改任何文件或文件夹的时间戳。</p><p>它可以用来进行时间校正，例如: 数码相机、计算机上的时间设置不正确，或其他重要原因。</p><p>同时还能修改文件的创建时间、访问时间、和修改时间三项数据。</p><p>软件不仅功能强大，还是单文件，体积仅81kb，提供中文版，具体支持语言见下表：</p><table><thead><tr><th align="center">Language</th><th align="center">%</th><th align="center">Translator Name</th></tr></thead><tbody><tr><td align="center"><a href="http://www.softwareok.de/?seite=Microsoft/NewFileTime/language/German">German  / Deutsch</a></td><td align="center">100 %</td><td align="center">Nenad Hrg</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/English">English  / Englisch</a></td><td align="center">100 %</td><td align="center">Nenad Hrg</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Japanese">Japanese  / 日本</a></td><td align="center">100 %</td><td align="center">BlueX</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Italian">Italian  / Italiano</a></td><td align="center">100 %</td><td align="center"></td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/French">French  / Français</a></td><td align="center">100 %</td><td align="center">Drake4478</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Chinese-Simplified">Chinese-Simplified  / 简体中文</a></td><td align="center">92 %</td><td align="center">Eden-LZD</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Dutch">Dutch  / Nederlands</a></td><td align="center">38 %</td><td align="center">Anton Rooijakkers</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Spanisch">Spanisch  / Español (Argentina)</a></td><td align="center">38 %</td><td align="center">Javier Richarte</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Traditional-Chinese">Traditional-Chinese  / 繁體中文</a></td><td align="center">100 %</td><td align="center">Danfong Hsieh</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Brazil">Brazil  / Português</a></td><td align="center">83 %</td><td align="center">Élson Viana</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Czech">Czech  / Český</a></td><td align="center">83 %</td><td align="center">DžejPý, based Vaclav Sadilek</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Romanian">Romanian  / Română</a></td><td align="center">69 %</td><td align="center">Adrian Gabor</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Russian">Russian  / Pусский</a></td><td align="center">100 %</td><td align="center">Григорьев Юрий Александрович</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Swedish">Swedish  / Svenska</a></td><td align="center">70 %</td><td align="center">Åke Engelbrektson</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Greek">Greek  / Ελληνικά</a></td><td align="center">83 %</td><td align="center">geogeo.gr</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Arabic">Arabic  / العربية</a></td><td align="center">98 %</td><td align="center">Abuyzeed</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Polish">Polish  / Polski</a></td><td align="center">69 %</td><td align="center">Michał ‘Reload’ Michalik</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Hungarian">Hungarian  / Magyar</a></td><td align="center">69 %</td><td align="center">Lajos Fekete</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Korean">Korean  / 한국어</a></td><td align="center">100 %</td><td align="center">BlueX</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Turkish">Turkish  / Türkçe</a></td><td align="center">100 %</td><td align="center">Abdurrahman Özbek</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Espa%EF%BF%BDol">Español  / Spanisch</a></td><td align="center">69 %</td><td align="center">Serrael</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Belgium-Dutch">Belgium-Dutch  / Netherlands</a></td><td align="center">79 %</td><td align="center">A. Van Landschoot</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Persian">Persian  / فارسی</a></td><td align="center">79 %</td><td align="center">JAVAD JOURSARAEI Alashti</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Danish">Danish  / Dansk</a></td><td align="center">79 %</td><td align="center">John W. Hansen</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Spanish-Colombia">Spanish-Colombia  / Español-Colombia</a></td><td align="center">83 %</td><td align="center">Carlos A Medina R</td></tr><tr><td align="center"><a href="http://www.softwareok.eu/?seite=Microsoft/NewFileTime/language/Bulgarian">Bulgarian  / Български</a></td><td align="center">97 %</td><td align="center">Иван Караджов</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Ukrainian">Ukrainian  / Українська</a></td><td align="center">100 %</td><td align="center">Петро Сульжик - PJ</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Thai">Thai  / ภาษาไทย</a></td><td align="center">100 %</td><td align="center">Chanchana</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Polish">Polish  / Polski</a></td><td align="center">100 %</td><td align="center">Michał</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Norwegian">Norwegian  / Norsk</a></td><td align="center">100 %</td><td align="center">Norsk-Superman</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Irisch">Irisch  / United Kingdom</a></td><td align="center">100 %</td><td align="center">Brexit</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Portuguese">Portuguese  / Portuguese</a></td><td align="center">100 %</td><td align="center">Ronaldo C.</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Vietnamese">Vietnamese  / Tiếng Việt (Việt Nam)</a></td><td align="center">100 %</td><td align="center">Huy</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Afrikaans">Afrikaans  / South-Africa</a></td><td align="center">100 %</td><td align="center">African-Man</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Hindi">Hindi  / हिन्दी</a></td><td align="center">98 %</td><td align="center">The Hindi Man</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Spanish-VE">Spanish-VE  / Venezuela</a></td><td align="center">100 %</td><td align="center">Ricardo A. Rivas</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Indonesian">Indonesian  / Indonesia</a></td><td align="center">100 %</td><td align="center">Indonesian Super Girl</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Malay">Malay  / Malaysia</a></td><td align="center">100 %</td><td align="center">Washington</td></tr><tr><td align="center"><a href="http://www.softwareok.com/?seite=Microsoft/NewFileTime/language/Filipino">Filipino  / Pilipino</a></td><td align="center">100 %</td><td align="center">Abraham Lincoln</td></tr></tbody></table><h1 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h1><p><img src="https://img.imgdb.cn/item/60194a283ffa7d37b37ec36b.png" alt="软件截图"></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>这里以我U盘内的文件与文件夹为例，可以看到没修改前许多文件夹都是正常的时间：</p><p><img src="https://img.imgdb.cn/item/60194a283ffa7d37b37ec370.png" alt="未修改"></p><p>接着我们打开软件，将全选所有文件与文件夹，然后拖到软件中间的白色区域，如下图：</p><p><img src="https://img.imgdb.cn/item/60194b2b3ffa7d37b37f5ac3.png"></p><p>接着我们选择修改后的显示时间，并按下<code>应用时间</code>：</p><p><img src="https://img.imgdb.cn/item/60194a283ffa7d37b37ec37a.png"></p><p>再回到U盘，可以看到，时间已经被全部修改成2096年2月2日了：</p><p><img src="https://img.imgdb.cn/item/60194a283ffa7d37b37ec383.png"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>详见官方文档：<a href="http://www.softwareok.com/?seite=faq-NewFileTime&amp;faq=0">http://www.softwareok.com/?seite=faq-NewFileTime&amp;faq=0</a></p><h1 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h1><p>NewFileTime.zip：<a href="http://www.softwareok.com/?Download=NewFileTime&amp;goto=../Download/NewFileTime.zip">http://www.softwareok.com/?Download=NewFileTime&amp;goto=../Download/NewFileTime.zip</a></p><p>NewFileTime_Unicode.zip：<a href="http://www.softwareok.com/?Download=NewFileTime&amp;goto=../Download/NewFileTime_Unicode.zip">http://www.softwareok.com/?Download=NewFileTime&amp;goto=../Download/NewFileTime_Unicode.zip</a></p><p>NewFileTime_x64.zip for 64-Bit (x64) Windows：<a href="http://www.softwareok.com/?Download=NewFileTime&amp;goto=../Download/NewFileTime_x64.zip">http://www.softwareok.com/?Download=NewFileTime&amp;goto=../Download/NewFileTime_x64.zip</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在正常情况下，文件和文件夹的时间戳是无法手动修改的。&lt;/p&gt;
&lt;p&gt;但是在某些特殊情况下，例如应对检查或交差时我们需要更改文件或文件夹的时间</summary>
      
    
    
    
    <category term="Windows" scheme="https://amnesia-f.github.io/categories/Windows/"/>
    
    <category term="系统增强" scheme="https://amnesia-f.github.io/categories/Windows/%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%BC%BA/"/>
    
    
    <category term="Windows" scheme="https://amnesia-f.github.io/tags/Windows/"/>
    
    <category term="系统增强" scheme="https://amnesia-f.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 20H2 2021.1 更新镜像</title>
    <link href="https://amnesia-f.github.io/posts/dbba.html"/>
    <id>https://amnesia-f.github.io/posts/dbba.html</id>
    <published>2021-02-01T08:12:35.000Z</published>
    <updated>2021-02-01T10:49:22.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前Windows10最新的版本是2020年9月发布的20H2版本。</p><p><img src="https://img.imgdb.cn/item/6017bba83ffa7d37b3d1cfa5.png" alt="版本一览">(图源：吾爱破解论坛)</p><p>几天前，微软向MSDN订阅用户推送了20H2的1月份累计更新。也就是在2020年9月发布之后，到2021年1月份之间的补丁，全部整合到新的镜像里了。</p><p>下面就带来Windows 10 20H2 2021.1 的更新镜像：</p><h1 id="64位镜像"><a href="#64位镜像" class="headerlink" title="64位镜像"></a>64位镜像</h1><h3 id="Windows-10-business-edition-version-20H2-updated-Jan-2021-x64-DVD-Chinese-Simplified"><a href="#Windows-10-business-edition-version-20H2-updated-Jan-2021-x64-DVD-Chinese-Simplified" class="headerlink" title="Windows 10 (business edition), version 20H2 (updated Jan 2021) (x64) - DVD (Chinese-Simplified)"></a>Windows 10 (business edition), version 20H2 (updated Jan 2021) (x64) - DVD (Chinese-Simplified)</h3><p>文件：cn_windows_10_business_editions_version_20h2_updated_jan_2021_x64_dvd_b6eb1ee6.iso</p><p>大小：5.61GB</p><h4 id="校验信息："><a href="#校验信息：" class="headerlink" title="校验信息："></a>校验信息：</h4><p>MD5：DB2E7F79192C9EBD74B2DB0D1ED157A4</p><p>SHA1：A32921B174CF0D7B571AA2D19143A228E4633A0E</p><p>SHA256：AB9B0CAD001FF218AC5DF17BAB973116CC7B418B4D45F3757F2A3F865F8125F7</p><h4 id="下载链接："><a href="#下载链接：" class="headerlink" title="下载链接："></a>下载链接：</h4><p>ED2K：ed2k://|file|cn_windows_10_business_editions_version_20h2_updated_jan_2021_x64_dvd_b6eb1ee6.iso|6025357312|59B9788D4AA91EA4DA6FB25711CAC8C8|/</p><p>BT：magnet:?xt=urn:btih:9102DC7F7ED0304C9EB67472AFBD8F9305FF252D&amp;dn=cn_windows_10_business_editions_version_20h2_updated_jan_2021_x64_dvd_b6eb1ee6.iso&amp;xl=6025357312</p><h3 id="Windows-10-consumer-edition-version-20H2-updated-Jan-2021-x64-DVD-Chinese-Simplified"><a href="#Windows-10-consumer-edition-version-20H2-updated-Jan-2021-x64-DVD-Chinese-Simplified" class="headerlink" title="Windows 10 (consumer edition), version 20H2 (updated Jan 2021) (x64) - DVD (Chinese-Simplified)"></a>Windows 10 (consumer edition), version 20H2 (updated Jan 2021) (x64) - DVD (Chinese-Simplified)</h3><p>文件：cn_windows_10_consumer_editions_version_20h2_updated_jan_2021_x64_dvd_0af89254.iso</p><p>大小：5.76GB</p><h4 id="校验信息：-1"><a href="#校验信息：-1" class="headerlink" title="校验信息："></a>校验信息：</h4><p>MD5：0613004BB8443B589412ABE70EE0A9D5</p><p>SHA1：34C3520654FE4FB626299C08D14CEBB987F125B5</p><p>SHA256：38F2E2F0225008CD2B304BEFE654756D6BD52B1E22DE588342DA21D7BBE03CFE</p><h4 id="下载链接：-1"><a href="#下载链接：-1" class="headerlink" title="下载链接："></a>下载链接：</h4><p>ED2K：ed2k://|file|cn_windows_10_consumer_editions_version_20h2_updated_jan_2021_x64_dvd_0af89254.iso|6189598720|D478F8B7C7063A5A8A3CC20026917233|/</p><p>BT：magnet:?xt=urn:btih:4BCBFECC244E8D04DA754553329EFFB95B4D99ED&amp;dn=cn_windows_10_consumer_editions_version_20h2_updated_jan_2021_x64_dvd_0af89254.iso&amp;xl=6189598720</p><h1 id="32位镜像"><a href="#32位镜像" class="headerlink" title="32位镜像"></a>32位镜像</h1><h3 id="Windows-10-business-edition-version-20H2-updated-Jan-2021-x86-DVD-Chinese-Simplified"><a href="#Windows-10-business-edition-version-20H2-updated-Jan-2021-x86-DVD-Chinese-Simplified" class="headerlink" title="Windows 10 (business edition), version 20H2 (updated Jan 2021) (x86) - DVD (Chinese-Simplified)"></a>Windows 10 (business edition), version 20H2 (updated Jan 2021) (x86) - DVD (Chinese-Simplified)</h3><p>文件：cn_windows_10_business_editions_version_20h2_updated_jan_2021_x86_dvd_6e0c098e.iso</p><p><strong>大小</strong>：4.13GB</p><h4 id="校验信息：-2"><a href="#校验信息：-2" class="headerlink" title="校验信息："></a>校验信息：</h4><p><strong>MD5</strong>：68D85B882705DA2ECB1091E1223EB1C3</p><p><strong>SHA1</strong>：2A0C32F3A6ECB9EF4E6848734E7E20035A68E103</p><h4 id="下载链接：-2"><a href="#下载链接：-2" class="headerlink" title="下载链接："></a>下载链接：</h4><p><strong>磁力链接</strong>：magnet:?xt=urn:btih:D69BD1CE857BE5C63456C9F6E32951707DC90487&amp;dn=cn_windows_10_business_editions_version_20h2_updated_jan_2021_x86_dvd_6e0c098e.iso&amp;xl=4432150528</p><h3 id="Windows-10-consumer-edition-version-20H2-updated-Jan-2021-x86-DVD-Chinese-Simplified"><a href="#Windows-10-consumer-edition-version-20H2-updated-Jan-2021-x86-DVD-Chinese-Simplified" class="headerlink" title="Windows 10 (consumer edition), version 20H2 (updated Jan 2021) (x86) - DVD (Chinese-Simplified)"></a>Windows 10 (consumer edition), version 20H2 (updated Jan 2021) (x86) - DVD (Chinese-Simplified)</h3><p>文件：cn_windows_10_consumer_editions_version_20h2_updated_jan_2021_x86_dvd_bd5d62ca.iso</p><p>大小：4.23GB</p><h4 id="校验信息：-3"><a href="#校验信息：-3" class="headerlink" title="校验信息："></a>校验信息：</h4><p>MD5：F8CADF46FDC4BD46441EE150AF40CFFA</p><p>SHA1：8E9B1D356603B3709A6229B4336AE00F5D412982</p><h4 id="下载链接：-3"><a href="#下载链接：-3" class="headerlink" title="下载链接："></a>下载链接：</h4><p>磁力链接：magnet:?xt=urn:btih:884A9551384F13178C482C2617C1FDA6CE660F5B&amp;dn=cn_windows_10_consumer_editions_version_20h2_updated_jan_2021_x86_dvd_bd5d62ca.iso&amp;xl=4536780800</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>官方网站：<a href="https://www.microsoft.com/zh-cn/windows">https://www.microsoft.com/zh-cn/windows</a></p><blockquote><p>本站数据均来自于互联网搜集，如有侵犯您的权利，请联系删除。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前Windows10最新的版本是2020年9月发布的20H2版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.imgdb.</summary>
      
    
    
    
    <category term="Windows" scheme="https://amnesia-f.github.io/categories/Windows/"/>
    
    <category term="系统镜像" scheme="https://amnesia-f.github.io/categories/Windows/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/"/>
    
    
    <category term="系统镜像" scheme="https://amnesia-f.github.io/tags/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/"/>
    
    <category term="Windows" scheme="https://amnesia-f.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>KMS激活Windows一键脚本</title>
    <link href="https://amnesia-f.github.io/posts/f7a.html"/>
    <id>https://amnesia-f.github.io/posts/f7a.html</id>
    <published>2021-01-31T03:40:28.000Z</published>
    <updated>2021-01-31T05:17:35.073Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/601638d73ffa7d37b3356166.png" alt="封面"></p><h2 id="KMS激活Windows一键脚本"><a href="#KMS激活Windows一键脚本" class="headerlink" title="KMS激活Windows一键脚本"></a>KMS激活Windows一键脚本</h2><p>1、激活步骤：根据自身系统下载激活脚本，再右键使用管理员运行该脚本即可。</p><p>2、不知道系统版本的，使用Win+R，输入cmd并运行，然后在命令窗口输入slmgr/dlv查看版本。</p><p>3、使用KMS激活系统后，有效期为180天。</p><p>4、系统每7天会连接一次KMS服务器，获取最新的授权，然后激活有效期会重置为180天。</p><p>5、只要KMS激活服务器不挂，激活状态会一直自动续命，无需人工再次干预。</p><p>6、如果激活失败可先尝试清除后激活，<a href="https://kms.ikxin.com/kms.php?clean=1">点击下载清除脚本</a>。</p><h1 id="支持版本"><a href="#支持版本" class="headerlink" title="支持版本"></a>支持版本</h1><ul><li>Windows 10 </li><li>Windows 8.1</li><li>Windows 8</li><li>Windows Vista</li><li>Windows 7</li><li>Windows Server 2016</li><li>Windows Server 2012</li><li>Windows Server 2008</li></ul><h3 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h3><p>Windows 10 Professional</p><p>Windows 10 Professional N</p><p>Windows 10 Enterprise</p><p>Windows 10 Enterprise N</p><p>Windows 10 Education</p><p>Windows 10 Education N</p><p>Windows 10 Enterprise 2015 LTSB</p><p>Windows 10 Enterprise 2015 LTSB N</p><p>Windows 10 Enterprise 2016 LTSB</p><p>Windows 10 Enterprise 2016 LTSB N</p><h3 id="Win8-1"><a href="#Win8-1" class="headerlink" title="Win8.1"></a>Win8.1</h3><p>Windows 8.1 Professional</p><p>Windows 8.1 Professional N</p><p>Windows 8.1 Enterprise</p><p>Windows 8.1 Enterprise N</p><h3 id="Win8"><a href="#Win8" class="headerlink" title="Win8"></a>Win8</h3><p>Windows 8 Professional</p><p>Windows 8 Professional N</p><p>Windows 8 Enterprise</p><p>Windows 8 Enterprise N</p><h3 id="Windows-Vista"><a href="#Windows-Vista" class="headerlink" title="Windows Vista"></a>Windows Vista</h3><p>Windows Vista Business</p><p>Windows Vista Business N</p><p>Windows Vista Enterprise</p><p>Windows Vista Enterprise N</p><h3 id="Win7"><a href="#Win7" class="headerlink" title="Win7"></a>Win7</h3><p>Windows 7 Professional</p><p>Windows 7 Professional N</p><p>Windows 7 Professional E</p><p>Windows 7 Enterprise</p><p>Windows 7 Enterprise N</p><p>Windows 7 Enterprise E</p><h3 id="Windows-Server-2016"><a href="#Windows-Server-2016" class="headerlink" title="Windows Server 2016"></a>Windows Server 2016</h3><p>Windows Server 2016 Datacenter</p><p>Windows Server 2016 Standard</p><p>Windows Server 2016 Essentials</p><h3 id="Windows-Server-2012"><a href="#Windows-Server-2012" class="headerlink" title="Windows Server 2012"></a>Windows Server 2012</h3><p>Windows Server 2012 R2 Server Standard</p><p>Windows Server 2012 R2 Datacenter</p><p>Windows Server 2012 R2 Essentials<br>Windows Server 2012</p><p>Windows Server 2012 N</p><p>Windows Server 2012 Single Language</p><p>Windows Server 2012 Country Specific</p><p>Windows Server 2012 Server Standard</p><p>Windows Server 2012 MultiPoint Standard</p><p>Windows Server 2012 MultiPoint Premium</p><p>Windows Server 2012 Datacenter</p><h3 id="Windows-Server-2008"><a href="#Windows-Server-2008" class="headerlink" title="Windows Server 2008"></a>Windows Server 2008</h3><p>Windows Server 2008 R2 Web</p><p>Windows Server 2008 R2 HPC edition</p><p>Windows Server 2008 R2 Standard</p><p>Windows Server 2008 R2 Enterprise</p><p>Windows Server 2008 R2 Datacenter</p><p>Windows Server 2008 R2 for Itanium-based Systems</p><p>Windows Web Server 2008</p><p>Windows Server 2008 Standard</p><p>Windows Server 2008 Standard without Hyper-V</p><p>Windows Server 2008 Enterprise</p><p>Windows Server 2008 Enterprise without Hyper-V</p><p>Windows Server 2008 HPC</p><p>Windows Server 2008 Datacenter</p><p>Windows Server 2008 Datacenter without Hyper-V</p><p>Windows Server 2008 for Itanium-Based Systems</p><h1 id="激活脚本下载地址"><a href="#激活脚本下载地址" class="headerlink" title="激活脚本下载地址"></a>激活脚本下载地址</h1><p><a href="https://amnesia-f.github.io/HTML/KMS/kms.html">https://amnesia-f.github.io/HTML/KMS/kms.html</a></p><h1 id="GitHub项目地址"><a href="#GitHub项目地址" class="headerlink" title="GitHub项目地址"></a>GitHub项目地址</h1><p><a href="https://github.com/ikxin/KMS-Scripts">https://github.com/ikxin/KMS-Scripts</a></p><blockquote><p>Powered by <a href="https://github.com/ikxin/KMS-WebUI">KMS-WebUI</a> | Theme by <a href="https://www.layui.com/">LayUI</a> | Author by <a href="https://www.ikxin.com/">iKxin</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/601638d73ffa7d37b3356166.png&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;KMS激活Windows一键脚本&quot;&gt;&lt;a href=&quot;#KMS激活Windows一键脚本&quot; cla</summary>
      
    
    
    
    <category term="PC" scheme="https://amnesia-f.github.io/categories/PC/"/>
    
    <category term="激活工具" scheme="https://amnesia-f.github.io/categories/PC/%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="PC" scheme="https://amnesia-f.github.io/tags/PC/"/>
    
    <category term="KMS" scheme="https://amnesia-f.github.io/tags/KMS/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm激活至2099年方法</title>
    <link href="https://amnesia-f.github.io/posts/b7ed.html"/>
    <id>https://amnesia-f.github.io/posts/b7ed.html</id>
    <published>2021-01-29T02:41:21.000Z</published>
    <updated>2021-02-10T06:17:47.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Pycharm是一个面向专业开发者的Python IDE，官网：<a href="https://www.jetbrains.com/zh-cn/pycharm/%EF%BC%9B">https://www.jetbrains.com/zh-cn/pycharm/；</a></p><p>然而正版的价钱却实在不敢恭维：</p><p><img src="https://img.imgdb.cn/item/601378ea3ffa7d37b32bd076.png" alt="购买Pycharm"></p><p>当然这并不是提倡使用盗版，有能力还是要支持正版。</p><p>网上大部分激活的方法都已失效了，今天就带来一个激活Pycharm的方法，1月29日11点测试可用，此方法容易失效，请尽快食用。</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>1.启动Pycharm，这里放出官网的<a href="https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows">下载链接</a>；</p><p>2.将压缩包内的BetterIntelliJ.zip文件拖到pycharm主界面上：</p><p><img src="https://img.imgdb.cn/item/601377b03ffa7d37b32b44bb.png" alt="重启"></p><p>3.点击restart重启软件，提示Plugin updates installed BetterIntelliJ即为安装成功：<img src="https://img.imgdb.cn/item/601377b03ffa7d37b32b44a9.png" alt="安装成功"></p><p>4.重启 PyCharm 后点击菜单【Help】-&gt;【Register】</p><p>5.如果使用了的或者激活过的请点击“ADD NEW LICENSE”(如果没有可跳过)：</p><p><img src="https://img.imgdb.cn/item/601377b03ffa7d37b32b44b5.png" alt="激活界面"></p><p>6.点击Activate PyCharm-Activeation code，将压缩包内的key.txt文件内的全部内容复制进去：</p><p><img src="https://img.imgdb.cn/item/60137bb43ffa7d37b32d2084.png" alt="步骤"></p><p>7.点击ACTIVATE，即可激活至2099年：</p><p><img src="https://img.imgdb.cn/item/601377b03ffa7d37b32b44b1.png" alt="激活成功"></p><p>PS：如果你的 PyCharm 在安装完插件后不能重启请尝试删除 <code>C:\Users\【系统用户名】\AppData\Roaming\JetBrains\PyCharm2020.3</code> 文件夹</p><h1 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BISACXYELK-eyJsaWNlbnNlSWQiOiJCSVNBQ1hZRUxLIiwibGljZW5zZWVOYW1lIjoiQ2hpbmFOQiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNWIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRQIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjAwNzI4RVBKQTAwODAwNiIsImhhc2giOiIxNTAyMTM1NC8wOi0xMjUxMTE0NzE3IiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-H7NUmWcLyUNV1ctnlzc4P79j15qL56G0jeIYWPk&#x2F;HViNdMg1MqPM7BR+aHR28yyuxK7Odb2bFDS8CeHNUtv7nT+4fUs85JJiqc3wc1psRpZq5R77apXLOmvmossWpbAw8T1hOGV9IPUm1f2O1+kLBxrOkdqPpv9+JanbdL7bvchAid2v4&#x2F;dyQMBYJme&#x2F;feZ0Dy2l7Jjpwno1TeblEAu0KZmarEo15or5RUNwtaGBL5+396TLhnw1qL904&#x2F;uPnGftjxWYluLjabO&#x2F;uRu&#x2F;+5td8UA&#x2F;39a1nvGU2nORNLk2IdRGIheiwIiuirAZrII9+OxB+p52i3TIv7ugtkw0E3Jpkw&#x3D;&#x3D;-MIIDlzCCAn+gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDEw1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjBoMQswCQYDVQQGEwJDWjEOMAwGA1UECBMFTnVzbGUxDzANBgNVBAcTBlByYWd1ZTEZMBcGA1UEChMQSmV0QnJhaW5zIHMuci5vLjEdMBsGA1UEAxMUcHJvZDN5LWZyb20tMjAxODExMDEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCdXyaNhhRySH1a8d7c8SlLLFdNcQP8M3gNnq7gudcpHC651qxRrN7Qks8gdXlIkA4u3&#x2F;lp9ylp95GiIIDo4ydYje8vlTWDq02bkyWW&#x2F;G7gZ3hkbBhRUK&#x2F;WnNyr2vwWoOgwx5CfTRMjKkPkfD&#x2F;+jffkfNfdGmGcg9yfnqPP9&#x2F;AizKzWTsXSeS+0jZ8Nw5tiYFW+lpceqlzwzKdTHug7Vs0QomUPccRtZB&#x2F;TBBEuiC7YzrvLg4Amu0I48ETAcch&#x2F;ztt00nx&#x2F;oj&#x2F;fu1DTnz4Iz4ilrNY+WVIEfDz&#x2F;n3mz+PKI9kM+ZeB0jAuyLsiC7skGpIVGX&#x2F;2HqmZTtJKBZCoveAiVAgMBAAGjgZkwgZYwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TAJBgNVHRMEAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAdBgNVHQ4EFgQUYSkb2hkZx8swY0GRjtKAeIwaBNwwDQYJKoZIhvcNAQELBQADggEBAJZOakWgjfY359glviVffBQFxFS6C+4WjYDYzvzjWHUQoGBFKTHG4xUmTVW7y5GnPSvIlkaj49SzbD9KuiTc77GHyFCTwYMz+qITgbDg3&#x2F;ao&#x2F;x&#x2F;be4DD&#x2F;k&#x2F;byWqW4Rb8OSYCshX&#x2F;fNI4Xu+hxazh179taHX4NaH92ReLVyXNYsooq7mE5YhR9Qsiy35ORviQLrgFrMCGCxT9DWlFBuiPWIOqN544sL9OzFMz+bjqjCoAE&#x2F;xfIJjI7H7SqGFNrx&#x2F;8&#x2F;IuF0hvZbO3bLIz+BOR1L2O+qT728wK6womnp2LLANTPbwu7nf39rpP182WW+xw2z9MKYwwMDwGR1iTYnD4&#x2F;Sjw&#x3D;</span><br></pre></td></tr></table></figure><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><blockquote><p>下载:<a href="https://wws.lanzous.com/ikYD2l0h3ij">https://wws.lanzous.com/ikYD2l0h3ij</a> 密码:3tfr</p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Pycharm是一个面向专业开发者的Python IDE，官网：&lt;a href=&quot;https://www.jetbrains.com/zh-</summary>
      
    
    
    
    <category term="PC" scheme="https://amnesia-f.github.io/categories/PC/"/>
    
    <category term="软件激活" scheme="https://amnesia-f.github.io/categories/PC/%E8%BD%AF%E4%BB%B6%E6%BF%80%E6%B4%BB/"/>
    
    
    <category term="Pycharm" scheme="https://amnesia-f.github.io/tags/Pycharm/"/>
    
    <category term="软件激活" scheme="https://amnesia-f.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python成品：运用turtle模块绘画</title>
    <link href="https://amnesia-f.github.io/posts/7c82.html"/>
    <id>https://amnesia-f.github.io/posts/7c82.html</id>
    <published>2021-01-28T12:51:42.000Z</published>
    <updated>2021-01-28T13:44:30.459Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/6012b60e3ffa7d37b3e66e13.jpg" alt="封面"></p><h1 id="Turtle模块的函数"><a href="#Turtle模块的函数" class="headerlink" title="Turtle模块的函数"></a>Turtle模块的函数</h1><h3 id="1-画笔移动函数"><a href="#1-画笔移动函数" class="headerlink" title="1.画笔移动函数"></a>1.画笔移动函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">forward(n)</td><td align="center">向画笔的当前方向移动n像素的距离</td></tr><tr><td align="center">backward(n)</td><td align="center">向画笔当前方向的相反方向移动n像素的距离</td></tr><tr><td align="center">left(n)</td><td align="center">让画笔逆时针旋转n度</td></tr><tr><td align="center">right(n)</td><td align="center">让画笔顺时针旋转n度</td></tr><tr><td align="center">pendown()</td><td align="center">落下画笔</td></tr><tr><td align="center">penup()</td><td align="center">抬起画笔</td></tr><tr><td align="center">speed(s)</td><td align="center">设置画笔的移动速度，int(s=0~10)</td></tr><tr><td align="center">goto(x,y)</td><td align="center">将画笔移动到坐标为(x,y)的位置</td></tr><tr><td align="center">circle(r,n)</td><td align="center">绘制半径为r，角度为n的圆弧，省略n则画圆</td></tr></tbody></table><h3 id="2-画笔控制函数"><a href="#2-画笔控制函数" class="headerlink" title="2.画笔控制函数"></a>2.画笔控制函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">pensize(n)</td><td align="center">设置画笔的粗细</td></tr><tr><td align="center">pencolor(color)</td><td align="center">设置画笔的颜色</td></tr><tr><td align="center">fillcolor(color)</td><td align="center">设置图形的填充颜色</td></tr><tr><td align="center">color(color1,color2)</td><td align="center">设置画笔的颜色和图形的填充颜色</td></tr><tr><td align="center">begin_fill()</td><td align="center">准备开始填充图形</td></tr><tr><td align="center">end_fill()</td><td align="center">填充上次调用begin_fill()之后绘制的图形</td></tr><tr><td align="center">hideturtle()</td><td align="center">隐藏画笔</td></tr><tr><td align="center">showturtle()</td><td align="center">显示画笔</td></tr></tbody></table><h3 id="3-全局控制函数"><a href="#3-全局控制函数" class="headerlink" title="3.全局控制函数"></a>3.全局控制函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">clear()</td><td align="center">清空画布，不改变画笔位置与状态</td></tr><tr><td align="center">reset()</td><td align="center">重置画布，让画笔回到初始状态</td></tr><tr><td align="center">undo()</td><td align="center">撤销上一个画笔动作</td></tr><tr><td align="center">stamp()</td><td align="center">复制当前图形</td></tr><tr><td align="center">write(a[,m=(“m-name”, m-size, “m-type”)])</td><td align="center">在画布上书写文本，a为文本内容</td></tr></tbody></table><h1 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> * <span class="comment"># 导入turtle模块</span></span><br><span class="line">color(<span class="string">&quot;red&quot;</span>,<span class="string">&quot;red&quot;</span>)   <span class="comment"># 设置画笔颜色和图形填充颜色</span></span><br><span class="line">pensize(<span class="number">2</span>)           <span class="comment"># 设置画笔粗细</span></span><br><span class="line">penup()              <span class="comment"># 抬起画笔</span></span><br><span class="line">goto(<span class="number">0</span>,-<span class="number">100</span>)         <span class="comment"># 将画笔移动到坐标为(0,-100)的位置</span></span><br><span class="line">pendown()            <span class="comment"># 落下画笔</span></span><br><span class="line">begin_fill()         <span class="comment"># 准备开始填充颜色</span></span><br><span class="line">left(<span class="number">45</span>)             <span class="comment"># 让画笔逆时针旋转45度</span></span><br><span class="line">forward(<span class="number">200</span>)         <span class="comment"># 向画笔的当前方向移动200像素的距离</span></span><br><span class="line">circle(<span class="number">100</span>,<span class="number">180</span>)      <span class="comment"># 绘制半径为100、角度为180的圆弧</span></span><br><span class="line">right(<span class="number">90</span>)            <span class="comment"># 让画笔顺时针旋转90度</span></span><br><span class="line">circle(<span class="number">100</span>,<span class="number">180</span>)      <span class="comment"># 绘制半径为100、角度为180的圆弧</span></span><br><span class="line">forward(<span class="number">200</span>)         <span class="comment"># 向画笔的当前方向移动200像素的距离</span></span><br><span class="line">end_fill()           <span class="comment"># 填充上次调用begin_fill()之后绘制的图形</span></span><br><span class="line">hideturtle()         <span class="comment"># 隐藏画笔</span></span><br></pre></td></tr></table></figure><p><img src="https://img.imgdb.cn/item/6012bddc3ffa7d37b3eb0db2.png" alt="爱心"></p><h1 id="哆啦A梦"><a href="#哆啦A梦" class="headerlink" title="哆啦A梦"></a>哆啦A梦</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无轨迹跳跃</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_goto</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 眼睛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eyes</span>():</span></span><br><span class="line">    fillcolor(<span class="string">&quot;#ffffff&quot;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line"></span><br><span class="line">    tracer(<span class="literal">False</span>)</span><br><span class="line">    a = <span class="number">2.5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; <span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span> &lt;= i &lt; <span class="number">90</span>:</span><br><span class="line">            a -= <span class="number">0.05</span></span><br><span class="line">            lt(<span class="number">3</span>)</span><br><span class="line">            fd(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a += <span class="number">0.05</span></span><br><span class="line">            lt(<span class="number">3</span>)</span><br><span class="line">            fd(a)</span><br><span class="line">    tracer(<span class="literal">True</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胡须</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beard</span>():</span></span><br><span class="line">    my_goto(-<span class="number">32</span>, <span class="number">135</span>)</span><br><span class="line">    seth(<span class="number">165</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    my_goto(-<span class="number">32</span>, <span class="number">125</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    my_goto(-<span class="number">32</span>, <span class="number">115</span>)</span><br><span class="line">    seth(<span class="number">193</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    my_goto(<span class="number">37</span>, <span class="number">135</span>)</span><br><span class="line">    seth(<span class="number">15</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    my_goto(<span class="number">37</span>, <span class="number">125</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    my_goto(<span class="number">37</span>, <span class="number">115</span>)</span><br><span class="line">    seth(-<span class="number">13</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嘴巴</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouth</span>():</span></span><br><span class="line">    my_goto(<span class="number">5</span>, <span class="number">148</span>)</span><br><span class="line">    seth(<span class="number">270</span>)</span><br><span class="line">    fd(<span class="number">100</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    circle(<span class="number">120</span>, <span class="number">50</span>)</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    circle(-<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 围巾</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scarf</span>():</span></span><br><span class="line">    fillcolor(<span class="string">&#x27;#e70010&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">200</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">207</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼻子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nose</span>():</span></span><br><span class="line">    my_goto(-<span class="number">10</span>, <span class="number">158</span>)</span><br><span class="line">    seth(<span class="number">315</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#e70010&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">20</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 黑眼睛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">black_eyes</span>():</span></span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    my_goto(-<span class="number">20</span>, <span class="number">195</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">13</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    pensize(<span class="number">6</span>)</span><br><span class="line">    my_goto(<span class="number">20</span>, <span class="number">205</span>)</span><br><span class="line">    seth(<span class="number">75</span>)</span><br><span class="line">    circle(-<span class="number">10</span>, <span class="number">150</span>)</span><br><span class="line">    pensize(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    my_goto(-<span class="number">17</span>, <span class="number">200</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">5</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    my_goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">face</span>():</span></span><br><span class="line">    fd(<span class="number">183</span>)</span><br><span class="line">    lt(<span class="number">45</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    <span class="comment"># print(pos())</span></span><br><span class="line">    fd(<span class="number">121</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">215</span>)</span><br><span class="line">    circle(<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    my_goto(<span class="number">63.56</span>, <span class="number">218.24</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    eyes()</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    penup()</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    eyes()</span><br><span class="line">    penup()</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">head</span>():</span></span><br><span class="line">    penup()</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">40</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    fillcolor(<span class="string">&#x27;#00a0de&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">280</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画哆啦A梦</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Doraemon</span>():</span></span><br><span class="line">    <span class="comment"># 头部</span></span><br><span class="line">    head()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 围脖</span></span><br><span class="line">    scarf()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 脸</span></span><br><span class="line">    face()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 红鼻子</span></span><br><span class="line">    nose()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 嘴巴</span></span><br><span class="line">    mouth()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 胡须</span></span><br><span class="line">    beard()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 身体</span></span><br><span class="line">    my_goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    penup()</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">50</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">30</span>)</span><br><span class="line">    fd(<span class="number">40</span>)</span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    circle(-<span class="number">30</span>, <span class="number">270</span>)</span><br><span class="line"></span><br><span class="line">    fillcolor(<span class="string">&#x27;#00a0de&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line"></span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    fd(<span class="number">80</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">    seth(-<span class="number">89</span>)</span><br><span class="line">    circle(-<span class="number">1000</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(pos())</span></span><br><span class="line"></span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">30</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(pos())</span></span><br><span class="line">    seth(<span class="number">100</span>)</span><br><span class="line">    circle(-<span class="number">1000</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">    seth(-<span class="number">86</span>)</span><br><span class="line">    circle(<span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    fd(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(pos())</span></span><br><span class="line"></span><br><span class="line">    circle(-<span class="number">30</span>, <span class="number">230</span>)</span><br><span class="line">    seth(<span class="number">45</span>)</span><br><span class="line">    fd(<span class="number">81</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">203</span>)</span><br><span class="line">    circle(<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    circle(<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">7</span>)</span><br><span class="line">    seth(<span class="number">40</span>)</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">    seth(<span class="number">30</span>)</span><br><span class="line">    fd(<span class="number">40</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左手</span></span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(-<span class="number">30</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 脚</span></span><br><span class="line">    my_goto(<span class="number">103.74</span>, -<span class="number">182.59</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    circle(-<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">90</span>)</span><br><span class="line">    circle(-<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    my_goto(-<span class="number">96.26</span>, -<span class="number">182.59</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    circle(<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右手</span></span><br><span class="line">    my_goto(-<span class="number">133.97</span>, -<span class="number">91.81</span>)</span><br><span class="line">    seth(<span class="number">50</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">30</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 口袋</span></span><br><span class="line">    my_goto(-<span class="number">103.42</span>, <span class="number">15.09</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">38</span>)</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">90</span>, <span class="number">260</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    my_goto(<span class="number">5</span>, -<span class="number">40</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line">    seth(-<span class="number">90</span>)</span><br><span class="line">    circle(-<span class="number">70</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 铃铛</span></span><br><span class="line">    my_goto(-<span class="number">103.42</span>, <span class="number">15.09</span>)</span><br><span class="line">    fd(<span class="number">90</span>)</span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffd200&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(pos())</span></span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(-<span class="number">20</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    seth(<span class="number">170</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffd200&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(-<span class="number">2</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">100</span>, <span class="number">22</span>)</span><br><span class="line">    circle(-<span class="number">2</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">180</span> - <span class="number">10</span>)</span><br><span class="line">    circle(<span class="number">100</span>, <span class="number">22</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    goto(-<span class="number">13.42</span>, <span class="number">15.09</span>)</span><br><span class="line">    seth(<span class="number">250</span>)</span><br><span class="line">    circle(<span class="number">20</span>, <span class="number">110</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    dot(<span class="number">10</span>)</span><br><span class="line">    my_goto(<span class="number">0</span>, -<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画眼睛</span></span><br><span class="line">    black_eyes()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    screensize(<span class="number">800</span>, <span class="number">600</span>, <span class="string">&quot;#f0f0f0&quot;</span>)</span><br><span class="line">    pensize(<span class="number">3</span>)  <span class="comment"># 画笔宽度</span></span><br><span class="line">    speed(<span class="number">3</span>)  <span class="comment"># 画笔速度</span></span><br><span class="line">    Doraemon()</span><br><span class="line">    my_goto(<span class="number">100</span>, -<span class="number">300</span>)</span><br><span class="line">    mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://img.imgdb.cn/item/6012bddc3ffa7d37b3eb0db5.png" alt="哆啦A梦"></p><h1 id="皮卡丘"><a href="#皮卡丘" class="headerlink" title="皮卡丘"></a>皮卡丘</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 皮卡丘</span></span><br><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line">t.screensize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">t.pensize(<span class="number">2</span>)  <span class="comment"># 设置画笔的大小</span></span><br><span class="line">t.speed(<span class="number">10</span>)  <span class="comment"># 设置画笔速度为10</span></span><br><span class="line"><span class="comment"># 画左偏曲线函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radian_left</span>(<span class="params">ang, dis, step, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        dis += step  <span class="comment"># dis增大step</span></span><br><span class="line">        t.lt(ang)  <span class="comment"># 向左转ang度</span></span><br><span class="line">        t.fd(dis)  <span class="comment"># 向前走dis的步长</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radian_right</span>(<span class="params">ang, dis, step, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        dis += step</span><br><span class="line">        t.rt(ang)  <span class="comment"># 向左转ang度</span></span><br><span class="line">        t.fd(dis)  <span class="comment"># 向前走dis的步长</span></span><br><span class="line"><span class="comment"># 画耳朵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitEars</span>():</span></span><br><span class="line">    t.color(<span class="string">&quot;black&quot;</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    <span class="comment"># 左耳朵曲线</span></span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">50</span>, <span class="number">100</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">110</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    radian_left(<span class="number">1.2</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">40</span>)</span><br><span class="line">    t.setheading(<span class="number">270</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">1.2</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">40</span>)</span><br><span class="line">    t.setheading(<span class="number">44</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">32</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    <span class="comment"># 右耳朵曲线</span></span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">50</span>, <span class="number">100</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">70</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    radian_right(<span class="number">1.2</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">40</span>)</span><br><span class="line">    t.setheading(<span class="number">270</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">1.2</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">40</span>)</span><br><span class="line">    t.setheading(<span class="number">136</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">32</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    <span class="comment"># 耳朵黑</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">88</span>, <span class="number">141</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">35</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">1.2</span>, <span class="number">1.6</span>, <span class="number">0.1</span>, <span class="number">16</span>)</span><br><span class="line">    t.setheading(<span class="number">270</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">1.2</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">25</span>)</span><br><span class="line">    t.setheading(<span class="number">132</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">31</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">88</span>, <span class="number">141</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">145</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">1.2</span>, <span class="number">1.6</span>, <span class="number">0.1</span>, <span class="number">16</span>)</span><br><span class="line">    t.setheading(<span class="number">270</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">1.2</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">25</span>)</span><br><span class="line">    t.setheading(<span class="number">48</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">31</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line"><span class="comment"># 画尾巴</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitTail</span>():</span></span><br><span class="line">    <span class="comment"># 尾巴</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">64</span>, -<span class="number">140</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">10</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">20</span>)</span><br><span class="line">    t.setheading(<span class="number">90</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">20</span>)</span><br><span class="line">    t.setheading(<span class="number">10</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">10</span>)</span><br><span class="line">    t.setheading(<span class="number">80</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">100</span>)</span><br><span class="line">    t.setheading(<span class="number">35</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">80</span>)</span><br><span class="line">    t.setheading(<span class="number">260</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">100</span>)</span><br><span class="line">    t.setheading(<span class="number">205</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">40</span>)</span><br><span class="line">    t.setheading(<span class="number">260</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">37</span>)</span><br><span class="line">    t.setheading(<span class="number">205</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">20</span>)</span><br><span class="line">    t.setheading(<span class="number">260</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">25</span>)</span><br><span class="line">    t.setheading(<span class="number">175</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">30</span>)</span><br><span class="line">    t.setheading(<span class="number">100</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">13</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line"><span class="comment"># 画脚</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitFoots</span>():</span></span><br><span class="line">    <span class="comment"># 脚</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">70</span>, -<span class="number">200</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">225</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">0.5</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">    radian_left(<span class="number">35</span>, <span class="number">0.6</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    radian_left(<span class="number">1</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">18</span>)</span><br><span class="line">    t.setheading(<span class="number">160</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">13</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">70</span>, -<span class="number">200</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">315</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">0.5</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">    radian_right(<span class="number">35</span>, <span class="number">0.6</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    radian_right(<span class="number">1</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">18</span>)</span><br><span class="line">    t.setheading(<span class="number">20</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">13</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line"><span class="comment"># 画身体</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitBody</span>():</span></span><br><span class="line">    <span class="comment"># 外形轮廓</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">112</span>, <span class="number">0</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">90</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.circle(<span class="number">112</span>, <span class="number">180</span>)</span><br><span class="line">    t.setheading(<span class="number">250</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">1.6</span>, <span class="number">1.3</span>, <span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line">    radian_left(<span class="number">0.8</span>, <span class="number">1.5</span>, <span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">    t.setheading(<span class="number">255</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">0.4</span>, <span class="number">1.6</span>, <span class="number">0.2</span>, <span class="number">27</span>)</span><br><span class="line">    radian_left(<span class="number">2.8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">45</span>)</span><br><span class="line">    radian_right(<span class="number">0.9</span>, <span class="number">1.4</span>, <span class="number">0</span>, <span class="number">31</span>)</span><br><span class="line">    t.setheading(<span class="number">355</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">0.9</span>, <span class="number">1.4</span>, <span class="number">0</span>, <span class="number">31</span>)</span><br><span class="line">    radian_left(<span class="number">2.8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">45</span>)</span><br><span class="line">    radian_left(<span class="number">0.4</span>, <span class="number">7.2</span>, -<span class="number">0.2</span>, <span class="number">27</span>)</span><br><span class="line">    t.setheading(<span class="number">10</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">0.8</span>, <span class="number">1.5</span>, <span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">    radian_left(<span class="number">1.6</span>, <span class="number">1.3</span>, <span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitEyes</span>():</span></span><br><span class="line">    <span class="comment"># 左眼睛</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">46</span>, <span class="number">10</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">90</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    <span class="comment"># 右眼睛</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">46</span>, <span class="number">10</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(-<span class="number">90</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line"><span class="comment"># 画脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitFace</span>():</span></span><br><span class="line">    <span class="comment"># 脸蛋</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">63</span>, -<span class="number">10</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">90</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">63</span>, -<span class="number">10</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(-<span class="number">90</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    <span class="comment"># 嘴巴</span></span><br><span class="line">    t.pensize(<span class="number">2.2</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">235</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">5</span>, <span class="number">0.8</span>, <span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">305</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">5</span>, <span class="number">0.8</span>, <span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment"># 画手</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitHands</span>():</span></span><br><span class="line">    <span class="comment"># 左手</span></span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">46</span>, -<span class="number">100</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">285</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_right(<span class="number">0.4</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">26</span>)</span><br><span class="line">    radian_right(<span class="number">5</span>, <span class="number">0.35</span>, <span class="number">0</span>, <span class="number">26</span>)</span><br><span class="line">    radian_right(<span class="number">0.3</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="comment"># 右手</span></span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">46</span>, -<span class="number">100</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">255</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    radian_left(<span class="number">0.4</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">26</span>)</span><br><span class="line">    radian_left(<span class="number">5</span>, <span class="number">0.35</span>, <span class="number">0</span>, <span class="number">26</span>)</span><br><span class="line">    radian_left(<span class="number">0.3</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CloseEyes</span>():</span></span><br><span class="line">    <span class="comment"># 左眼睛</span></span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(-<span class="number">46</span>, <span class="number">12</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">180</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 右眼睛</span></span><br><span class="line">    t.pu()  <span class="comment"># 提笔</span></span><br><span class="line">    t.goto(<span class="number">46</span>, <span class="number">12</span>)  <span class="comment"># 笔头初始位置</span></span><br><span class="line">    t.pd()  <span class="comment"># 下笔</span></span><br><span class="line">    t.setheading(<span class="number">0</span>)  <span class="comment"># 画笔角度</span></span><br><span class="line">    t.forward(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Init</span>():</span></span><br><span class="line">    InitEars()</span><br><span class="line">    InitTail()</span><br><span class="line">    InitFoots()</span><br><span class="line">    InitBody()</span><br><span class="line">    InitFace()</span><br><span class="line">    InitHands()</span><br><span class="line">    InitEyes()</span><br><span class="line"><span class="comment"># 眨眼睛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Upgarde</span>():</span></span><br><span class="line">    InitEars()</span><br><span class="line">    InitTail()</span><br><span class="line">    InitFoots()</span><br><span class="line">    InitBody()</span><br><span class="line">    InitFace()</span><br><span class="line">    InitHands()</span><br><span class="line">    CloseEyes()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Upgarde_Init</span>():</span></span><br><span class="line">    InitEars()</span><br><span class="line">    InitTail()</span><br><span class="line">    InitFoots()</span><br><span class="line">    InitBody()</span><br><span class="line">    InitFace()</span><br><span class="line">    InitHands()</span><br><span class="line">    InitEyes()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    Init()</span><br><span class="line">    t.tracer(<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 眨眼睛动画</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            t.reset()</span><br><span class="line">            t.hideturtle()</span><br><span class="line">            Upgarde()</span><br><span class="line">            t.update()</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t.reset()</span><br><span class="line">            t.hideturtle()</span><br><span class="line">            Upgarde_Init()</span><br><span class="line">            t.update()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">main()</span><br><span class="line"><span class="comment"># 结束画笔</span></span><br></pre></td></tr></table></figure><p><img src="https://img.imgdb.cn/item/6012bddc3ffa7d37b3eb0db8.png" alt="皮卡丘"></p><h1 id="捂脸表情"><a href="#捂脸表情" class="headerlink" title="捂脸表情"></a>捂脸表情</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画指定的任意圆弧</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arc</span>(<span class="params">sa, ea, x, y, r</span>):</span>  <span class="comment"># start angle,end angle,circle center,radius</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.left(sa)</span><br><span class="line">    turtle.fd(r)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    turtle.circle(r, (ea - sa))</span><br><span class="line">    <span class="keyword">return</span> turtle.position()</span><br><span class="line">turtle.hideturtle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画脸</span></span><br><span class="line">turtle.speed(<span class="number">5</span>)</span><br><span class="line">turtle.setup(<span class="number">900</span>, <span class="number">600</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">turtle.pensize(<span class="number">5</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(<span class="number">100</span>)</span><br><span class="line">turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;#B26A0F&quot;</span>)  <span class="comment"># head side color</span></span><br><span class="line">turtle.circle(<span class="number">150</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;#F9E549&quot;</span>)  <span class="comment"># face color</span></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画嘴</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">77</span>, <span class="number">20</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;#744702&quot;</span>)</span><br><span class="line">turtle.goto(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line">turtle.right(<span class="number">30</span>)</span><br><span class="line">turtle.fd(<span class="number">110</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;#925902&quot;</span>)  <span class="comment"># mouth color</span></span><br><span class="line">turtle.circle(-<span class="number">97</span>, <span class="number">160</span>)</span><br><span class="line">turtle.goto(<span class="number">92</span>, -<span class="number">3</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">77</span>, -<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画牙齿</span></span><br><span class="line">turtle.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.goto(<span class="number">77</span>, -<span class="number">24</span>)</span><br><span class="line">turtle.goto(-<span class="number">81</span>, <span class="number">29</span>)</span><br><span class="line">turtle.goto(-<span class="number">70</span>, <span class="number">43</span>)</span><br><span class="line">turtle.goto(<span class="number">77</span>, -<span class="number">8</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">0</span>, -<span class="number">100</span>)</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画左边眼泪</span></span><br><span class="line">turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(<span class="number">150</span>)</span><br><span class="line">turtle.right(<span class="number">60</span>)</span><br><span class="line">turtle.fd(-<span class="number">150</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.left(<span class="number">20</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;#155F84&quot;</span>)  <span class="comment"># tear side color</span></span><br><span class="line">turtle.fd(<span class="number">150</span>)</span><br><span class="line">turtle.right(<span class="number">180</span>)</span><br><span class="line">position1 = turtle.position()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;#7EB0C8&quot;</span>)  <span class="comment"># tear color</span></span><br><span class="line">turtle.fd(<span class="number">150</span>)</span><br><span class="line">turtle.right(<span class="number">20</span>)</span><br><span class="line">turtle.left(<span class="number">270</span>)</span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">18</span>)</span><br><span class="line">turtle.right(<span class="number">52</span>)</span><br><span class="line">turtle.fd(<span class="number">110</span>)</span><br><span class="line">position2 = turtle.position()</span><br><span class="line">turtle.goto(-<span class="number">33</span>, <span class="number">90</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画右边眼泪</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.fd(<span class="number">50</span>)</span><br><span class="line">turtle.right(<span class="number">150</span>)</span><br><span class="line">turtle.fd(<span class="number">150</span>)</span><br><span class="line">turtle.left(<span class="number">150</span>)</span><br><span class="line">turtle.fd(<span class="number">100</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fd(-<span class="number">100</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;#7EB0C8&quot;</span>)  <span class="comment"># tear color</span></span><br><span class="line">turtle.right(<span class="number">60</span>)</span><br><span class="line">turtle.circle(<span class="number">150</span>, <span class="number">15</span>)</span><br><span class="line">turtle.left(<span class="number">45</span>)</span><br><span class="line">turtle.fd(<span class="number">66</span>)</span><br><span class="line">turtle.goto(<span class="number">77</span>, <span class="number">20</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画眼睛</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;#6C4E00&quot;</span>)  <span class="comment"># eye color</span></span><br><span class="line">turtle.goto(-<span class="number">65</span>, <span class="number">75</span>)</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.left(<span class="number">27</span>)</span><br><span class="line">turtle.fd(<span class="number">38</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;#6C4E00&quot;</span>)  <span class="comment"># eye color</span></span><br><span class="line">turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.circle(<span class="number">38</span>, <span class="number">86</span>)</span><br><span class="line">turtle.goto(position2[<span class="number">0</span>], position2[<span class="number">1</span>])</span><br><span class="line">turtle.goto(position1[<span class="number">0</span>], position1[<span class="number">1</span>])</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画手</span></span><br><span class="line">turtle.pencolor(<span class="string">&quot;#D57E18&quot;</span>)  <span class="comment"># hand side color</span></span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;#EFBD3D&quot;</span>)  <span class="comment"># hand color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个手指</span></span><br><span class="line">arc(-<span class="number">110</span>, <span class="number">10</span>, <span class="number">110</span>, -<span class="number">40</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(<span class="number">300</span>, <span class="number">35</span>)</span><br><span class="line">turtle.circle(<span class="number">13</span>, <span class="number">120</span>)</span><br><span class="line">turtle.setheading(-<span class="number">50</span>)</span><br><span class="line">turtle.fd(<span class="number">20</span>)</span><br><span class="line">turtle.setheading(<span class="number">130</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个手指</span></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">15</span>)</span><br><span class="line">turtle.circle(<span class="number">12</span>, <span class="number">180</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line">turtle.setheading(<span class="number">137</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个手指</span></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">16</span>)</span><br><span class="line">turtle.circle(<span class="number">12</span>, <span class="number">160</span>)</span><br><span class="line">turtle.setheading(-<span class="number">35</span>)</span><br><span class="line">turtle.fd(<span class="number">45</span>)</span><br><span class="line">turtle.setheading(<span class="number">140</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四个手指</span></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">13</span>)</span><br><span class="line">turtle.circle(<span class="number">11</span>, <span class="number">160</span>)</span><br><span class="line">turtle.setheading(-<span class="number">35</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line">turtle.setheading(<span class="number">145</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五个手指</span></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">9</span>)</span><br><span class="line">turtle.circle(<span class="number">10</span>, <span class="number">180</span>)</span><br><span class="line">turtle.setheading(-<span class="number">31</span>)</span><br><span class="line">turtle.fd(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画最后手腕的部分</span></span><br><span class="line">turtle.setheading(-<span class="number">45</span>)</span><br><span class="line">turtle.pensize(<span class="number">7</span>)</span><br><span class="line">turtle.right(<span class="number">5</span>)</span><br><span class="line">turtle.circle(<span class="number">180</span>, <span class="number">35</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.setheading(-<span class="number">77</span>)</span><br><span class="line">turtle.pensize(<span class="number">5</span>)</span><br><span class="line">turtle.fd(<span class="number">50</span>)</span><br><span class="line">turtle.left(-<span class="number">270</span>)</span><br><span class="line">turtle.fd(<span class="number">7</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;#EFBD3D&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">30</span>, <span class="number">180</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># res=arc(70,220,90,50,300)</span></span><br><span class="line"><span class="comment"># print(res[0],res[1])</span></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p><img src="https://img.imgdb.cn/item/6012bddc3ffa7d37b3eb0dc1.png" alt="捂脸表情"></p><h1 id="小猪佩奇"><a href="#小猪佩奇" class="headerlink" title="小猪佩奇"></a>小猪佩奇</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nose</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 鼻子</span></span><br><span class="line">    penup()  <span class="comment"># 提起笔</span></span><br><span class="line">    goto(x, y)  <span class="comment"># 定位</span></span><br><span class="line">    pendown()  <span class="comment"># 落笔，开始画</span></span><br><span class="line">    setheading(-<span class="number">30</span>)  <span class="comment"># 将乌龟的方向设置为to_angle/为数字（0-东、90-北、180-西、270-南）</span></span><br><span class="line">    begin_fill()  <span class="comment"># 准备开始填充图形</span></span><br><span class="line">    a = <span class="number">0.4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; <span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span> &lt;= i &lt; <span class="number">90</span>:</span><br><span class="line">            a = a + <span class="number">0.08</span></span><br><span class="line">            left(<span class="number">3</span>)  <span class="comment"># 向左转3度</span></span><br><span class="line">            forward(a)  <span class="comment"># 向前走a的步长</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = a - <span class="number">0.08</span></span><br><span class="line">            left(<span class="number">3</span>)</span><br><span class="line">            forward(a)</span><br><span class="line">    end_fill()  <span class="comment"># 填充完成</span></span><br><span class="line"></span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">25</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">10</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    pencolor(<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    setheading(<span class="number">10</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">5</span>)</span><br><span class="line">    color(<span class="number">160</span>, <span class="number">82</span>, <span class="number">45</span>)  <span class="comment"># 返回或设置pencolor和fillcolor</span></span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">20</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    pencolor(<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>)</span><br><span class="line">    setheading(<span class="number">10</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">5</span>)</span><br><span class="line">    color(<span class="number">160</span>, <span class="number">82</span>, <span class="number">45</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">head</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 头</span></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>), <span class="string">&quot;pink&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    setheading(<span class="number">180</span>)</span><br><span class="line">    circle(<span class="number">300</span>, -<span class="number">30</span>)</span><br><span class="line">    circle(<span class="number">100</span>, -<span class="number">60</span>)</span><br><span class="line">    circle(<span class="number">80</span>, -<span class="number">100</span>)</span><br><span class="line">    circle(<span class="number">150</span>, -<span class="number">20</span>)</span><br><span class="line">    circle(<span class="number">60</span>, -<span class="number">95</span>)</span><br><span class="line">    setheading(<span class="number">161</span>)</span><br><span class="line">    circle(-<span class="number">300</span>, <span class="number">15</span>)</span><br><span class="line">    penup()</span><br><span class="line">    goto(-<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">30</span>)</span><br><span class="line">    a = <span class="number">0.4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; <span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span> &lt;= i &lt; <span class="number">90</span>:</span><br><span class="line">            a = a + <span class="number">0.08</span></span><br><span class="line">            lt(<span class="number">3</span>)  <span class="comment"># 向左转3度</span></span><br><span class="line">            fd(a)  <span class="comment"># 向前走a的步长</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = a - <span class="number">0.08</span></span><br><span class="line">            lt(<span class="number">3</span>)</span><br><span class="line">            fd(a)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ears</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 耳朵</span></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>), <span class="string">&quot;pink&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    setheading(<span class="number">100</span>)</span><br><span class="line">    circle(-<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    circle(-<span class="number">10</span>, <span class="number">120</span>)</span><br><span class="line">    circle(-<span class="number">50</span>, <span class="number">54</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(-<span class="number">12</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">30</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    setheading(<span class="number">100</span>)</span><br><span class="line">    circle(-<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    circle(-<span class="number">10</span>, <span class="number">120</span>)</span><br><span class="line">    circle(-<span class="number">50</span>, <span class="number">56</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eyes</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 眼睛</span></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(-<span class="number">20</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(-<span class="number">95</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">15</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">12</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(-<span class="number">3</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">3</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    forward(-<span class="number">25</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">40</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">15</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line">    color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">12</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(-<span class="number">3</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">3</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheek</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 腮</span></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>))</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">30</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouth</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 嘴</span></span><br><span class="line">    color(<span class="number">239</span>, <span class="number">69</span>, <span class="number">19</span>)</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">80</span>)</span><br><span class="line">    circle(<span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line">    circle(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">body</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 身体</span></span><br><span class="line">    color(<span class="string">&quot;red&quot;</span>, (<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>))</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    setheading(-<span class="number">130</span>)</span><br><span class="line">    circle(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">    circle(<span class="number">300</span>, <span class="number">30</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">230</span>)</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">300</span>, <span class="number">30</span>)</span><br><span class="line">    circle(<span class="number">100</span>, <span class="number">3</span>)</span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>), (<span class="number">255</span>, <span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">    setheading(-<span class="number">135</span>)</span><br><span class="line">    circle(-<span class="number">80</span>, <span class="number">63</span>)</span><br><span class="line">    circle(-<span class="number">150</span>, <span class="number">24</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hands</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 手</span></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>))</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">160</span>)</span><br><span class="line">    circle(<span class="number">300</span>, <span class="number">15</span>)</span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">15</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">0</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">30</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">237</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">20</span>)</span><br><span class="line">    circle(-<span class="number">300</span>, <span class="number">15</span>)</span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">20</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">0</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">170</span>)</span><br><span class="line">    circle(<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foot</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 脚</span></span><br><span class="line">    pensize(<span class="number">10</span>)</span><br><span class="line">    color((<span class="number">240</span>, <span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">40</span>)</span><br><span class="line">    setheading(-<span class="number">180</span>)</span><br><span class="line">    color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    pensize(<span class="number">15</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    pensize(<span class="number">10</span>)</span><br><span class="line">    color((<span class="number">240</span>, <span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">    penup()</span><br><span class="line">    setheading(<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">40</span>)</span><br><span class="line">    setheading(<span class="number">0</span>)</span><br><span class="line">    forward(<span class="number">90</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    setheading(-<span class="number">90</span>)</span><br><span class="line">    forward(<span class="number">40</span>)</span><br><span class="line">    setheading(-<span class="number">180</span>)</span><br><span class="line">    color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    pensize(<span class="number">15</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 尾巴</span></span><br><span class="line">    pensize(<span class="number">4</span>)</span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>))</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    circle(<span class="number">70</span>, <span class="number">20</span>)</span><br><span class="line">    circle(<span class="number">10</span>, <span class="number">330</span>)</span><br><span class="line">    circle(<span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setting</span>():</span>  <span class="comment"># 参数设置</span></span><br><span class="line">    pensize(<span class="number">4</span>)</span><br><span class="line">    hideturtle()  <span class="comment"># 使乌龟无形（隐藏）</span></span><br><span class="line">    colormode(<span class="number">255</span>)  <span class="comment"># 将其设置为1.0或255.随后 颜色三元组的r，g，b值必须在0 .. cmode范围内</span></span><br><span class="line">    color((<span class="number">255</span>, <span class="number">155</span>, <span class="number">192</span>), <span class="string">&quot;pink&quot;</span>)</span><br><span class="line">    setup(<span class="number">840</span>, <span class="number">500</span>)</span><br><span class="line">    speed(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    setting()  <span class="comment"># 画布、画笔设置</span></span><br><span class="line">    nose(-<span class="number">100</span>, <span class="number">100</span>)  <span class="comment"># 鼻子</span></span><br><span class="line">    head(-<span class="number">69</span>, <span class="number">167</span>)  <span class="comment"># 头</span></span><br><span class="line">    ears(<span class="number">0</span>, <span class="number">160</span>)  <span class="comment"># 耳朵</span></span><br><span class="line">    eyes(<span class="number">0</span>, <span class="number">140</span>)  <span class="comment"># 眼睛</span></span><br><span class="line">    cheek(<span class="number">80</span>, <span class="number">10</span>)  <span class="comment"># 腮</span></span><br><span class="line">    mouth(-<span class="number">20</span>, <span class="number">30</span>)  <span class="comment"># 嘴</span></span><br><span class="line">    body(-<span class="number">32</span>, -<span class="number">8</span>)  <span class="comment"># 身体</span></span><br><span class="line">    hands(-<span class="number">56</span>, -<span class="number">45</span>)  <span class="comment"># 手</span></span><br><span class="line">    foot(<span class="number">2</span>, -<span class="number">177</span>)  <span class="comment"># 脚</span></span><br><span class="line">    tail(<span class="number">148</span>, -<span class="number">155</span>)  <span class="comment"># 尾巴</span></span><br><span class="line">    done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://img.imgdb.cn/item/6012bddc3ffa7d37b3eb0dca.png" alt="小猪佩奇"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/6012b60e3ffa7d37b3e66e13.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Turtle模块的函数&quot;&gt;&lt;a href=&quot;#Turtle模块的函数&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/categories/Python/"/>
    
    <category term="成品" scheme="https://amnesia-f.github.io/categories/Python/%E6%88%90%E5%93%81/"/>
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/tags/Python/"/>
    
    <category term="成品" scheme="https://amnesia-f.github.io/tags/%E6%88%90%E5%93%81/"/>
    
    <category term="turtle模块" scheme="https://amnesia-f.github.io/tags/turtle%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记：函数</title>
    <link href="https://amnesia-f.github.io/posts/ad79.html"/>
    <id>https://amnesia-f.github.io/posts/ad79.html</id>
    <published>2021-01-28T02:44:36.000Z</published>
    <updated>2021-01-28T03:43:18.452Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/6010e64f3ffa7d37b3f3a563.jpg" alt="封面"></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="内置函数："><a href="#内置函数：" class="headerlink" title="内置函数："></a>内置函数：</h3><ul><li>print：用于打印输出</li><li>input：接受一个标准输入数据，返回 string 类型</li><li>range：返回的是一个可迭代对象</li><li>sum：对系列进行求和计算</li><li>max：返回可迭代对象中的元素中的最大值或者所有参数的最大值</li><li>min：返回可迭代对象中的元素中的最小值或者所有参数的最小值</li><li>len：返回对象（字符、列表、元组等）长度或项目个数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists = [<span class="number">8.8</span>, <span class="number">9.6</span>, <span class="number">7.6</span>, <span class="number">10</span>, <span class="number">8.2</span>, <span class="number">9.3</span>, <span class="number">8.5</span>, <span class="number">6.3</span>, <span class="number">7.9</span>, <span class="number">5.6</span>]</span><br><span class="line">lists.remove(<span class="built_in">max</span>(lists))</span><br><span class="line">lists.remove(<span class="built_in">min</span>(lists))</span><br><span class="line">a = <span class="built_in">sum</span>(lists) / <span class="built_in">len</span>(lists)</span><br><span class="line">print(<span class="string">&quot;去掉一个最高分和一个最低分，本选手的最后得分是:&quot;</span>, <span class="built_in">round</span>(a, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="自定义无参数的函数"><a href="#自定义无参数的函数" class="headerlink" title="自定义无参数的函数"></a>自定义无参数的函数</h3><p>定义：自己创建的，能够实现特定功能的函数</p><p>分类：</p><ul><li>无参数的自定义函数：def(函数名):</li><li>有参数的自定义函数</li></ul><p>注意事项：</p><ul><li>自定义函数以def开头</li><li>def和函数名之间要有一个空格</li><li>函数名起名规则和变量的命名一样</li><li>函数名后跟圆括号()</li><li>圆括号后一定要加冒号</li><li>代码块由语句组成，要有缩进</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义一个无参数的函数，函数名为a</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span>():</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span> - i):</span><br><span class="line">            print(<span class="string">&quot; &quot;</span>, end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">&quot;☆&quot;</span>, end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        print()                      </span><br><span class="line"><span class="comment"># 调用3次自定义的无参数函数，在屏幕上输出3个等腰三角形</span></span><br><span class="line">a()</span><br><span class="line">a()</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><h3 id="自定义有参数的函数"><a href="#自定义有参数的函数" class="headerlink" title="自定义有参数的函数"></a>自定义有参数的函数</h3><p>格式：def 函数名 (参数1,参数2……)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义一个有参数的函数，函数名为a，形式参数为n</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">n</span>):</span>    </span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span> - i):</span><br><span class="line">                print(<span class="string">&quot; &quot;</span>, end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">                print(<span class="string">&quot;☆&quot;</span>, end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">            print()</span><br><span class="line"><span class="comment"># 调用自定义的有参数函数，用于输出3个等腰三角形            </span></span><br><span class="line">a(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义有返回值的函数"><a href="#自定义有返回值的函数" class="headerlink" title="自定义有返回值的函数"></a>自定义有返回值的函数</h3><p>定义：自己创建的，能够实现特定功能且返回一个值的函数</p><p>格式：def 函数名 ():</p><p>​                 代码块</p><p>​                 return表达式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义含有3个形式参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date</span>(<span class="params">year, month, day</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">or</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year %<span class="number">100</span> != <span class="number">0</span>):</span><br><span class="line">        print(<span class="string">&quot;%d年是闰年，2月份有29天！&quot;</span>%year)</span><br><span class="line">        list1 = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">            count += list1[i]</span><br><span class="line">        <span class="keyword">return</span> count + day</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;%d年是平年，2月份有28天！&quot;</span>%year)</span><br><span class="line">        list2 = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">            count += list2[i]</span><br><span class="line">        <span class="keyword">return</span> count + day</span><br><span class="line">print(<span class="string">&quot;给定日期是当年的第%d天！&quot;</span>%date(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h3 id="使用time模块获取时间"><a href="#使用time模块获取时间" class="headerlink" title="使用time模块获取时间"></a>使用time模块获取时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入time模块</span></span><br><span class="line"><span class="keyword">import</span> time        </span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&quot;请输入您的出生日期，如（20060101）：&quot;</span>)</span><br><span class="line">a = time.time()    <span class="comment"># 获取当前时间的秒数    </span></span><br><span class="line">x = time.mktime(time.strptime(b, <span class="string">&quot;%Y%m%d&quot;</span>))    <span class="comment"># 计算出生日期的秒数   </span></span><br><span class="line">c = a - x    <span class="comment"># 用当前时间减去出生日期，得到活了多少秒</span></span><br><span class="line">m = c / <span class="number">60</span></span><br><span class="line">h = m / <span class="number">60</span></span><br><span class="line">d = h / <span class="number">24</span></span><br><span class="line">y = d / <span class="number">365</span>   </span><br><span class="line">print(<span class="string">&quot;您已经活了\n&quot;</span>, <span class="built_in">int</span>(c), <span class="string">&quot;秒\n&quot;</span>, <span class="built_in">int</span>(m), <span class="string">&quot;分钟\n&quot;</span>, <span class="built_in">int</span>(h), <span class="string">&quot;小时\n&quot;</span>, <span class="built_in">int</span>(d), <span class="string">&quot;天\n&quot;</span>, <span class="built_in">round</span>(y, <span class="number">2</span>), <span class="string">&quot;年&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用random模块获取随机数"><a href="#使用random模块获取随机数" class="headerlink" title="使用random模块获取随机数"></a>使用random模块获取随机数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random    <span class="comment"># 导入random模块</span></span><br><span class="line">n = random.randint(<span class="number">0</span>, <span class="number">100</span>)    <span class="comment"># 生成0~100之间的随机整数</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ni = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入猜的数字：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> ni &gt; n:</span><br><span class="line">        print(<span class="string">&quot;大了&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> ni &lt; n:</span><br><span class="line">        print(<span class="string">&quot;小了&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;猜对了&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="使用math模块获取数学常量"><a href="#使用math模块获取数学常量" class="headerlink" title="使用math模块获取数学常量"></a>使用math模块获取数学常量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math    <span class="comment"># 导入math模块</span></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入圆的半径：&quot;</span>)) </span><br><span class="line">c = <span class="number">2</span> * math.pi * r    <span class="comment"># 计算圆的周长</span></span><br><span class="line">s = math.pi * math.<span class="built_in">pow</span>(r, <span class="number">2</span>)    <span class="comment"># 计算圆的面积</span></span><br><span class="line">print(<span class="string">&quot;圆的周长为：&quot;</span>, <span class="built_in">round</span>(c, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">&quot;圆的面积为：&quot;</span>, <span class="built_in">round</span>(s, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><hr><hr><h1 id="各内置函数的类型及功能："><a href="#各内置函数的类型及功能：" class="headerlink" title="各内置函数的类型及功能："></a>各内置函数的类型及功能：</h1><table><thead><tr><th align="center"></th><th align="center"></th><th align="center">内置函数</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#abs"><code>abs()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#delattr"><code>delattr()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#hash"><code>hash()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-memoryview"><code>memoryview()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-set"><code>set()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#all"><code>all()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-dict"><code>dict()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#help"><code>help()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#min"><code>min()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#setattr"><code>setattr()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#any"><code>any()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#dir"><code>dir()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#hex"><code>hex()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#next"><code>next()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#slice"><code>slice()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#ascii"><code>ascii()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#divmod"><code>divmod()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#id"><code>id()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#sorted"><code>sorted()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#bin"><code>bin()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#enumerate"><code>enumerate()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#input"><code>input()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#oct"><code>oct()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#staticmethod"><code>staticmethod()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#open"><code>open()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-str"><code>str()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#breakpoint"><code>breakpoint()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance"><code>isinstance()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#ord"><code>ord()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#sum"><code>sum()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytearray"><code>bytearray()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#filter"><code>filter()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#issubclass"><code>issubclass()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#pow"><code>pow()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytes"><code>bytes()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#float"><code>float()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#iter"><code>iter()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#print"><code>print()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-tuple"><code>tuple()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#callable"><code>callable()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#len"><code>len()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#property"><code>property()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#type"><code>type()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#chr"><code>chr()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-frozenset"><code>frozenset()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-list"><code>list()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#func-range"><code>range()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#vars"><code>vars()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#classmethod"><code>classmethod()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#getattr"><code>getattr()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#compile"><code>compile()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#globals"><code>globals()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#map"><code>map()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#reversed"><code>reversed()</code></a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__"><code>__import__()</code></a></td></tr></tbody></table><ul><li><p><code>abs</code>(<em>x</em>)</p><p>返回一个数的绝对值。 参数可以是整数、浮点数或任何实现了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__abs__"><code>__abs__()</code></a> 的对象。 如果参数是一个复数，则返回它的模。</p></li><li><p><code>all</code>(<em>iterable</em>)</p><p>如果 <em>iterable</em> 的所有元素均为真值（或可迭代对象为空）则返回 <code>True</code> 。 </p></li><li><p><code>any</code>(<em>iterable</em>)</p><p>如果 <em>iterable</em> 的任一元素为真值则返回 <code>True</code>。 如果可迭代对象为空，返回 <code>False</code>。</p></li><li><p><code>ascii</code>(<em>object</em>)</p><p>就像函数 <a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a>，返回一个对象可打印的字符串，但是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a> 返回的字符串中非 ASCII 编码的字符，会使用 <code>\x</code>、<code>\u</code> 和 <code>\U</code> 来转义。生成的字符串和 Python 2 的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a> 返回的结果相似。</p></li><li><p><code>bin</code>(<em>x</em>)</p><p>将一个整数转变为一个前缀为“0b”的二进制字符串。结果是一个合法的 Python 表达式。如果 <em>x</em> 不是 Python 的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 对象，那它需要定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a> 方法返回一个整数。另见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a> 获取更多信息。</p></li><li><p><em>class</em> <code>bool</code>([<em>x</em>])</p><p>返回一个布尔值，<code>True</code> 或者 <code>False</code>。 <em>x</em> 使用标准的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#truth">真值测试过程</a> 来转换。如果 <em>x</em> 是假的或者被省略，返回 <code>False</code>；其他情况返回 <code>True</code>。<a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool</code></a> 类是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 的子类（参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a>）。其他类不能继承自它。它只有 <code>False</code> 和 <code>True</code> 两个实例（参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bltin-boolean-values">布尔值</a>）。<em>在 3.7 版更改:</em> <em>x</em> 现在只能作为位置参数。</p></li><li><p><code>breakpoint</code>(<strong>args*, *</strong>kws*)</p><p>此函数会在调用时将你陷入调试器中。具体来说，它调用 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.breakpointhook"><code>sys.breakpointhook()</code></a> ，直接传递 <code>args</code> 和 <code>kws</code> 。默认情况下， <code>sys.breakpointhook()</code> 调用 <a href="https://docs.python.org/zh-cn/3/library/pdb.html#pdb.set_trace"><code>pdb.set_trace()</code></a> 且没有参数。在这种情况下，它纯粹是一个便利函数，因此您不必显式导入 <a href="https://docs.python.org/zh-cn/3/library/pdb.html#module-pdb"><code>pdb</code></a> 且键入尽可能少的代码即可进入调试器。但是， <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.breakpointhook"><code>sys.breakpointhook()</code></a> 可以设置为其他一些函数并被 <a href="https://docs.python.org/zh-cn/3/library/functions.html#breakpoint"><code>breakpoint()</code></a> 自动调用，以允许进入你想用的调试器。引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>builtins.breakpoint</code> 并附带参数 <code>breakpointhook</code>。<em>3.7 新版功能.</em></p></li></ul><ul><li><p><em>class</em> <code>bytearray</code>([<em>source</em>[, <em>encoding</em>[, <em>errors</em>]]])</p><p>返回一个新的 bytes 数组。 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a> 类是一个可变序列，包含范围为 0 &lt;= x &lt; 256 的整数。它有可变序列大部分常见的方法，见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq-mutable">可变序列类型</a> 的描述；同时有 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a> 类型的大部分方法，参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>。可选形参 <em>source</em> 可以用不同的方式来初始化数组：</p><ul><li>如果是一个 <em>string</em>，您必须提供 <em>encoding</em> 参数（<em>errors</em> 参数仍是可选的）；<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray()</code></a> 会使用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.encode"><code>str.encode()</code></a> 方法来将 string 转变成 bytes。</li><li>如果是一个 <em>integer</em>，会初始化大小为该数字的数组，并使用 null 字节填充。</li><li>如果是一个遵循 <a href="https://docs.python.org/zh-cn/3/c-api/buffer.html#bufferobjects">缓冲区接口</a> 的对象，该对象的只读缓冲区将被用来初始化字节数组。</li><li>如果是一个 <em>iterable</em> 可迭代对象，它的元素的范围必须是 <code>0 &lt;= x &lt; 256</code> 的整数，它会被用作数组的初始内容。</li></ul><p>如果没有实参，则创建大小为 0 的数组。</p><p>另见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#binaryseq">二进制序列类型 — bytes, bytearray, memoryview</a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typebytearray">bytearray 对象</a>。</p></li></ul><ul><li><p><em>class</em> <code>bytes</code>([<em>source</em>[, <em>encoding</em>[, <em>errors</em>]]])</p><p>返回一个新的“bytes”对象， 是一个不可变序列，包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数。<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a> 是 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a> 的不可变版本 - 它有其中不改变序列的方法和相同的索引、切片操作。</p><p>因此，构造函数的实参和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray()</code></a> 相同。</p><p>字节对象还可以用字面值创建，参见 <a href="https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#strings">字符串与字节串字面值</a>。</p><p>另见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#binaryseq">二进制序列类型 — bytes, bytearray, memoryview</a>，<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typebytes">bytes 对象</a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>。</p></li><li><p><code>callable</code>(<em>object</em>)</p><p>如果参数 <em>object</em> 是可调用的就返回 <a href="https://docs.python.org/zh-cn/3/library/constants.html#True"><code>True</code></a>，否则返回 <a href="https://docs.python.org/zh-cn/3/library/constants.html#False"><code>False</code></a>。 如果返回 <code>True</code>，调用仍可能失败，但如果返回 <code>False</code>，则调用 <em>object</em> 将肯定不会成功。 请注意类是可调用的（调用类将返回一个新的实例）；如果实例所属的类有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__call__"><code>__call__()</code></a> 则它就是可调用的。</p><p><em>3.2 新版功能:</em> 这个函数一开始在 Python 3.0 被移除了，但在 Python 3.2 被重新加入。</p></li><li><p><code>chr</code>(<em>i</em>)</p><p>返回 Unicode 码位为整数 <em>i</em> 的字符的字符串格式。例如，<code>chr(97)</code> 返回字符串 <code>&#39;a&#39;</code>，<code>chr(8364)</code> 返回字符串 <code>&#39;€&#39;</code>。这是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#ord"><code>ord()</code></a> 的逆函数。</p><p>实参的合法范围是 0 到 1,114,111（16 进制表示是 0x10FFFF）。如果 <em>i</em> 超过这个范围，会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ValueError"><code>ValueError</code></a> 异常。</p></li><li><p>@<code>classmethod</code></p><p>把一个方法封装成类方法。一个类方法把类自己作为第一个实参，就像一个实例方法把实例自己作为第一个实参。</p><p><code>@classmethod</code> 这样的形式称为函数的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">decorator</a> – 详情参阅 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function">函数定义</a>。</p><p>类方法的调用可以在类上进行 (例如 <code>C.f()</code>) 也可以在实例上进行 (例如 <code>C().f()</code>)。 其所属类以外的类实例会被忽略。 如果类方法在其所属类的派生类上调用，则该派生类对象会被作为隐含的第一个参数被传入。</p><p>类方法与 C++ 或 Java 中的静态方法不同。 如果你需要后者，请参阅本节中的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#staticmethod"><code>staticmethod()</code></a>。 有关类方法的更多信息，请参阅 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#types">标准类型层级结构</a>。</p><p><em>在 3.9 版更改:</em> 类方法现在可以包装其他 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-descriptor">描述器</a> 例如 <a href="https://docs.python.org/zh-cn/3/library/functions.html#property"><code>property()</code></a>。</p></li><li><p><code>compile</code>(<em>source</em>, <em>filename</em>, <em>mode</em>, <em>flags=0</em>, <em>dont_inherit=False</em>, <em>optimize=-1</em>)</p><p>将 <em>source</em> 编译成代码或 AST 对象。代码对象可以被 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a> 执行。<em>source</em> 可以是常规的字符串、字节字符串，或者 AST 对象。参见 <a href="https://docs.python.org/zh-cn/3/library/ast.html#module-ast"><code>ast</code></a> 模块的文档了解如何使用 AST 对象</p><p>。<em>filename</em> 实参需要是代码读取的文件名；如果代码不需要从文件中读取，可以传入一些可辨识的值（经常会使用 <code>&#39;&lt;string&gt;&#39;</code>）。</p><p><em>mode</em> 实参指定了编译代码必须用的模式。如果 <em>source</em> 是语句序列，可以是 <code>&#39;exec&#39;</code>；如果是单一表达式，可以是 <code>&#39;eval&#39;</code>；如果是单个交互式语句，可以是 <code>&#39;single&#39;</code>。（在最后一种情况下，如果表达式执行结果不是 <code>None</code> 将会被打印出来。）</p><p>可选参数 <em>flags</em> 和 <em>dont_inherit</em> 控制应当激活哪个 <a href="https://docs.python.org/zh-cn/3/library/ast.html#ast-compiler-flags">编译器选项</a> 以及应当允许哪个 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#future">future 特性</a>。 如果两者都未提供 (或都为零) 则代码会应用与调用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#compile"><code>compile()</code></a> 的代码相同的旗标来编译。 如果给出了 <em>flags</em> 参数而未给出 <em>dont_inherit</em> (或者为零) 则会在无论如何都将被使用的旗标之外还会额外使用 <em>flags</em> 参数所指定的编译器选项和 future 语句。 如果 <em>dont_inherit</em> 为非零整数，则只使用 <em>flags</em> 参数 – 外围代码中的旗标 (future 特性和编译器选项) 会被忽略。</p><p>编译器选项和 future 语句是由比特位来指明的。 比特位可以通过一起按位 OR 来指明多个选项。 指明特定 future 特性所需的比特位可以在 <a href="https://docs.python.org/zh-cn/3/library/__future__.html#module-__future__"><code>__future__</code></a> 模块的 <code>_Feature</code> 实例的 <code>compiler_flag</code> 属性中找到。 <a href="https://docs.python.org/zh-cn/3/library/ast.html#ast-compiler-flags">编译器旗标</a> 可以在 <a href="https://docs.python.org/zh-cn/3/library/ast.html#module-ast"><code>ast</code></a> 模块中查找带有 <code>PyCF_</code> 前缀的名称。</p><p><em>optimize</em> 实参指定编译器的优化级别；默认值 <code>-1</code> 选择与解释器的 <a href="https://docs.python.org/zh-cn/3/using/cmdline.html#cmdoption-o"><code>-O</code></a> 选项相同的优化级别。显式级别为 <code>0</code> （没有优化；<code>__debug__</code> 为真）、<code>1</code> （断言被删除， <code>__debug__</code> 为假）或 <code>2</code> （文档字符串也被删除）。</p><p>如果编译的源码不合法，此函数会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#SyntaxError"><code>SyntaxError</code></a> 异常；如果源码包含 null 字节，则会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ValueError"><code>ValueError</code></a> 异常。</p><p>如果您想分析 Python 代码的 AST 表示，请参阅 <a href="https://docs.python.org/zh-cn/3/library/ast.html#ast.parse"><code>ast.parse()</code></a>。</p><p>引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>compile</code> 附带参数 <code>source</code>, <code>filename</code>。</p><blockquote><p>注解 在 <code>&#39;single&#39;</code> 或 <code>&#39;eval&#39;</code> 模式编译多行代码字符串时，输入必须以至少一个换行符结尾。 这使 <a href="https://docs.python.org/zh-cn/3/library/code.html#module-code"><code>code</code></a> 模块更容易检测语句的完整性。</p></blockquote><blockquote><p>警告 在将足够大或者足够复杂的字符串编译成 AST 对象时，Python 解释器有可能因为 Python AST 编译器的栈深度限制而崩溃。</p></blockquote><p><em>在 3.2 版更改:</em> 允许使用 Windows 和 Mac 的换行符。在 <code>&#39;exec&#39;</code> 模式不再需要以换行符结尾。增加了 <em>optimize</em> 形参。</p><p><em>在 3.5 版更改:</em> 之前 <em>source</em> 中包含 null 字节的话会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a> 异常。</p><p><em>3.8 新版功能:</em> <code>ast.PyCF_ALLOW_TOP_LEVEL_AWAIT</code> 现在可在旗标中传入以启用对最高层级 <code>await</code>, <code>async for</code> 和 <code>async with</code> 的支持。</p></li><li><p><em>class</em> <code>complex</code>([<em>real</em>[, <em>imag</em>]])</p><p>返回值为 <em>real</em> + *imag**1j 的复数，或将字符串或数字转换为复数。如果第一个形参是字符串，则它被解释为一个复数，并且函数调用时必须没有第二个形参。第二个形参不能是字符串。每个实参都可以是任意的数值类型（包括复数）。如果省略了 <em>imag</em>，则默认值为零，构造函数会像 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#float"><code>float</code></a> 一样进行数值转换。如果两个实参都省略，则返回 <code>0j</code>。</p><p>对于一个普通 Python 对象 <code>x</code>，<code>complex(x)</code> 会委托给 <code>x.__complex__()</code>。 如果 <code>__complex__()</code> 未定义则将回退至 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__float__"><code>__float__()</code></a>。 如果 <code>__float__()</code> 未定义则将回退至 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a>。</p><blockquote><p>注解 当从字符串转换时，字符串在 <code>+</code> 或 <code>-</code> 的周围必须不能有空格。例如 <code>complex(&#39;1+2j&#39;)</code> 是合法的，但 <code>complex(&#39;1 + 2j&#39;)</code> 会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ValueError"><code>ValueError</code></a> 异常。</p></blockquote><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a> 描述了复数类型。</p><p><em>在 3.6 版更改:</em> 您可以使用下划线将代码文字中的数字进行分组。</p><p><em>在 3.8 版更改:</em> 如果 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__complex__"><code>__complex__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__float__"><code>__float__()</code></a> 未定义则回退至 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a>。</p></li><li><p><code>delattr</code>(<em>object</em>, <em>name</em>)</p><p><a href="https://docs.python.org/zh-cn/3/library/functions.html#setattr"><code>setattr()</code></a> 相关的函数。实参是一个对象和一个字符串。该字符串必须是对象的某个属性。如果对象允许，该函数将删除指定的属性。例如 <code>delattr(x, &#39;foobar&#39;)</code> 等价于 <code>del x.foobar</code> 。</p><ul><li><p><em>class</em> <code>dict</code>(**<em>kwarg</em>)</p></li><li><p><em>class</em> <code>dict</code>(<em>mapping</em>, **<em>kwarg</em>)</p></li><li><p><em>class</em> <code>dict</code>(<em>iterable</em>, **<em>kwarg</em>)</p></li></ul><p>创建一个新的字典。<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict"><code>dict</code></a> 对象是一个字典类。参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict"><code>dict</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesmapping">映射类型 — dict</a> 了解这个类。其他容器类型，请参见内置的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list"><code>list</code></a>、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set"><code>set</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple"><code>tuple</code></a> 类，以及 <a href="https://docs.python.org/zh-cn/3/library/collections.html#module-collections"><code>collections</code></a> 模块。</p></li><li><p><code>dir</code>([<em>object</em>])</p><p>如果没有实参，则返回当前本地作用域中的名称列表。如果有实参，它会尝试返回该对象的有效属性列表。</p><p>如果对象有一个名为 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__dir__"><code>__dir__()</code></a> 的方法，那么该方法将被调用，并且必须返回一个属性列表。这允许实现自定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getattr__"><code>__getattr__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getattribute__"><code>__getattribute__()</code></a> 函数的对象能够自定义 <a href="https://docs.python.org/zh-cn/3/library/functions.html#dir"><code>dir()</code></a> 来报告它们的属性。</p><p>如果对象不提供 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__dir__"><code>__dir__()</code></a>，这个函数会尝试从对象已定义的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性和类型对象收集信息。结果列表并不总是完整的，如果对象有自定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getattr__"><code>__getattr__()</code></a>，那结果可能不准确。</p><p>默认的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#dir"><code>dir()</code></a> 机制对不同类型的对象行为不同，它会试图返回最相关而不是最全的信息：</p><ul><li>如果对象是模块对象，则列表包含模块的属性名称。</li><li>如果对象是类型或类对象，则列表包含它们的属性名称，并且递归查找所有基类的属性。</li><li>否则，列表包含对象的属性名称，它的类属性名称，并且递归查找它的类的所有基类的属性。</li></ul></li></ul><ul><li><p><code>divmod</code>(<em>a</em>, <em>b</em>)</p><p>它将两个（非复数）数字作为实参，并在执行整数除法时返回一对商和余数。对于混合操作数类型，适用双目算术运算符的规则。对于整数，结果和 <code>(a // b, a % b)</code> 一致。对于浮点数，结果是 <code>(q, a % b)</code> ，<em>q</em> 通常是 <code>math.floor(a / b)</code> 但可能会比 1 小。在任何情况下， <code>q * b + a % b</code> 和 <em>a</em> 基本相等；如果 <code>a % b</code> 非零，它的符号和 <em>b</em> 一样，并且 <code>0 &lt;= abs(a % b) &lt; abs(b)</code> 。</p></li><li><p><code>enumerate</code>(<em>iterable</em>, <em>start=0</em>)</p><p>返回一个枚举对象。<em>iterable</em> 必须是一个序列，或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterator">iterator</a>，或其他支持迭代的对象。 <a href="https://docs.python.org/zh-cn/3/library/functions.html#enumerate"><code>enumerate()</code></a> 返回的迭代器的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator.__next__"><code>__next__()</code></a> 方法返回一个元组，里面包含一个计数值（从 <em>start</em> 开始，默认为 0）和通过迭代 <em>iterable</em> 获得的值。</p></li><li><p><code>eval</code>(<em>expression</em>[, <em>globals</em>[, <em>locals</em>]])</p><p>实参是一个字符串，以及可选的 globals 和 locals。<em>globals</em> 实参必须是一个字典。<em>locals</em> 可以是任何映射对象。</p><p><em>expression</em> 参数会作为一个 Python 表达式（从技术上说是一个条件列表）被解析并求值，并使用 <em>globals</em> 和 <em>locals</em> 字典作为全局和局部命名空间。 如果 <em>globals</em> 字典存在且不包含以 <code>__builtins__</code> 为键的值，则会在解析 <em>expression</em> 之前插入以此为键的对内置模块 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins"><code>builtins</code></a> 的引用。 这意味着 <em>expression</em> 通常具有对标准 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins"><code>builtins</code></a> 模块的完全访问权限且受限的环境会被传播。 如果省略 <em>locals</em> 字典则其默认值为 <em>globals</em> 字典。 如果两个字典同时省略，则表达式执行时会使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a> 被调用的环境中的 <em>globals</em> 和 <em>locals</em>。 请注意，<em>eval()</em> 并没有对外围环境下的 (非局部) <a href="https://docs.python.org/zh-cn/3/glossary.html#term-nested-scope">嵌套作用域</a> 的访问权限。</p><p>提示： <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 函数支持动态执行语句。 <a href="https://docs.python.org/zh-cn/3/library/functions.html#globals"><code>globals()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> 函数各自返回当前的全局和本地字典，因此您可以将它们传递给 <a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 来使用。</p><p>另外可以参阅 <a href="https://docs.python.org/zh-cn/3/library/ast.html#ast.literal_eval"><code>ast.literal_eval()</code></a>，该函数可以安全执行仅包含文字的表达式字符串。</p><p>引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>exec</code> 附带参数 <code>code_object</code>。</p></li></ul><ul><li><p><code>exec</code>(<em>object</em>[, <em>globals</em>[, <em>locals</em>]])</p><p>这个函数支持动态执行 Python 代码。<em>object</em> 必须是字符串或者代码对象。如果是字符串，那么该字符串将被解析为一系列 Python 语句并执行（除非发生语法错误）。<a href="https://docs.python.org/zh-cn/3/library/functions.html#id2">1</a> 如果是代码对象，它将被直接执行。在任何情况下，被执行的代码都需要和文件输入一样是有效的（见参考手册中关于文件输入的章节）。请注意即使在传递给 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 函数的代码的上下文中，<a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#return"><code>return</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield"><code>yield</code></a> 语句也不能在函数定义之外使用。该函数返回值是 <code>None</code> 。</p><p>无论哪种情况，如果省略了可选项，代码将在当前作用域内执行。 如果只提供了 <em>globals</em>，则它必须是一个字典（不能是字典的子类），该字典将同时被用于全局和局部变量。 如果同时提供了 <em>globals</em> 和 <em>locals</em>，它们会分别被用于全局和局部变量。 如果提供了 <em>locals</em>，则它可以是任何映射对象。 请记住在模块层级上，globals 和 locals 是同一个字典。 如果 exec 得到两个单独对象作为 <em>globals</em> 和 <em>locals</em>，则代码将如同嵌入类定义的情况一样执行。</p><p>如果 <em>globals</em> 字典不包含 <code>__builtins__</code> 键值，则将为该键插入对内建 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins"><code>builtins</code></a> 模块字典的引用。因此，在将执行的代码传递给 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 之前，可以通过将自己的 <code>__builtins__</code> 字典插入到 <em>globals</em> 中来控制可以使用哪些内置代码。</p><p>引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>exec</code> 附带参数 <code>code_object</code>。</p><blockquote><p>注解 内置 <a href="https://docs.python.org/zh-cn/3/library/functions.html#globals"><code>globals()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> 函数各自返回当前的全局和本地字典，因此可以将它们传递给 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 的第二个和第三个实参。</p></blockquote><blockquote><p>注解 默认情况下，<em>locals</em> 的行为如下面 <a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> 函数描述的一样：不要试图改变默认的 <em>locals</em> 字典。如果您想在 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec"><code>exec()</code></a> 函数返回时知道代码对 <em>locals</em> 的变动，请明确地传递 <em>locals</em> 字典。</p></blockquote></li><li><p><code>filter</code>(<em>function</em>, <em>iterable</em>)</p><p>用 <em>iterable</em> 中函数 <em>function</em> 返回真的那些元素，构建一个新的迭代器。<em>iterable</em> 可以是一个序列，一个支持迭代的容器，或一个迭代器。如果 <em>function</em> 是 <code>None</code> ，则会假设它是一个身份函数，即 <em>iterable</em> 中所有返回假的元素会被移除。</p><p>请注意， <code>filter(function, iterable)</code> 相当于一个生成器表达式，当 function 不是 <code>None</code> 的时候为 <code>(item for item in iterable if function(item))</code>；function 是 <code>None</code> 的时候为 <code>(item for item in iterable if item)</code> 。</p><p>请参阅 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.filterfalse"><code>itertools.filterfalse()</code></a> 了解，只有 <em>function</em> 返回 false 时才选取 <em>iterable</em> 中元素的补充函数。</p></li><li><p><em>class</em> <code>float</code>([<em>x</em>])</p><p>返回从数字或字符串 <em>x</em> 生成的浮点数。</p><p>如果实参是字符串，则它必须是包含十进制数字的字符串，字符串前面可以有符号，之前也可以有空格。可选的符号有 <code>&#39;+&#39;</code> 和 <code>&#39;-&#39;</code> ； <code>&#39;+&#39;</code> 对创建的值没有影响。实参也可以是 NaN（非数字）、正负无穷大的字符串。</p><p>另一方面，如果实参是整数或浮点数，则返回具有相同值（在 Python 浮点精度范围内）的浮点数。如果实参在 Python 浮点精度范围外，则会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#OverflowError"><code>OverflowError</code></a>。</p><p>对于一个普通 Python 对象 <code>x</code>，<code>float(x)</code> 会委托给 <code>x.__float__()</code>。 如果 <code>__float__()</code> 未定义则将回退至 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a>。</p><p>如果没有实参，则返回 <code>0.0</code> 。</p><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a> 描述了浮点类型。</p><p><em>在 3.6 版更改:</em> 您可以使用下划线将代码文字中的数字进行分组。</p><p><em>在 3.7 版更改:</em> <em>x</em> 现在只能作为位置参数。</p><p><em>在 3.8 版更改:</em> 如果 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__float__"><code>__float__()</code></a> 未定义则回退至 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a>。</p></li></ul><ul><li><p><code>format</code>(<em>value</em>[, <em>format_spec</em>])</p><p>将 <em>value</em> 转换为 <em>format_spec</em> 控制的“格式化”表示。<em>format_spec</em> 的解释取决于 <em>value</em> 实参的类型，但是大多数内置类型使用标准格式化语法：<a href="https://docs.python.org/zh-cn/3/library/string.html#formatspec">格式规格迷你语言</a>。</p><p>默认的 <em>format_spec</em> 是一个空字符串，它通常和调用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str(value)</code></a> 的结果相同。</p><p>调用 <code>format(value, format_spec)</code> 会转换成 <code>type(value).__format__(value, format_spec)</code> ，所以实例字典中的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__format__"><code>__format__()</code></a> 方法将不会调用。如果搜索到 <a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object</code></a> 有这个方法但 <em>format_spec</em> 不为空，<em>format_spec</em> 或返回值不是字符串，会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a> 异常。</p><p><em>在 3.4 版更改:</em> 当 <em>format_spec</em> 不是空字符串时， <code>object().__format__(format_spec)</code> 会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>。</p></li></ul><ul><li><p><em>class</em> <code>frozenset</code>([<em>iterable</em>])</p><p>返回一个新的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#frozenset"><code>frozenset</code></a> 对象，它包含可选参数 <em>iterable</em> 中的元素。 <code>frozenset</code> 是一个内置的类。有关此类的文档，请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#frozenset"><code>frozenset</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#types-set">集合类型 — set, frozenset</a>。</p><p>请参阅内建的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set"><code>set</code></a>、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list"><code>list</code></a>、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple"><code>tuple</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict"><code>dict</code></a> 类，以及 <a href="https://docs.python.org/zh-cn/3/library/collections.html#module-collections"><code>collections</code></a> 模块来了解其它的容器。</p></li><li><p><code>getattr</code>(<em>object</em>, <em>name</em>[, <em>default</em>])</p><p>返回对象命名属性的值。<em>name</em> 必须是字符串。如果该字符串是对象的属性之一，则返回该属性的值。例如， <code>getattr(x, &#39;foobar&#39;)</code> 等同于 <code>x.foobar</code>。如果指定的属性不存在，且提供了 <em>default</em> 值，则返回它，否则触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a>。</p></li><li><p><code>globals</code>()</p><p>返回表示当前全局符号表的字典。这总是当前模块的字典（在函数或方法中，不是调用它的模块，而是定义它的模块）。</p></li><li><p><code>hasattr</code>(<em>object</em>, <em>name</em>)</p><p>该实参是一个对象和一个字符串。如果字符串是对象的属性之一的名称，则返回 <code>True</code>，否则返回 <code>False</code>。（此功能是通过调用 <code>getattr(object, name)</code> 看是否有 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a> 异常来实现的。）</p></li><li><p><code>hash</code>(<em>object</em>)</p><p>返回该对象的哈希值（如果它有的话）。哈希值是整数。它们在字典查找元素时用来快速比较字典的键。相同大小的数字变量有相同的哈希值（即使它们类型不同，如 1 和 1.0）。</p><blockquote><p>注解 如果对象实现了自己的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__hash__"><code>__hash__()</code></a> 方法，请注意，<a href="https://docs.python.org/zh-cn/3/library/functions.html#hash"><code>hash()</code></a> 根据机器的字长来截断返回值。另请参阅 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__hash__"><code>__hash__()</code></a>。</p></blockquote></li><li><p><code>help</code>([<em>object</em>])</p><p>启动内置的帮助系统（此函数主要在交互式中使用）。如果没有实参，解释器控制台里会启动交互式帮助系统。如果实参是一个字符串，则在模块、函数、类、方法、关键字或文档主题中搜索该字符串，并在控制台上打印帮助信息。如果实参是其他任意对象，则会生成该对象的帮助页。</p><p>请注意如果在函数的形参列表中出现了斜杠 (/)，则它在发起调用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#help"><code>help()</code></a> 的时候意味着斜杠之前的均为仅限位置形参。 更多相关信息，请参阅 <a href="https://docs.python.org/zh-cn/3/faq/programming.html#faq-positional-only-arguments">有关仅限位置形参的 FAQ 条目</a>。</p><p>该函数通过 <a href="https://docs.python.org/zh-cn/3/library/site.html#module-site"><code>site</code></a> 模块加入到内置命名空间。</p><p><em>在 3.4 版更改:</em> <a href="https://docs.python.org/zh-cn/3/library/pydoc.html#module-pydoc"><code>pydoc</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/inspect.html#module-inspect"><code>inspect</code></a> 的变更使得可调用对象的签名信息更加全面和一致。</p></li><li><p><code>hex</code>(<em>x</em>)</p><p>将整数转换为以“0x”为前缀的小写十六进制字符串。如果 <em>x</em> 不是 Python <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 对象，则必须定义返回整数的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a> 方法。</p><p>另见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a> 获取更多信息。</p><p>另请参阅 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int()</code></a> 将十六进制字符串转换为以 16 为基数的整数。</p><blockquote><p>注解 如果要获取浮点数的十六进制字符串形式，请使用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#float.hex"><code>float.hex()</code></a> 方法。</p></blockquote></li><li><p><code>id</code>(<em>object</em>)</p><p>返回对象的“标识值”。该值是一个整数，在此对象的生命周期中保证是唯一且恒定的。两个生命期不重叠的对象可能具有相同的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#id"><code>id()</code></a> 值。</p><p><strong>CPython implementation detail:</strong> This is the address of the object in memory.</p><p>引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>builtins.id</code>，附带参数 <code>id</code>。</p></li><li><p><code>input</code>([<em>prompt</em>])</p><p>如果存在 <em>prompt</em> 实参，则将其写入标准输出，末尾不带换行符。接下来，该函数从输入中读取一行，将其转换为字符串（除了末尾的换行符）并返回。当读取到 EOF 时，则触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#EOFError"><code>EOFError</code></a>。</p><p>如果加载了 <a href="https://docs.python.org/zh-cn/3/library/readline.html#module-readline"><code>readline</code></a> 模块，<a href="https://docs.python.org/zh-cn/3/library/functions.html#input"><code>input()</code></a> 将使用它来提供复杂的行编辑和历史记录功能。</p><p>引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>builtins.input</code> 附带参数 <code>prompt</code>。</p><p>在成功读取输入之后引发一个审计事件 <code>builtins.input/result</code> 附带结果。</p></li><li><p><em>class</em> <code>int</code>([<em>x</em>])</p></li><li><p><em>class</em> <code>int</code>(<em>x</em>, <em>base=10</em>)</p><p>返回一个基于数字或字符串 <em>x</em> 构造的整数对象，或者在未给出参数时返回 <code>0</code>。 如果 <em>x</em> 定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__int__"><code>__int__()</code></a>，<code>int(x)</code> 将返回 <code>x.__int__()</code>。 如果 <em>x</em> 定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a>，它将返回 <code>x.__index__()</code>。 如果 <em>x</em> 定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__trunc__"><code>__trunc__()</code></a>，它将返回 <code>x.__trunc__()</code>。 对于浮点数，它将向零舍入。</p><p>如果 <em>x</em> 不是数字，或者有 <em>base</em> 参数，<em>x</em> 必须是字符串、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a>、表示进制为 <em>base</em> 的 <a href="https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#integers">整数字面值</a> 的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray"><code>bytearray</code></a> 实例。该文字前可以有 <code>+</code> 或 <code>-</code> （中间不能有空格），前后可以有空格。一个进制为 n 的数字包含 0 到 n-1 的数，其中 <code>a</code> 到 <code>z</code> （或 <code>A</code> 到 <code>Z</code> ）表示 10 到 35。默认的 <em>base</em> 为 10 ，允许的进制有 0、2-36。2、8、16 进制的数字可以在代码中用 <code>0b</code>/<code>0B</code> 、 <code>0o</code>/<code>0O</code> 、 <code>0x</code>/<code>0X</code> 前缀来表示。进制为 0 将安照代码的字面量来精确解释，最后的结果会是 2、8、10、16 进制中的一个。所以 <code>int(&#39;010&#39;, 0)</code> 是非法的，但 <code>int(&#39;010&#39;)</code> 和 <code>int(&#39;010&#39;, 8)</code> 是合法的。</p><p>整数类型定义请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a> 。</p><p><em>在 3.4 版更改:</em> 如果 <em>base</em> 不是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 的实例，但 <em>base</em> 对象有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>base.__index__</code></a> 方法，则会调用该方法来获取进制数。以前的版本使用 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__int__"><code>base.__int__</code></a> 而不是 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>base.__index__</code></a>。</p><p><em>在 3.6 版更改:</em> 您可以使用下划线将代码文字中的数字进行分组。</p><p><em>在 3.7 版更改:</em> <em>x</em> 现在只能作为位置参数。</p><p><em>在 3.8 版更改:</em> 如果 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__int__"><code>__int__()</code></a> 未定义则回退至 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a>。</p></li><li><p><code>isinstance</code>(<em>object</em>, <em>classinfo</em>)</p><p>如果参数 <em>object</em> 是参数 <em>classinfo</em> 的实例或者是其 (直接、间接或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-abstract-base-class">虚拟</a>) 子类则返回 <code>True</code>。 如果 <em>object</em> 不是给定类型的对象，函数将总是返回 <code>False</code>。 如果 <em>classinfo</em> 是类型对象元组（或由其他此类元组递归组成的元组），那么如果 <em>object</em> 是其中任何一个类型的实例就返回 <code>True</code>。 如果 <em>classinfo</em> 既不是类型，也不是类型元组或类型元组的元组，则将引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a> 异常。</p></li><li><p><code>issubclass</code>(<em>class</em>, <em>classinfo</em>)</p><p>如果 <em>class</em> 是 <em>classinfo</em> 的 (直接、间接或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-abstract-base-class">虚拟</a>) 子类则返回 <code>True</code>。 类会被视作其自身的子类。 <em>classinfo</em> 也以是类对象的元组，在此情况下 <em>classinfo</em> 中的每个条目都将被检查。 在任何其他情况下，都将引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a> 异常。</p></li><li><p><code>iter</code>(<em>object</em>[, <em>sentinel</em>])</p><p>返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterator">iterator</a> 对象。根据是否存在第二个实参，第一个实参的解释是非常不同的。如果没有第二个实参，<em>object</em> 必须是支持迭代协议（有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__iter__"><code>__iter__()</code></a> 方法）的集合对象，或必须支持序列协议（有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__"><code>__getitem__()</code></a> 方法，且数字参数从 <code>0</code> 开始）。如果它不支持这些协议，会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>。如果有第二个实参 <em>sentinel</em>，那么 <em>object</em> 必须是可调用的对象。这种情况下生成的迭代器，每次迭代调用它的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator.__next__"><code>__next__()</code></a> 方法时都会不带实参地调用 <em>object</em>；如果返回的结果是 <em>sentinel</em> 则触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#StopIteration"><code>StopIteration</code></a>，否则返回调用结果。</p><p>另请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typeiter">迭代器类型</a>。</p><p>适合 <a href="https://docs.python.org/zh-cn/3/library/functions.html#iter"><code>iter()</code></a> 的第二种形式的应用之一是构建块读取器。</p></li><li><p><code>len</code>(<em>s</em>)</p><p>返回对象的长度（元素个数）。实参可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）。</p><p><strong>CPython implementation detail:</strong> <code>len</code> 对于大于 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.maxsize"><code>sys.maxsize</code></a> 的长度如 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#range"><code>range(2 ** 100)</code></a> 会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#OverflowError"><code>OverflowError</code></a>。</p></li><li><p><em>class</em> <code>list</code>([<em>iterable</em>])</p><p>虽然被称为函数，<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list"><code>list</code></a> 实际上是一种可变序列类型，详情请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq-list">列表</a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq">序列类型 — list, tuple, range</a>。</p></li><li><p><code>locals</code>()</p><p>更新并返回表示当前本地符号表的字典。 在函数代码块但不是类代码块中调用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> 时将返回自由变量。 请注意在模块层级上，<a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#globals"><code>globals()</code></a> 是同一个字典。</p><blockquote><p>注解 不要更改此字典的内容；更改不会影响解释器使用的局部变量或自由变量的值。</p></blockquote></li><li><p><code>map</code>(<em>function</em>, <em>iterable</em>, <em>…</em>)</p><p>返回一个将 <em>function</em> 应用于 <em>iterable</em> 中每一项并输出其结果的迭代器。 如果传入了额外的 <em>iterable</em> 参数，<em>function</em> 必须接受相同个数的实参并被应用于从所有可迭代对象中并行获取的项。 当有多个可迭代对象时，最短的可迭代对象耗尽则整个迭代就将结束。 对于函数的输入已经是参数元组的情况，请参阅 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.starmap"><code>itertools.starmap()</code></a>。</p></li><li><p><code>max</code>(<em>iterable</em>, ***[, <em>key</em>, <em>default</em>])</p></li><li><p><code>max</code>(<em>arg1</em>, <em>arg2</em>, *<em>args</em>[, <em>key</em>])</p><p>返回可迭代对象中最大的元素，或者返回两个及以上实参中最大的。</p><p>如果只提供了一个位置参数，它必须是非空 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterable">iterable</a>，返回可迭代对象中最大的元素；如果提供了两个及以上的位置参数，则返回最大的位置参数。</p><p>有两个可选只能用关键字的实参。<em>key</em> 实参指定排序函数用的参数，如传给 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list.sort"><code>list.sort()</code></a> 的。<em>default</em> 实参是当可迭代对象为空时返回的值。如果可迭代对象为空，并且没有给 <em>default</em> ，则会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ValueError"><code>ValueError</code></a>。</p><p>如果有多个最大元素，则此函数将返回第一个找到的。这和其他稳定排序工具如 <code>sorted(iterable, key=keyfunc, reverse=True)[0]</code> 和 <code>heapq.nlargest(1, iterable, key=keyfunc)</code> 保持一致。</p><p><em>3.4 新版功能:</em> keyword-only 实参 <em>default</em> 。</p><p><em>在 3.8 版更改:</em> <em>key</em> 可以为 <code>None</code>。</p></li><li><p><em>class</em> <code>memoryview</code>(<em>obj</em>)</p><p>返回由给定实参创建的“内存视图”对象。有关详细信息，请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typememoryview">内存视图</a>。</p></li><li><p><code>min</code>(<em>iterable</em>, ***[, <em>key</em>, <em>default</em>])</p></li><li><p><code>min</code>(<em>arg1</em>, <em>arg2</em>, *<em>args</em>[, <em>key</em>])</p><p>返回可迭代对象中最小的元素，或者返回两个及以上实参中最小的。</p><p>如果只提供了一个位置参数，它必须是 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterable">iterable</a>，返回可迭代对象中最小的元素；如果提供了两个及以上的位置参数，则返回最小的位置参数。</p><p>有两个可选只能用关键字的实参。<em>key</em> 实参指定排序函数用的参数，如传给 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list.sort"><code>list.sort()</code></a> 的。<em>default</em> 实参是当可迭代对象为空时返回的值。如果可迭代对象为空，并且没有给 <em>default</em> ，则会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ValueError"><code>ValueError</code></a>。</p><p>如果有多个最小元素，则此函数将返回第一个找到的。这和其他稳定排序工具如 <code>sorted(iterable, key=keyfunc)[0]</code> 和 <code>heapq.nsmallest(1, iterable, key=keyfunc)</code> 保持一致。</p><p><em>3.4 新版功能:</em> keyword-only 实参 <em>default</em> 。</p><p><em>在 3.8 版更改:</em> <em>key</em> 可以为 <code>None</code>。</p></li><li><p><code>next</code>(<em>iterator</em>[, <em>default</em>])</p><p>通过调用 <em>iterator</em> 的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator.__next__"><code>__next__()</code></a> 方法获取下一个元素。如果迭代器耗尽，则返回给定的 <em>default</em>，如果没有默认值则触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#StopIteration"><code>StopIteration</code></a>。</p></li><li><p><em>class</em> <code>object</code></p><p>返回一个没有特征的新对象。<a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object</code></a> 是所有类的基类。它具有所有 Python 类实例的通用方法。这个函数不接受任何实参。</p><blockquote><p>注解 由于 <a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object</code></a> 没有 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a>，因此无法将任意属性赋给 <a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object</code></a> 的实例。</p></blockquote></li><li><p><code>oct</code>(<em>x</em>)</p><p>将一个整数转变为一个前缀为“0o”的八进制字符串。结果是一个合法的 Python 表达式。如果 <em>x</em> 不是 Python 的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 对象，那它需要定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__"><code>__index__()</code></a> 方法返回一个整数。</p><p>另见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a> 获取更多信息。</p></li><li><p><code>open</code>(<em>file</em>, <em>mode=’r’</em>, <em>buffering=-1</em>, <em>encoding=None</em>, <em>errors=None</em>, <em>newline=None</em>, <em>closefd=True</em>, <em>opener=None</em>)</p><p>打开 <em>file</em> 并返回对应的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-file-object">file object</a>。 如果该文件不能被打开，则引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#OSError"><code>OSError</code></a>。 请参阅 <a href="https://docs.python.org/zh-cn/3/tutorial/inputoutput.html#tut-files">读写文件</a> 获取此函数的更多用法示例。</p><p><em>file</em> 是一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-like-object">path-like object</a>，表示将要打开的文件的路径（绝对路径或者当前工作目录的相对路径），也可以是要被封装的整数类型文件描述符。（如果是文件描述符，它会随着返回的 I/O 对象关闭而关闭，除非 <em>closefd</em> 被设为 <code>False</code> 。）</p><p><em>mode</em> 是一个可选字符串，用于指定打开文件的模式。默认值是 <code>&#39;r&#39;</code> ，这意味着它以文本模式打开并读取。其他常见模式有：写入 <code>&#39;w&#39;</code> （截断已经存在的文件）；排它性创建 <code>&#39;x&#39;</code> ；追加写 <code>&#39;a&#39;</code> （在 <em>一些</em> Unix 系统上，无论当前的文件指针在什么位置，<em>所有</em> 写入都会追加到文件末尾）。在文本模式，如果 <em>encoding</em> 没有指定，则根据平台来决定使用的编码：使用 <code>locale.getpreferredencoding(False)</code> 来获取本地编码。（要读取和写入原始字节，请使用二进制模式并不要指定 <em>encoding</em>。）可用的模式有：</p></li></ul><table><thead><tr><th align="center">字符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>&#39;r&#39;</code></td><td align="center">读取（默认）</td></tr><tr><td align="center"><code>&#39;w&#39;</code></td><td align="center">写入，并先截断文件</td></tr><tr><td align="center"><code>&#39;x&#39;</code></td><td align="center">排它性创建，如果文件已存在则失败</td></tr><tr><td align="center"><code>&#39;a&#39;</code></td><td align="center">写入，如果文件存在则在末尾追加</td></tr><tr><td align="center"><code>&#39;b&#39;</code></td><td align="center">二进制模式</td></tr><tr><td align="center"><code>&#39;t&#39;</code></td><td align="center">文本模式（默认）</td></tr><tr><td align="center"><code>&#39;+&#39;</code></td><td align="center">打开用于更新（读取与写入）</td></tr></tbody></table><p>  默认模式为 <code>&#39;r&#39;</code> (打开用于读取文本，与 <code>&#39;rt&#39;</code> 同义)。 模式 <code>&#39;w+&#39;</code> 与 <code>&#39;w+b&#39;</code> 将打开文件并清空内容。 模式 <code>&#39;r+&#39;</code> 与 <code>&#39;r+b&#39;</code> 将打开文件并不清空内容。</p><p>  正如在 <a href="https://docs.python.org/zh-cn/3/library/io.html#io-overview">概述</a> 中提到的，Python区分二进制和文本I/O。以二进制模式打开的文件（包括 <em>mode</em> 参数中的 <code>&#39;b&#39;</code> ）返回的内容为 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a> 对象，不进行任何解码。在文本模式下（默认情况下，或者在 <em>mode</em> 参数中包含 <code>&#39;t&#39;</code> ）时，文件内容返回为 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str</code></a> ，首先使用指定的 <em>encoding</em> （如果给定）或者使用平台默认的的字节编码解码。</p><p>  此外还允许使用一个模式字符 <code>&#39;U&#39;</code>，该字符已不再具有任何效果，并被视为已弃用。 之前它会在文本模式中启用 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-universal-newlines">universal newlines</a>，这在 Python 3.0 中成为默认行为。 请参阅 <a href="https://docs.python.org/zh-cn/3/library/functions.html#open-newline-parameter">newline</a> 形参的文档了解更多细节。</p><blockquote><p>注解 Python不依赖于底层操作系统的文本文件概念;所有处理都由Python本身完成，因此与平台无关。</p></blockquote><p>  <em>buffering</em> 是一个可选的整数，用于设置缓冲策略。传递0以切换缓冲关闭（仅允许在二进制模式下），1选择行缓冲（仅在文本模式下可用），并且&gt;1的整数以指示固定大小的块缓冲区的大小（以字节为单位）。如果没有给出 <em>buffering</em> 参数，则默认缓冲策略的工作方式如下:</p><ul><li>二进制文件以固定大小的块进行缓冲；使用启发式方法选择缓冲区的大小，尝试确定底层设备的“块大小”或使用 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.DEFAULT_BUFFER_SIZE"><code>io.DEFAULT_BUFFER_SIZE</code></a>。在许多系统上，缓冲区的长度通常为4096或8192字节。</li><li>“交互式”文本文件（ <a href="https://docs.python.org/zh-cn/3/library/io.html#io.IOBase.isatty"><code>isatty()</code></a> 返回 <code>True</code> 的文件）使用行缓冲。其他文本文件使用上述策略用于二进制文件。</li></ul><p>  <em>encoding</em> 是用于解码或编码文件的编码的名称。这应该只在文本模式下使用。默认编码是依赖于平台的（不 管 <a href="https://docs.python.org/zh-cn/3/library/locale.html#locale.getpreferredencoding"><code>locale.getpreferredencoding()</code></a> 返回何值），但可以使用任何Python支持的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-text-encoding">text encoding</a> 。有关支持的编码列表，请参阅 <a href="https://docs.python.org/zh-cn/3/library/codecs.html#module-codecs"><code>codecs</code></a> 模块。</p><p>  <em>errors</em> 是一个可选的字符串参数，用于指定如何处理编码和解码错误 - 这不能在二进制模式下使用。可以使用各种标准错误处理程序（列在 <a href="https://docs.python.org/zh-cn/3/library/codecs.html#error-handlers">错误处理方案</a> ），但是使用 <a href="https://docs.python.org/zh-cn/3/library/codecs.html#codecs.register_error"><code>codecs.register_error()</code></a> 注册的任何错误处理名称也是有效的。标准名称包括:</p><ul><li>如果存在编码错误，<code>&#39;strict&#39;</code> 会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ValueError"><code>ValueError</code></a> 异常。 默认值 <code>None</code> 具有相同的效果。</li><li><code>&#39;ignore&#39;</code> 忽略错误。请注意，忽略编码错误可能会导致数据丢失。</li><li><code>&#39;replace&#39;</code> 会将替换标记（例如 <code>&#39;?&#39;</code> ）插入有错误数据的地方。</li><li><code>&#39;surrogateescape&#39;</code> 将表示任何不正确的字节作为Unicode专用区中的代码点，范围从U+DC80到U+DCFF。当在写入数据时使用 <code>surrogateescape</code> 错误处理程序时，这些私有代码点将被转回到相同的字节中。这对于处理未知编码的文件很有用。</li><li>只有在写入文件时才支持 <code>&#39;xmlcharrefreplace&#39;</code>。编码不支持的字符将替换为相应的XML字符引用 <code>&amp;#nnn;</code>。</li><li><code>&#39;backslashreplace&#39;</code> 用Python的反向转义序列替换格式错误的数据。</li><li><code>&#39;namereplace&#39;</code> （也只在编写时支持）用 <code>\N&#123;...&#125;</code> 转义序列替换不支持的字符。</li></ul><p>  <em>newline</em> 控制 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-universal-newlines">universal newlines</a> 模式如何生效（它仅适用于文本模式）。它可以是 <code>None</code>，<code>&#39;&#39;</code>，<code>&#39;\n&#39;</code>，<code>&#39;\r&#39;</code> 和 <code>&#39;\r\n&#39;</code>。它的工作原理:</p><ul><li><p>从流中读取输入时，如果 <em>newline</em> 为 <code>None</code>，则启用通用换行模式。输入中的行可以以 <code>&#39;\n&#39;</code>，<code>&#39;\r&#39;</code> 或 <code>&#39;\r\n&#39;</code> 结尾，这些行被翻译成 <code>&#39;\n&#39;</code> 在返回呼叫者之前。如果它是 <code>&#39;&#39;</code>，则启用通用换行模式，但行结尾将返回给调用者未翻译。如果它具有任何其他合法值，则输入行仅由给定字符串终止，并且行结尾将返回给未调用的调用者。</p></li><li><p>将输出写入流时，如果 <em>newline</em> 为 <code>None</code>，则写入的任何 <code>&#39;\n&#39;</code> 字符都将转换为系统默认行分隔符 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.linesep"><code>os.linesep</code></a>。如果 <em>newline</em> 是 <code>&#39;&#39;</code> 或 <code>&#39;\n&#39;</code>，则不进行翻译。如果 <em>newline</em> 是任何其他合法值，则写入的任何 <code>&#39;\n&#39;</code> 字符将被转换为给定的字符串。</p><p>如果 <em>closefd</em> 是 <code>False</code> 并且给出了文件描述符而不是文件名，那么当文件关闭时，底层文件描述符将保持打开状态。如果给出文件名则 <em>closefd</em> 必须为 <code>True</code> （默认值），否则将引发错误。</p><p>可以通过传递可调用的 <em>opener</em> 来使用自定义开启器。然后通过使用参数（ <em>file</em>，<em>flags</em> ）调用 <em>opener</em> 获得文件对象的基础文件描述符。 <em>opener</em> 必须返回一个打开的文件描述符（使用 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.open"><code>os.open</code></a> as <em>opener</em> 时与传递 <code>None</code> 的效果相同）。</p><p>新创建的文件是 <a href="https://docs.python.org/zh-cn/3/library/os.html#fd-inheritance">不可继承的</a>。</p><p>下面的示例使用 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.open"><code>os.open()</code></a> 函数的 <a href="https://docs.python.org/zh-cn/3/library/os.html#dir-fd">dir_fd</a> 的形参，从给定的目录中用相对路径打开文件:</p><p>&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; dir_fd &#x3D; os.open(&#39;somedir&#39;, os.O_RDONLY)</span><br><span class="line">&gt;&gt;&gt; def opener(path, flags):</span><br><span class="line">...     return os.open(path, flags, dir_fd&#x3D;dir_fd)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; with open(&#39;spamspam.txt&#39;, &#39;w&#39;, opener&#x3D;opener) as f:</span><br><span class="line">...     print(&#39;This will be written to somedir&#x2F;spamspam.txt&#39;, file&#x3D;f)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; os.close(dir_fd)  # don&#39;t leak a file descriptor</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/library/functions.html#open"><code>open()</code></a> 函数所返回的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-file-object">file object</a> 类型取决于所用模式。 当使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#open"><code>open()</code></a> 以文本模式 (<code>&#39;w&#39;</code>, <code>&#39;r&#39;</code>, <code>&#39;wt&#39;</code>, <code>&#39;rt&#39;</code> 等) 打开文件时，它将返回 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.TextIOBase"><code>io.TextIOBase</code></a> (特别是 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.TextIOWrapper"><code>io.TextIOWrapper</code></a>) 的一个子类。 当使用缓冲以二进制模式打开文件时，返回的类是 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.BufferedIOBase"><code>io.BufferedIOBase</code></a> 的一个子类。 具体的类会有多种：在只读的二进制模式下，它将返回 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.BufferedReader"><code>io.BufferedReader</code></a>；在写入二进制和追加二进制模式下，它将返回 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.BufferedWriter"><code>io.BufferedWriter</code></a>，而在读/写模式下，它将返回 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.BufferedRandom"><code>io.BufferedRandom</code></a>。 当禁用缓冲时，则会返回原始流，即 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.RawIOBase"><code>io.RawIOBase</code></a> 的一个子类 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.FileIO"><code>io.FileIO</code></a>。</p><p>另请参阅文件操作模块，例如 <a href="https://docs.python.org/zh-cn/3/library/fileinput.html#module-fileinput"><code>fileinput</code></a>、<a href="https://docs.python.org/zh-cn/3/library/io.html#module-io"><code>io</code></a> （声明了 <a href="https://docs.python.org/zh-cn/3/library/functions.html#open"><code>open()</code></a>）、<a href="https://docs.python.org/zh-cn/3/library/os.html#module-os"><code>os</code></a>、<a href="https://docs.python.org/zh-cn/3/library/os.path.html#module-os.path"><code>os.path</code></a>、<a href="https://docs.python.org/zh-cn/3/library/tempfile.html#module-tempfile"><code>tempfile</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/shutil.html#module-shutil"><code>shutil</code></a>。</p><p>引发一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#auditing">审计事件</a> <code>open</code> 附带参数 <code>file</code>, <code>mode</code>, <code>flags</code>。</p><p><code>mode</code> 与 <code>flags</code> 参数可以在原始调用的基础上被修改或传递。</p><blockquote><p><em>在 3.3 版更改:</em></p><ul><li>增加了 <em>opener</em> 形参。</li><li>增加了 <code>&#39;x&#39;</code> 模式。</li><li>过去触发的 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#IOError"><code>IOError</code></a>，现在是 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#OSError"><code>OSError</code></a> 的别名。</li><li>如果文件已存在但使用了排它性创建模式（ <code>&#39;x&#39;</code> ），现在会触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#FileExistsError"><code>FileExistsError</code></a>。</li></ul></blockquote><blockquote><p><em>在 3.4 版更改:</em></p><ul><li>文件现在禁止继承。</li></ul></blockquote></li></ul><p>  <em>Deprecated since version 3.4, will be removed in version 3.10:</em> <code>&#39;U&#39;</code> 模式。</p><blockquote><p><em>在 3.5 版更改:</em></p><ul><li>如果系统调用被中断，但信号处理程序没有触发异常，此函数现在会重试系统调用，而不是触发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#InterruptedError"><code>InterruptedError</code></a> 异常（原因详见 <a href="https://www.python.org/dev/peps/pep-0475"><strong>PEP 475</strong></a>）。</li><li>增加了 <code>&#39;namereplace&#39;</code> 错误处理接口。</li></ul></blockquote><blockquote><p><em>在 3.6 版更改:</em></p><ul><li>增加对实现了 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.PathLike"><code>os.PathLike</code></a> 对象的支持。</li><li>在 Windows 上，打开一个控制台缓冲区将返回 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.RawIOBase"><code>io.RawIOBase</code></a> 的子类，而不是 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.FileIO"><code>io.FileIO</code></a>。</li></ul></blockquote><ul><li><p><code>ord</code>(<em>c</em>)</p><p>对表示单个 Unicode 字符的字符串，返回代表它 Unicode 码点的整数。例如 <code>ord(&#39;a&#39;)</code> 返回整数 <code>97</code>， <code>ord(&#39;€&#39;)</code> （欧元符号）返回 <code>8364</code> 。这是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#chr"><code>chr()</code></a> 的逆函数。</p></li><li><p><code>pow</code>(<em>base</em>, <em>exp</em>[, <em>mod</em>])</p><p>返回 <em>base</em> 的 <em>exp</em> 次幂；如果 <em>mod</em> 存在，则返回 <em>base</em> 的 <em>exp</em> 次幂对 <em>mod</em> 取余（比 <code>pow(base, exp) % mod</code> 更高效）。 两参数形式 <code>pow(base, exp)</code> 等价于乘方运算符: <code>base**exp</code>。</p><p>参数必须具有数值类型。 对于混用的操作数类型，则将应用双目算术运算符的类型强制转换规则。 对于 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 操作数，结果具有与操作数相同的类型（强制转换后），除非第二个参数为负值；在这种情况下，所有参数将被转换为浮点数并输出浮点数结果。 例如，<code>10**2</code> 返回 <code>100</code>，但 <code>10**-2</code> 返回 <code>0.01</code>。</p><p>对于 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 操作数 <em>base</em> 和 <em>exp</em>，如果给出 <em>mod</em>，则 <em>mod</em> 必须为整数类型并且 <em>mod</em> 必须不为零。 如果给出 <em>mod</em> 并且 <em>exp</em> 为负值，则 <em>base</em> 必须相对于 <em>mod</em> 不可整除。 在这种情况下，将会返回 <code>pow(inv_base, -exp, mod)</code>，其中 <em>inv_base</em> 为 <em>base</em> 的倒数对 <em>mod</em> 取余。</p><p><em>在 3.8 版更改:</em> 对于 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int"><code>int</code></a> 操作数，三参数形式的 <code>pow</code> 现在允许第二个参数为负值，即可以计算倒数的余数。</p><p><em>在 3.8 版更改:</em> 允许关键字参数。 之前只支持位置参数。</p></li><li><p><code>print</code>(*<em>objects</em>, <em>sep=’ ‘</em>, <em>end=’\n’</em>, <em>file=sys.stdout</em>, <em>flush=False</em>)</p><p>将 <em>objects</em> 打印到 <em>file</em> 指定的文本流，以 <em>sep</em> 分隔并在末尾加上 <em>end</em>。 <em>sep</em>, <em>end</em>, <em>file</em> 和 <em>flush</em> 如果存在，它们必须以关键字参数的形式给出。</p><p>所有非关键字参数都会被转换为字符串，就像是执行了 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str()</code></a> 一样，并会被写入到流，以 <em>sep</em> 且在末尾加上 <em>end</em>。 <em>sep</em> 和 <em>end</em> 都必须为字符串；它们也可以为 <code>None</code>，这意味着使用默认值。 如果没有给出 <em>objects</em>，则 <a href="https://docs.python.org/zh-cn/3/library/functions.html#print"><code>print()</code></a> 将只写入 <em>end</em>。</p><p><em>file</em> 参数必须是一个具有 <code>write(string)</code> 方法的对象；如果参数不存在或为 <code>None</code>，则将使用 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.stdout"><code>sys.stdout</code></a>。 由于要打印的参数会被转换为文本字符串，因此 <a href="https://docs.python.org/zh-cn/3/library/functions.html#print"><code>print()</code></a> 不能用于二进制模式的文件对象。 对于这些对象，应改用 <code>file.write(...)</code>。</p><p>输出是否被缓存通常决定于 <em>file</em>，但如果 <em>flush</em> 关键字参数为真值，流会被强制刷新。</p><p><em>在 3.3 版更改:</em> 增加了 <em>flush</em> 关键字参数。</p></li><li><p><em>class</em> <code>property</code>(<em>fget=None</em>, <em>fset=None</em>, <em>fdel=None</em>, <em>doc=None</em>)</p><p>返回 property 属性。</p><p><em>fget</em> 是获取属性值的函数。 <em>fset</em> 是用于设置属性值的函数。 <em>fdel</em> 是用于删除属性值的函数。并且 <em>doc</em> 为属性对象创建文档字符串。</p><p><em>在 3.5 版更改:</em> 特征属性对象的文档字符串现在是可写的。</p></li><li><p><em>class</em> <code>range</code>(<em>stop</em>)</p></li><li><p><em>class</em> <code>range</code>(<em>start</em>, <em>stop</em>[, <em>step</em>])</p><p>虽然被称为函数，但 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#range"><code>range</code></a> 实际上是一个不可变的序列类型，参见在 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq-range">range 对象</a> 与 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq">序列类型 — list, tuple, range</a> 中的文档说明。</p></li><li><p><code>repr</code>(<em>object</em>)</p><p>返回包含一个对象的可打印表示形式的字符串。 对于许多类型来说，该函数会尝试返回的字符串将会与该对象被传递给 <a href="https://docs.python.org/zh-cn/3/library/functions.html#eval"><code>eval()</code></a> 时所生成的对象具有相同的值，在其他情况下表示形式会是一个括在尖括号中的字符串，其中包含对象类型的名称与通常包括对象名称和地址的附加信息。 类可以通过定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__repr__"><code>__repr__()</code></a> 方法来控制此函数为它的实例所返回的内容。</p></li><li><p><code>reversed</code>(<em>seq</em>)</p><p>返回一个反向的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterator">iterator</a>。 <em>seq</em> 必须是一个具有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__reversed__"><code>__reversed__()</code></a> 方法的对象或者是支持该序列协议（具有从 <code>0</code> 开始的整数类型参数的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__len__"><code>__len__()</code></a> 方法和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__"><code>__getitem__()</code></a> 方法）。</p></li><li><p><code>round</code>(<em>number</em>[, <em>ndigits</em>])</p><p>返回 <em>number</em> 舍入到小数点后 <em>ndigits</em> 位精度的值。 如果 <em>ndigits</em> 被省略或为 <code>None</code>，则返回最接近输入值的整数。</p><p>对于支持 <a href="https://docs.python.org/zh-cn/3/library/functions.html#round"><code>round()</code></a> 的内置类型，值会被舍入到最接近的 10 的负 <em>ndigits</em> 次幂的倍数；如果与两个倍数的距离相等，则选择偶数 (因此，<code>round(0.5)</code> 和 <code>round(-0.5)</code> 均为 <code>0</code> 而 <code>round(1.5)</code> 为 <code>2</code>)。 任何整数值都可作为有效的 <em>ndigits</em> (正数、零或负数)。 如果 <em>ndigits</em> 被省略或为 <code>None</code> 则返回值将为整数。 否则返回值与 <em>number</em> 的类型相同。</p><p>对于一般的 Python 对象 <code>number</code>, <code>round</code> 将委托给 <code>number.__round__</code>。</p><blockquote><p>注解 对浮点数执行 <a href="https://docs.python.org/zh-cn/3/library/functions.html#round"><code>round()</code></a> 的行为可能会令人惊讶：例如，<code>round(2.675, 2)</code> 将给出 <code>2.67</code> 而不是期望的 <code>2.68</code>。 这不算是程序错误：这一结果是由于大多数十进制小数实际上都不能以浮点数精确地表示。 请参阅 <a href="https://docs.python.org/zh-cn/3/tutorial/floatingpoint.html#tut-fp-issues">浮点算术：争议和限制</a> 了解更多信息。</p></blockquote></li></ul><ul><li><p><em>class</em> <code>set</code>([<em>iterable</em>])</p><p>返回一个新的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set"><code>set</code></a> 对象，可以选择带有从 <em>iterable</em> 获取的元素。 <code>set</code> 是一个内置类型。 请查看 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set"><code>set</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#types-set">集合类型 — set, frozenset</a> 获取关于这个类的文档。</p><p>有关其他容器请参看内置的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#frozenset"><code>frozenset</code></a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list"><code>list</code></a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple"><code>tuple</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict"><code>dict</code></a> 类，以及 <a href="https://docs.python.org/zh-cn/3/library/collections.html#module-collections"><code>collections</code></a> 模块。</p></li><li><p><code>setattr</code>(<em>object</em>, <em>name</em>, <em>value</em>)</p><p>此函数与 <a href="https://docs.python.org/zh-cn/3/library/functions.html#getattr"><code>getattr()</code></a> 两相对应。 其参数为一个对象、一个字符串和一个任意值。 字符串指定一个现有属性或者新增属性。 函数会将值赋给该属性，只要对象允许这种操作。 例如，<code>setattr(x, &#39;foobar&#39;, 123)</code> 等价于 <code>x.foobar = 123</code>。</p></li><li><p><em>class</em> <code>slice</code>(<em>stop</em>)</p></li><li><p><em>class</em> <code>slice</code>(<em>start</em>, <em>stop</em>[, <em>step</em>])</p><p>返回一个表示由 <code>range(start, stop, step)</code> 所指定索引集的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-slice">slice</a> 对象。 其中 <em>start</em> 和 <em>step</em> 参数默认为 <code>None</code>。 切片对象具有仅会返回对应参数值（或其默认值）的只读数据属性 <code>start</code>, <code>stop</code> 和 <code>step</code>。 它们没有其他的显式功能；不过它们会被 NumPy 以及其他第三方扩展所使用。 切片对象也会在使用扩展索引语法时被生成。 例如: <code>a[start:stop:step]</code> 或 <code>a[start:stop, i]</code>。 请参阅 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.islice"><code>itertools.islice()</code></a> 了解返回迭代器的一种替代版本。</p></li><li><p><code>sorted</code>(<em>iterable</em>, ***, <em>key=None</em>, <em>reverse=False</em>)</p><p>根据 <em>iterable</em> 中的项返回一个新的已排序列表。</p><p>具有两个可选参数，它们都必须指定为关键字参数。</p><p><em>key</em> 指定带有单个参数的函数，用于从 <em>iterable</em> 的每个元素中提取用于比较的键 (例如 <code>key=str.lower</code>)。 默认值为 <code>None</code> (直接比较元素)。</p><p><em>reverse</em> 为一个布尔值。 如果设为 <code>True</code>，则每个列表元素将按反向顺序比较进行排序。</p><p>使用 <a href="https://docs.python.org/zh-cn/3/library/functools.html#functools.cmp_to_key"><code>functools.cmp_to_key()</code></a> 可将老式的 <em>cmp</em> 函数转换为 <em>key</em> 函数。</p><p>内置的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#sorted"><code>sorted()</code></a> 确保是稳定的。 如果一个排序确保不会改变比较结果相等的元素的相对顺序就称其为稳定的 — 这有利于进行多重排序（例如先按部门、再按薪级排序）。</p><p>有关排序示例和简要排序教程，请参阅 <a href="https://docs.python.org/zh-cn/3/howto/sorting.html#sortinghowto">排序指南</a> 。</p></li><li><p>@<strong>staticmethod</strong></p><p>将方法转换为静态方法。</p><p>静态方法不会接收隐式的第一个参数。要声明一个静态方法，请使用此语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class C:</span><br><span class="line">    @staticmethod</span><br><span class="line">    def f(arg1, arg2, ...): ...</span><br></pre></td></tr></table></figure><p><code>@staticmethod</code> 这样的形式称为函数的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">decorator</a> – 详情参阅 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function">函数定义</a>。</p><p>静态方法的调用可以在类上进行 (例如 <code>C.f()</code>) 也可以在实例上进行 (例如 <code>C().f()</code>)。</p><p>Python中的静态方法与Java或C ++中的静态方法类似。另请参阅 <a href="https://docs.python.org/zh-cn/3/library/functions.html#classmethod"><code>classmethod()</code></a> ，用于创建备用类构造函数的变体。</p><p>像所有装饰器一样，也可以像常规函数一样调用 <code>staticmethod</code> ，并对其结果执行某些操作。比如某些情况下需要从类主体引用函数并且您希望避免自动转换为实例方法。对于这些情况，请使用此语法:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class C:</span><br><span class="line">    builtin_open &#x3D; staticmethod(open)</span><br></pre></td></tr></table></figure><p>想了解更多有关静态方法的信息，请参阅 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#types">标准类型层级结构</a> 。</p></li></ul><ul><li><p><em>class</em> <code>str</code>(<em>object=’’</em>)</p></li><li><p><em>class</em> <code>str</code>(<em>object=b’’</em>, <em>encoding=’utf-8’</em>, <em>errors=’strict’</em>)</p><p>返回一个 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str</code></a> 版本的 <em>object</em> 。有关详细信息，请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str()</code></a> 。</p><p><code>str</code> 是内置字符串 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-class">class</a> 。更多关于字符串的信息查看 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#textseq">文本序列类型 — str</a>。</p></li><li><p><code>sum</code>(<em>iterable</em>, <em>/</em>, <em>start=0</em>)</p><p>从 <em>start</em> 开始自左向右对 <em>iterable</em> 的项求和并返回总计值。 <em>iterable</em> 的项通常为数字，而 start 值则不允许为字符串。</p><p>对某些用例来说，存在 <a href="https://docs.python.org/zh-cn/3/library/functions.html#sum"><code>sum()</code></a> 的更好替代。 拼接字符串序列的更好更快方式是调用 <code>&#39;&#39;.join(sequence)</code>。 要以扩展精度对浮点值求和，请参阅 <a href="https://docs.python.org/zh-cn/3/library/math.html#math.fsum"><code>math.fsum()</code></a>。 要拼接一系列可迭代对象，请考虑使用 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.chain"><code>itertools.chain()</code></a>。</p><p><em>在 3.8 版更改:</em> <em>start</em> 形参可用关键字参数形式来指定。</p></li><li><p><code>super</code>([<em>type</em>[, <em>object-or-type</em>]])</p><p>返回一个代理对象，它会将方法调用委托给 <em>type</em> 的父类或兄弟类。 这对于访问已在类中被重载的继承方法很有用。</p><p><em>object-or-type</em> 确定用于搜索的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-method-resolution-order">method resolution order</a>。 搜索会从 <em>type</em> 之后的类开始。</p><p>举例来说，如果 <em>object-or-type</em> 的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#class.__mro__"><code>__mro__</code></a> 为 <code>D -&gt; B -&gt; C -&gt; A -&gt; object</code> 并且 <em>type</em> 的值为 <code>B</code>，则 <a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 将会搜索 <code>C -&gt; A -&gt; object</code>。</p><p><em>object-or-type</em> 的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#class.__mro__"><code>__mro__</code></a> 属性列出了 <a href="https://docs.python.org/zh-cn/3/library/functions.html#getattr"><code>getattr()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 所共同使用的方法解析搜索顺序。 该属性是动态的，可以在任何继承层级结构发生更新的时候被改变。</p><p>如果省略第二个参数，则返回的超类对象是未绑定的。 如果第二个参数为一个对象，则 <code>isinstance(obj, type)</code> 必须为真值。 如果第二个参数为一个类型，则 <code>issubclass(type2, type)</code> 必须为真值（这适用于类方法）。</p><p><em>super</em> 有两个典型用例。 在具有单继承的类层级结构中，<em>super</em> 可用来引用父类而不必显式地指定它们的名称，从而令代码更易维护。 这种用法与其他编程语言中 <em>super</em> 的用法非常相似。</p><p>第二个用例是在动态执行环境中支持协作多重继承。 此用例为 Python 所独有，在静态编译语言或仅支持单继承的语言中是不存在的。 这使得实现“菱形图”成为可能，在这时会有多个基类实现相同的方法。 好的设计强制要求这种方法在每个情况下具有相同的调用签名（因为调用顺序是在运行时确定的，也因为该顺序要适应类层级结构的更改，还因为该顺序可能包含在运行时之前未知的兄弟类）。</p><p>对于以上两个用例，典型的超类调用看起来是这样的:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class C(B):</span><br><span class="line">    def method(self, arg):</span><br><span class="line">        super().method(arg)    # This does the same thing as:</span><br><span class="line">                               # super(C, self).method(arg)</span><br></pre></td></tr></table></figure><p>除了方法查找之外，<a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 也可用于属性查找。 一个可能的应用场合是在上级或同级类中调用 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-descriptor">描述器</a>。</p><p>请注意 <a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 是作为显式加点属性查找的绑定过程的一部分来实现的，例如 <code>super().__getitem__(name)</code>。 它做到这一点是通过实现自己的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getattribute__"><code>__getattribute__()</code></a> 方法，这样就能以可预测的顺序搜索类，并且支持协作多重继承。 对应地，<a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 在像 <code>super()[name]</code> 这样使用语句或操作符进行隐式查找时则未被定义。</p><p>还要注意的是，除了零个参数的形式以外，<a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 并不限于在方法内部使用。 两个参数的形式明确指定参数并进行相应的引用。 零个参数的形式仅适用于类定义内部，因为编译器需要填入必要的细节以正确地检索到被定义的类，还需要让普通方法访问当前实例。</p><p>对于有关如何使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#super"><code>super()</code></a> 来如何设计协作类的实用建议，请参阅 <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/">使用 super() 的指南</a>。</p></li></ul><ul><li><p><em>class</em> <code>tuple</code>([<em>iterable</em>])</p><p>虽然被称为函数，但 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple"><code>tuple</code></a> 实际上是一个不可变的序列类型，参见在 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq-tuple">元组</a> 与 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesseq">序列类型 — list, tuple, range</a> 中的文档说明。</p></li><li><p><em>class</em> <code>type</code>(<em>object</em>)</p></li><li><p><em>class</em> <code>type</code>(<em>name</em>, <em>bases</em>, <em>dict</em>)</p><p>传入一个参数时，返回 <em>object</em> 的类型。 返回值是一个 type 对象，通常与 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#instance.__class__"><code>object.__class__</code></a> 所返回的对象相同。</p><p>推荐使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance"><code>isinstance()</code></a> 内置函数来检测对象的类型，因为它会考虑子类的情况。</p><p>传入三个参数时，返回一个新的 type 对象。 这在本质上是 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#class"><code>class</code></a> 语句的一种动态形式，<em>name</em> 字符串即类名并会成为 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#definition.__name__"><code>__name__</code></a> 属性；<em>bases</em> 元组包含基类并会成为 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#class.__bases__"><code>__bases__</code></a> 属性；如果为空则会添加所有类的终极基类 <a href="https://docs.python.org/zh-cn/3/library/functions.html#object"><code>object</code></a>。 <em>dict</em> 字典包含类主体的属性和方法定义；它在成为 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性之前可能会被拷贝或包装。 下面两条语句会创建相同的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#type"><code>type</code></a> 对象:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class X:</span><br><span class="line">...     a &#x3D; 1</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; X &#x3D; type(&#39;X&#39;, (), dict(a&#x3D;1))</span><br></pre></td></tr></table></figure><p>另请参阅 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bltin-type-objects">类型对象</a>。</p><p><em>在 3.6 版更改:</em> <a href="https://docs.python.org/zh-cn/3/library/functions.html#type"><code>type</code></a> 的子类如果未重载 <code>type.__new__</code>，将不再能使用一个参数的形式来获取对象的类型。</p></li><li><p><code>vars</code>([<em>object</em>])</p><p>返回模块、类、实例或任何其它具有 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性的对象的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性。</p><p>模块和实例这样的对象具有可更新的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性；但是，其它对象的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性可能会设为限制写入（例如，类会使用 <a href="https://docs.python.org/zh-cn/3/library/types.html#types.MappingProxyType"><code>types.MappingProxyType</code></a> 来防止直接更新字典）。</p><p>不带参数时，<a href="https://docs.python.org/zh-cn/3/library/functions.html#vars"><code>vars()</code></a> 的行为类似 <a href="https://docs.python.org/zh-cn/3/library/functions.html#locals"><code>locals()</code></a>。 请注意，locals 字典仅对于读取起作用，因为对 locals 字典的更新会被忽略。</p><p>如果指定了一个对象但它没有 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性（例如，当它所属的类定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__slots__"><code>__slots__</code></a> 属性时）则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a> 异常。</p></li><li><p><code>zip</code>(*<em>iterables</em>)</p><p>创建一个聚合了来自每个可迭代对象中的元素的迭代器。</p><p>返回一个元组的迭代器，其中的第 <em>i</em> 个元组包含来自每个参数序列或可迭代对象的第 <em>i</em> 个元素。 当所输入可迭代对象中最短的一个被耗尽时，迭代器将停止迭代。 当只有一个可迭代对象参数时，它将返回一个单元组的迭代器。 不带参数时，它将返回一个空迭代器。 相当于:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip</span>(<span class="params">*iterables</span>):</span></span><br><span class="line">    <span class="comment"># zip(&#x27;ABCD&#x27;, &#x27;xy&#x27;) --&gt; Ax By</span></span><br><span class="line">    sentinel = <span class="built_in">object</span>()</span><br><span class="line">    iterators = [<span class="built_in">iter</span>(it) <span class="keyword">for</span> it <span class="keyword">in</span> iterables]</span><br><span class="line">    <span class="keyword">while</span> iterators:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> iterators:</span><br><span class="line">            elem = <span class="built_in">next</span>(it, sentinel)</span><br><span class="line">            <span class="keyword">if</span> elem <span class="keyword">is</span> sentinel:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            result.append(elem)</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(result)</span><br></pre></td></tr></table></figure><p>函数会保证可迭代对象按从左至右的顺序被求值。 使得可以通过 <code>zip(*[iter(s)]*n)</code> 这样的惯用形式将一系列数据聚类为长度为 n 的分组。 这将重复 <em>同样的</em> 迭代器 <code>n</code> 次，以便每个输出的元组具有第 <code>n</code> 次调用该迭代器的结果。 它的作用效果就是将输入拆分为长度为 n 的数据块。</p><p>当你不用关心较长可迭代对象末尾不匹配的值时，则 <a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> 只须使用长度不相等的输入即可。 如果那些值很重要，则应改用 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.zip_longest"><code>itertools.zip_longest()</code></a>。</p><p><a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> 与 <code>*</code> 运算符相结合可以用来拆解一个列表:</p><p>&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; y &#x3D; [4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; zipped &#x3D; zip(x, y)</span><br><span class="line">&gt;&gt;&gt; list(zipped)</span><br><span class="line">[(1, 4), (2, 5), (3, 6)]</span><br><span class="line">&gt;&gt;&gt; x2, y2 &#x3D; zip(*zip(x, y))</span><br><span class="line">&gt;&gt;&gt; x &#x3D;&#x3D; list(x2) and y &#x3D;&#x3D; list(y2)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/library/functions.html#zip"><code>zip()</code></a> 与 <code>*</code> 运算符相结合可以用来拆解一个列表:</p></li><li><p><code>__import__</code>(<em>name</em>, <em>globals=None</em>, <em>locals=None</em>, <em>fromlist=()</em>, <em>level=0</em>)</p><blockquote><p>注解 与 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.import_module"><code>importlib.import_module()</code></a> 不同，这是一个日常 Python 编程中不需要用到的高级函数。</p></blockquote><p>此函数会由 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import"><code>import</code></a> 语句发起调用。 它可以被替换 (通过导入 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins"><code>builtins</code></a> 模块并赋值给 <code>builtins.__import__</code>) 以便修改 <code>import</code> 语句的语义，但是 <strong>强烈</strong> 不建议这样做，因为使用导入钩子 (参见 <a href="https://www.python.org/dev/peps/pep-0302"><strong>PEP 302</strong></a>) 通常更容易实现同样的目标，并且不会导致代码问题，因为许多代码都会假定所用的是默认实现。 同样也不建议直接使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__"><code>__import__()</code></a> 而应该用 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.import_module"><code>importlib.import_module()</code></a>。</p><p>该函数会导入 <em>name</em> 模块，有可能使用给定的 <em>globals</em> 和 <em>locals</em> 来确定如何在包的上下文中解读名称。 <em>fromlist</em> 给出了应该从由 <em>name</em> 指定的模块导入对象或子模块的名称。 标准实现完全不使用其 <em>locals</em> 参数，而仅使用 <em>globals</em> 参数来确定 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import"><code>import</code></a> 语句的包上下文。</p><p><em>level</em> 指定是使用绝对还是相对导入。 <code>0</code> (默认值) 意味着仅执行绝对导入。 <em>level</em> 为正数值表示相对于模块调用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__"><code>__import__()</code></a> 的目录，将要搜索的父目录层数 (详情参见 <a href="https://www.python.org/dev/peps/pep-0328"><strong>PEP 328</strong></a>)。</p><p>当 <em>name</em> 变量的形式为 <code>package.module</code> 时，通常将会返回最高层级的包（第一个点号之前的名称），而 <em>不是</em> 以 <em>name</em> 命名的模块。 但是，当给出了非空的 <em>fromlist</em> 参数时，则将返回以 <em>name</em> 命名的模块。</p><p>例如，语句 <code>import spam</code> 的结果将为与以下代码作用相同的字节码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; __import__(&#39;spam&#39;, globals(), locals(), [], 0)</span><br></pre></td></tr></table></figure><p>语句 <code>import spam.ham</code> 的结果将为以下调用:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spam &#x3D; __import__(&#39;spam.ham&#39;, globals(), locals(), [], 0)</span><br></pre></td></tr></table></figure><p>请注意在这里 <a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__"><code>__import__()</code></a> 是如何返回顶层模块的，因为这是通过 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import"><code>import</code></a> 语句被绑定到特定名称的对象。</p><p>另一方面，语句 <code>from spam.ham import eggs, sausage as saus</code> 的结果将为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eggs &#x3D; _temp.eggs</span><br><span class="line">saus &#x3D; _temp.sausage</span><br></pre></td></tr></table></figure><p>在这里， <code>spam.ham</code> 模块会由 <a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__"><code>__import__()</code></a> 返回。 要导入的对象将从此对象中提取并赋值给它们对应的名称。</p><p>如果您只想按名称导入模块（可能在包中），请使用 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.import_module"><code>importlib.import_module()</code></a></p><p><em>在 3.3 版更改:</em> <em>level</em> 的值不再支持负数（默认值也修改为0）。</p><p><em>在 3.9 版更改:</em> 当使用了命令行参数 <a href="https://docs.python.org/zh-cn/3/using/cmdline.html#cmdoption-e"><code>-E</code></a> 或 <a href="https://docs.python.org/zh-cn/3/using/cmdline.html#id2"><code>-I</code></a> 时，环境变量 <a href="https://docs.python.org/zh-cn/3/using/cmdline.html#envvar-PYTHONCASEOK"><code>PYTHONCASEOK</code></a> 现在将被忽略。</p></li><li><p>脚注: <a href="https://docs.python.org/zh-cn/3/library/functions.html#id1">1</a> 解析器只接受 Unix 风格的行结束符。如果您从文件中读取代码，请确保用换行符转换模式转换 Windows 或 Mac 风格的换行符。</p></li></ul><blockquote><p>上文各内置函数的类型及功能均来自于<a href="https://docs.python.org/zh-cn/3/library/functions.html#divmod">Python官方文档</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/6010e64f3ffa7d37b3f3a563.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/categories/Python/"/>
    
    <category term="学习笔记" scheme="https://amnesia-f.github.io/categories/Python/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/tags/Python/"/>
    
    <category term="学习笔记" scheme="https://amnesia-f.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="函数" scheme="https://amnesia-f.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Arduino：安装驱动失败的解决方法</title>
    <link href="https://amnesia-f.github.io/posts/bfed.html"/>
    <id>https://amnesia-f.github.io/posts/bfed.html</id>
    <published>2021-01-27T14:36:12.000Z</published>
    <updated>2021-01-28T01:19:48.081Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/601181423ffa7d37b345a405.jpg" alt="封面"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一位朋友使用Mind+软件烧录程序时失败，于是找到我希望能帮他解决问题，检查了程序没问题后，看了看软件的监视器发现是端口报的错：</p><p><img src="https://img.imgdb.cn/item/60117e293ffa7d37b3443f9f.jpg" alt="报错"></p><p>于是远程后发现：</p><p><img src="https://img.imgdb.cn/item/60117e293ffa7d37b3443f9b.jpg" alt="安装失败"></p><p>是Arduino USB Driver这个驱动安装失败了，重新安装还是无法解决。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h3 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h3><ul><li>更换USB接口再重新烧录</li><li>按照网上的教程安装最新版本的Arduino IDE包：<a href="https://www.arduino.cc/en/donate/">下载链接</a></li></ul><p>经过以上操作后还是提示安装失败！</p><h3 id="正确的解决方法"><a href="#正确的解决方法" class="headerlink" title="正确的解决方法"></a>正确的解决方法</h3><p>找到系统接口开发日志 <code>C:\Windows\inf\setupapi.dev.log</code></p><p><img src="https://img.imgdb.cn/item/601181423ffa7d37b345a409.png" alt="日志"></p><p>发现是缺少了<code>usber.sys</code>文件，通过下载Arduino中文社区提供的文件：</p><table><thead><tr><th align="center">对应文件</th><th align="center">下载链接</th></tr></thead><tbody><tr><td align="center">usbserXP.rar（xp系统）</td><td align="center"><a href="https://www.arduino.cn/forum.php?mod=attachment&aid=MTYxNTB8Mzc4ZmJhZmF8MTYxMTc1OTU2MHwwfDc1MzE=">跳转链接</a></td></tr><tr><td align="center">usbser32.rar（32位）</td><td align="center"><a href="https://www.arduino.cn/forum.php?mod=attachment&aid=MTYxNTF8NGVlNmQzNzh8MTYxMTc1OTU2MHwwfDc1MzE=">跳转链接</a></td></tr><tr><td align="center">usbser64.rar（64位）</td><td align="center"><a href="https://www.arduino.cn/forum.php?mod=attachment&aid=MTYxNTJ8YzA1MTY2MjF8MTYxMTc1OTU2MHwwfDc1MzE=">跳转链接</a></td></tr></tbody></table><p>将系统对应的文件下载回来解压后，将里面的sys文件复制到<code>C:\Windows\System32</code>和<code>C:\WINDOWS\SYSTEM32\DRIVERS</code>两个文件夹中，再重新安装驱动即可！</p><p><img src="https://img.imgdb.cn/item/601183393ffa7d37b3468445.png" alt="安装成功"></p><h1 id="参考教程链接"><a href="#参考教程链接" class="headerlink" title="参考教程链接"></a>参考教程链接</h1><p><a href="https://www.arduino.cn/thread-7531-1-1.html">Arduino驱动安装失败解决办法——安装驱动数据无效</a></p><p><a href="https://blog.csdn.net/weixin_44007713/article/details/101768326">关于arduino开发板链接usb时，驱动安装不成功的解决办法</a></p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/601181423ffa7d37b345a405.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Arduino" scheme="https://amnesia-f.github.io/categories/Arduino/"/>
    
    
    <category term="Arduino" scheme="https://amnesia-f.github.io/tags/Arduino/"/>
    
    <category term="安装驱动" scheme="https://amnesia-f.github.io/tags/%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记：字典</title>
    <link href="https://amnesia-f.github.io/posts/7594.html"/>
    <id>https://amnesia-f.github.io/posts/7594.html</id>
    <published>2021-01-27T13:01:35.000Z</published>
    <updated>2021-01-27T15:21:07.853Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/6010e64f3ffa7d37b3f3a563.jpg" alt="封面"></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>定义：能够成队储存元素的序列</p><p>格式：字典名 = {key1:value1,key2:value2,……}</p><p>特性：每个键(key)都有一个与之关联的值(value)</p><h1 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a><strong>创建字典</strong></h1><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过直接赋值的方式创建一个字典</span></span><br><span class="line">sport = &#123;<span class="string">&quot;John&quot;</span>:<span class="string">&quot;soccer&quot;</span>,<span class="string">&quot;Mike&quot;</span>:<span class="string">&quot;volleyball&quot;</span>,<span class="string">&quot;Bob&quot;</span>:<span class="string">&quot;baseball&quot;</span>,<span class="string">&quot;Amy&quot;</span>:<span class="string">&quot;ping-pong&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个空的字典，然后为其赋值</span></span><br><span class="line">sport = &#123;&#125;</span><br><span class="line">sport[<span class="string">&quot;John&quot;</span>] = <span class="string">&quot;soccer&quot;</span></span><br><span class="line">sport[<span class="string">&quot;Mike&quot;</span>] = <span class="string">&quot;volleyball&quot;</span></span><br><span class="line">sport[<span class="string">&quot;Bob&quot;</span>] = <span class="string">&quot;baseball&quot;</span></span><br><span class="line">sport[<span class="string">&quot;Amy&quot;</span>] = <span class="string">&quot;ping-pong&quot;</span></span><br></pre></td></tr></table></figure><h1 id="查找字典元素"><a href="#查找字典元素" class="headerlink" title="查找字典元素"></a><strong>查找字典元素</strong></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;<span class="string">&quot;语文&quot;</span>:<span class="number">88</span>, <span class="string">&quot;数学&quot;</span>:<span class="number">90</span>, <span class="string">&quot;英语&quot;</span>:<span class="number">85</span>,</span><br><span class="line">          <span class="string">&quot;物理&quot;</span>:<span class="number">87</span>, <span class="string">&quot;化学&quot;</span>:<span class="number">75</span>, <span class="string">&quot;政治&quot;</span>:<span class="number">93</span>,</span><br><span class="line">          <span class="string">&quot;地理&quot;</span>:<span class="number">88</span>, <span class="string">&quot;生物&quot;</span>:<span class="number">98</span>, <span class="string">&quot;历史&quot;</span>:<span class="number">100</span>,</span><br><span class="line">          <span class="string">&quot;体育&quot;</span>:<span class="number">87</span>, <span class="string">&quot;音乐&quot;</span>:<span class="number">88</span>, <span class="string">&quot;美术&quot;</span>:<span class="number">69</span>&#125;</span><br><span class="line">print(<span class="string">&quot;我的化学成绩:&quot;</span>, scores[<span class="string">&quot;化学&quot;</span>])</span><br><span class="line">print(<span class="string">&quot;我的生物成绩:&quot;</span>, scores.get(<span class="string">&quot;生物&quot;</span>))</span><br><span class="line">print(<span class="string">&quot;我的信息成绩:&quot;</span>, scores.get(<span class="string">&quot;信息&quot;</span>))</span><br></pre></td></tr></table></figure><p>直接根据key查找value：dict[key]</p><p>使用get函数查找：dict.get(key)</p><h1 id="编辑字典元素"><a href="#编辑字典元素" class="headerlink" title="编辑字典元素"></a><strong>编辑字典元素</strong></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_books = &#123;<span class="string">&quot;史记&quot;</span>:<span class="string">&quot;司马迁&quot;</span>,</span><br><span class="line">              <span class="string">&quot;红与黑&quot;</span>:<span class="string">&quot;司汤&quot;</span>,</span><br><span class="line">              <span class="string">&quot;悲惨世界&quot;</span>:<span class="string">&quot;雨果&quot;</span>,</span><br><span class="line">              <span class="string">&quot;西游记&quot;</span>:<span class="string">&quot;吴承恩&quot;</span>,</span><br><span class="line">              <span class="string">&quot;本草纲目&quot;</span>:<span class="string">&quot;李时珍&quot;</span>&#125;</span><br><span class="line">list_books[<span class="string">&quot;昆虫记&quot;</span>] = <span class="string">&quot;法布尔&quot;</span></span><br><span class="line">list_books[<span class="string">&quot;水浒传&quot;</span>] = <span class="string">&quot;施耐庵&quot;</span></span><br><span class="line">list_books[<span class="string">&quot;红与黑&quot;</span>] = <span class="string">&quot;司汤达&quot;</span></span><br><span class="line">print(list_books)</span><br></pre></td></tr></table></figure><h1 id="反向查找字典元素"><a href="#反向查找字典元素" class="headerlink" title="反向查找字典元素"></a><strong>反向查找字典元素</strong></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">id_name = &#123;<span class="string">&quot;01001&quot;</span>:<span class="string">&quot;小张&quot;</span>,</span><br><span class="line">           <span class="string">&quot;01005&quot;</span>:<span class="string">&quot;小王&quot;</span>,</span><br><span class="line">           <span class="string">&quot;01008&quot;</span>:<span class="string">&quot;小林&quot;</span>,</span><br><span class="line">           <span class="string">&quot;01015&quot;</span>:<span class="string">&quot;小李&quot;</span>,</span><br><span class="line">           <span class="string">&quot;01020&quot;</span>:<span class="string">&quot;小孔&quot;</span>,</span><br><span class="line">           <span class="string">&quot;01035&quot;</span>:<span class="string">&quot;小何&quot;</span>&#125;</span><br><span class="line">name_id = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span>,name <span class="keyword">in</span> id_name.items():</span><br><span class="line">    name_id[name] = <span class="built_in">id</span></span><br><span class="line">print(<span class="string">&quot;小李的学号:&quot;</span>,name_id[<span class="string">&quot;小李&quot;</span>])</span><br></pre></td></tr></table></figure><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/6010e64f3ffa7d37b3f3a563.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/categories/Python/"/>
    
    <category term="学习笔记" scheme="https://amnesia-f.github.io/categories/Python/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/tags/Python/"/>
    
    <category term="学习笔记" scheme="https://amnesia-f.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="字典" scheme="https://amnesia-f.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记：列表和元组</title>
    <link href="https://amnesia-f.github.io/posts/ac2c.html"/>
    <id>https://amnesia-f.github.io/posts/ac2c.html</id>
    <published>2021-01-26T12:45:07.000Z</published>
    <updated>2021-01-28T12:37:11.483Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/6010e64f3ffa7d37b3f3a563.jpg" alt="封面"></p><h1 id="新建列表"><a href="#新建列表" class="headerlink" title="新建列表"></a>新建列表</h1><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个包含4个空元素的列表</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="literal">None</span>] * <span class="number">4</span></span><br><span class="line"><span class="comment"># 为四个空值赋值</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">2</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个空列表</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="comment"># 为其赋值</span></span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a><strong>添加列表元素</strong></h1><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表末尾添加单个元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&quot;e&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表末尾添加多个元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.extend(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表指定位置插入元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">2</span>,<span class="string">&quot;B&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>append：在列表末尾添加单个元素；格式：list.append(value)</p><p>extend：在列表末尾添加多个元素；格式：list.extend(value)</p><p>insert：在列表指定位置插入元素；格式：list.insert(index,value)</p><h1 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a><strong>修改列表元素</strong></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接修改索引值为0的元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.append[<span class="number">0</span>] = <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a><strong>删除列表元素</strong></h1><h3 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接删除指定的元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.remove(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据索引位置删除元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span>.<span class="built_in">list</span>[<span class="number">0</span>]   <span class="comment"># 删除第一个元素</span></span><br></pre></td></tr></table></figure><h3 id="方法三：-1"><a href="#方法三：-1" class="headerlink" title="方法三："></a>方法三：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据索引位置删除元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.pop()   <span class="comment"># 删除列表最后一个元素</span></span><br></pre></td></tr></table></figure><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>remove：直接删除指定的元素；格式：list.remove(value)</p><p>del：根据索引位置删除元素；格式：del.list[index]</p><p>pop：根据索引位置删除元素；格式：list.pop(index)</p><h1 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a><strong>列表切片</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&quot;汉堡&quot;, &quot;比萨饼&quot;, &quot;鸭肉卷&quot;, &quot;鸡肉卷&quot;]</span><br><span class="line">list2 &#x3D; [&quot;香辣鸡翅&quot;, &quot;烤翅&quot;, &quot;香骨鸡&quot;, &quot;大排鸡&quot;]</span><br><span class="line">list3 &#x3D; [&quot;红茶&quot;, &quot;乌龙茶&quot;, &quot;豆浆&quot;, &quot;果汁&quot;, &quot;可乐&quot;]</span><br><span class="line">item1 &#x3D; list1[2]</span><br><span class="line">print(item1)</span><br><span class="line">item2 &#x3D; list2[2:]</span><br><span class="line">print(item2)</span><br><span class="line">item3 &#x3D; list3[-1]</span><br><span class="line">print(item3)</span><br><span class="line">lists &#x3D; [item1] + item2 + [item3]</span><br><span class="line">print(lists)</span><br></pre></td></tr></table></figure><h1 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h1><h3 id="正向排序："><a href="#正向排序：" class="headerlink" title="正向排序："></a>正向排序：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运用sort进行正向排序</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;apk&quot;</span>,<span class="string">&quot;exe&quot;</span>,<span class="string">&quot;py&quot;</span>,<span class="string">&quot;xls&quot;</span>,<span class="string">&quot;md&quot;</span>]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="反向排序："><a href="#反向排序：" class="headerlink" title="反向排序："></a>反向排序：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行反向排序</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;apk&quot;</span>,<span class="string">&quot;exe&quot;</span>,<span class="string">&quot;py&quot;</span>,<span class="string">&quot;xls&quot;</span>,<span class="string">&quot;md&quot;</span>]</span><br><span class="line"><span class="built_in">list</span>.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="临时排序："><a href="#临时排序：" class="headerlink" title="临时排序："></a>临时排序：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运用sorted进行临时排序（不改变原列表排序）</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;apk&quot;</span>,<span class="string">&quot;exe&quot;</span>,<span class="string">&quot;py&quot;</span>,<span class="string">&quot;xls&quot;</span>,<span class="string">&quot;md&quot;</span>]</span><br><span class="line">print(<span class="built_in">sorted</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><h1 id="确定列表长度"><a href="#确定列表长度" class="headerlink" title="确定列表长度"></a>确定列表长度</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用len函数求长度</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;apk&quot;</span>,<span class="string">&quot;exe&quot;</span>,<span class="string">&quot;py&quot;</span>,<span class="string">&quot;xls&quot;</span>,<span class="string">&quot;md&quot;</span>]</span><br><span class="line">long = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line">print(long)</span><br></pre></td></tr></table></figure><h1 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">a = number[:]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><hr><h1 id="元组的创建和使用"><a href="#元组的创建和使用" class="headerlink" title="元组的创建和使用"></a>元组的创建和使用</h1><p>定义：包含0个或多个元素的有序序列</p><p>格式：元组名=(value1,value2……)</p><p>特性：只能读取，不能修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = (<span class="number">58</span>,<span class="number">13</span>,<span class="number">79</span>,<span class="number">100</span>,<span class="number">54</span>,<span class="number">85</span>,<span class="number">20</span>,<span class="number">91</span>)</span><br><span class="line"><span class="built_in">all</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="built_in">all</span> = <span class="built_in">all</span> + score[i]</span><br><span class="line">print(<span class="string">&quot;总分：&quot;</span>,<span class="built_in">all</span>)</span><br></pre></td></tr></table></figure><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.imgdb.cn/item/6010e64f3ffa7d37b3f3a563.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;新建列表&quot;&gt;&lt;a href=&quot;#新建列表&quot; class=&quot;headerlink&quot; title=&quot;新</summary>
      
    
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/categories/Python/"/>
    
    <category term="学习笔记" scheme="https://amnesia-f.github.io/categories/Python/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://amnesia-f.github.io/tags/Python/"/>
    
    <category term="学习笔记" scheme="https://amnesia-f.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="列表" scheme="https://amnesia-f.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="元组" scheme="https://amnesia-f.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客技巧：为博客插入音乐</title>
    <link href="https://amnesia-f.github.io/posts/11e4.html"/>
    <id>https://amnesia-f.github.io/posts/11e4.html</id>
    <published>2021-01-25T00:58:48.000Z</published>
    <updated>2021-01-25T02:49:09.617Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-41e1b825c51055f39c22b95777bc620b_1440w.jpg?source=172ae18b" alt="封面"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想要给博客添加音乐，最简单的方法便是利用第三方音乐平台提供的外链播放器，可是效果并不好，外观丑没歌词且体验极差。</p><p>如果使用<code>Hexo-Tag-Aplayer</code>插件的话这个问题就能很好地解决了。</p><a id="more"></a><p>原先 <code>hexo-tag-aplayer</code> 不支持 <code>MetingJS</code>，使得需要图片url，音乐url等等参数，操作起来都很麻烦，需要去音乐网站扒音乐播放链接或者下载下来存储在七牛云或本地。</p><p>但是3.0新版本的Aplayer已经支持MeingJS了，<a href="https://github.com/metowolf/MetingJS">MetingJS</a> 是基于<a href="https://github.com/metowolf/Meting">Meting API</a> 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><h1 id="具体过程："><a href="#具体过程：" class="headerlink" title="具体过程："></a>具体过程：</h1><h3 id="使用音乐平台提供插件"><a href="#使用音乐平台提供插件" class="headerlink" title="使用音乐平台提供插件"></a>使用音乐平台提供插件</h3><p>这里以网易云为例，找到一首歌曲并生成外链播放器，复制html代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=29004400&amp;auto=1&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在合适的地方插入代码即可，效果如下：</p><p><img src="https://img.imgdb.cn/item/600e261a3ffa7d37b3c27f83.png" alt="外链播放器效果"></p><p>其中利用第三方音乐平台生成外链播放器最大的缺点就是有些音乐因为版权保护，无法生成外链：</p><p><img src="https://img.imgdb.cn/item/600e261a3ffa7d37b3c27f86.png" alt="无法生成外链"></p><h3 id="使用-Hexo-Tag-Aplayer-插件"><a href="#使用-Hexo-Tag-Aplayer-插件" class="headerlink" title="使用 Hexo-Tag-Aplayer 插件"></a>使用 Hexo-Tag-Aplayer 插件</h3><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 就是将 <a href="https://github.com/DIYgod/APlayer">APlayer</a> 内嵌入博客页面的 Hexo 插件。</p><p>首先执行安装命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>然后如果你想使用上文提到的 MetingJS 功能，请在 Hexo 配置文件 <code>_config.yml</code> 中设置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>接着找到一个歌单、歌曲或专辑的链接，复制这个链接的id，这里以QQ音乐举例： <a href="https://y.qq.com/n/yqq/playlist/7868042847.html">https://y.qq.com/n/yqq/playlist/7868042847.html</a> ，这个歌单的id就是7868042847；</p><p>最后将以下示例代码插入到你想要呈现播放器的地方即可：</p><ul><li>引用Aplayer播放器：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;linkrel&#x3D;&quot;stylesheet&quot;href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;aplayer@1.10&#x2F;dist&#x2F;APlayer.min.css&quot;&gt; </span><br><span class="line">&lt;scriptsrc&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;aplayer@1.10&#x2F;dist&#x2F;APlayer.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;scriptsrc&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;meting@1.2&#x2F;dist&#x2F;Meting.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br></pre></td></tr></table></figure><ul><li>插入播放器：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;7868005687&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:1000px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>tencent</code>为公司名，也就是音乐平台，如: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code>；</p><p>有关选项列表如下:</p><table><thead><tr><th align="center">选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center"><strong>必须值</strong></td><td align="center">歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td align="center">server</td><td align="center"><strong>必须值</strong></td><td align="center">音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td align="center">type</td><td align="center"><strong>必须值</strong></td><td align="center"><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td align="center">fixed</td><td align="center"><code>false</code></td><td align="center">开启固定模式</td></tr><tr><td align="center">mini</td><td align="center"><code>false</code></td><td align="center">开启迷你模式</td></tr><tr><td align="center">loop</td><td align="center"><code>all</code></td><td align="center">列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td align="center">order</td><td align="center"><code>list</code></td><td align="center">列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td align="center">volume</td><td align="center">0.7</td><td align="center">播放器音量</td></tr><tr><td align="center">lrctype</td><td align="center">0</td><td align="center">歌词格式类型</td></tr><tr><td align="center">listfolded</td><td align="center"><code>false</code></td><td align="center">指定音乐播放列表是否折叠</td></tr><tr><td align="center">storagename</td><td align="center"><code>metingjs</code></td><td align="center">LocalStorage 中存储播放器设定的键名</td></tr><tr><td align="center">autoplay</td><td align="center"><code>true</code></td><td align="center">自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td align="center">mutex</td><td align="center"><code>true</code></td><td align="center">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td align="center">listmaxheight</td><td align="center"><code>340px</code></td><td align="center">播放列表的最大长度</td></tr><tr><td align="center">preload</td><td align="center"><code>auto</code></td><td align="center">音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td align="center">theme</td><td align="center"><code>#ad7a86</code></td><td align="center">播放器风格色彩设置</td></tr></tbody></table><h1 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h1><h3 id="添加全局吸底Aplayer教程"><a href="#添加全局吸底Aplayer教程" class="headerlink" title="添加全局吸底Aplayer教程"></a>添加全局吸底Aplayer教程</h3><blockquote><p>这里以Butterfly主题为例，参考文章：<a href="https://butterfly.js.org/posts/507c070f/">https://butterfly.js.org/posts/507c070f/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-aplayer-xidi.gif" alt="Aplayer吸底图例"></p><p>（图源：<a href="https://butterfly.js.org/">Butterfly</a>）</p><h4 id="关闭-asset-inject"><a href="#关闭-asset-inject" class="headerlink" title="关闭 asset_inject"></a>关闭 asset_inject</h4><p>此步骤适用于安装了<code>hexo-tag-aplayer</code>插件的人</p><p>由于需要全局都插入aplayer和meting资源，为了防止插入重复的资源，需要把asset_inject设为false</p><p>在Hexo的配置文件中：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="开启主题的AplayerInject"><a href="#开启主题的AplayerInject" class="headerlink" title="开启主题的AplayerInject"></a>开启主题的AplayerInject</h4><p>在主题的配置文件中，<code>enable</code>设为<code>true</code>和<code>per_page</code>设为<code>true</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Inject the css and script (aplayer&#x2F;meting)</span><br><span class="line">aplayerInject:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><h4 id="把Aplayer代码插入到主题配置文件"><a href="#把Aplayer代码插入到主题配置文件" class="headerlink" title="把Aplayer代码插入到主题配置文件"></a>把Aplayer代码插入到主题配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer&quot;</span> <span class="string">data-id=&quot;7868042847&quot;</span> <span class="string">data-server=&quot;tencent&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>运行Hexo就可以看到网页左下角出现了Aplayer</p><p>最后，如果你想切换页面时，音乐不会中断。请把主题配置文件的<code>pjax</code>设为<code>true</code></p><h3 id="为博客添加音乐页面"><a href="#为博客添加音乐页面" class="headerlink" title="为博客添加音乐页面"></a>为博客添加音乐页面</h3><p>输入命令新建一个名为<code>music</code>的page：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page music</span><br></pre></td></tr></table></figure><p>​        </p><p>打开<code>博客根目录/source/music/index.md</code>文件，写入以下代码即可：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;&gt;</span> </span><br><span class="line"><span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span> </span><br><span class="line"><span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;</span> </span><br><span class="line">&#123;<span class="string">%</span> <span class="string">meting</span> <span class="string">&quot;7868005687&quot;</span> <span class="string">&quot;tencent&quot;</span> <span class="string">&quot;playlist&quot;</span> <span class="string">&quot;theme:#555&quot;</span> <span class="string">&quot;mutex:true&quot;</span> <span class="string">&quot;listmaxheight:1000px&quot;</span> <span class="string">&quot;preload:auto&quot;</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img.imgdb.cn/item/600e30353ffa7d37b3c6eacd.png" alt="歌单效果"></p><p>我的歌单页面：<a href="https://amnesia-f.github.io/music/">https://amnesia-f.github.io/music/</a></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><table><thead><tr><th align="center">名称</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">container</td><td align="center">document.querySelector</td><td align="center">播放器容器元素</td></tr><tr><td align="center">fixed</td><td align="center">false</td><td align="center">开启吸底模式, <a href="https://aplayer.js.org/#/home?id=fixed-mode">详情</a></td></tr><tr><td align="center">mini</td><td align="center">false</td><td align="center">开启迷你模式, <a href="https://aplayer.js.org/#/home?id=mini-mode">详情</a></td></tr><tr><td align="center">autoplay</td><td align="center">false</td><td align="center">音频自动播放</td></tr><tr><td align="center">theme</td><td align="center">‘#b7daff’</td><td align="center">主题色</td></tr><tr><td align="center">loop</td><td align="center">‘all’</td><td align="center">音频循环播放, 可选值: ‘all’, ‘one’, ‘none’</td></tr><tr><td align="center">order</td><td align="center">‘list’</td><td align="center">音频循环顺序, 可选值: ‘list’, ‘random’</td></tr><tr><td align="center">preload</td><td align="center">‘auto’</td><td align="center">预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td align="center">volume</td><td align="center">0.7</td><td align="center">默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td></tr><tr><td align="center">audio</td><td align="center">-</td><td align="center">音频信息, 应该是一个对象或对象数组</td></tr><tr><td align="center">audio.name</td><td align="center">-</td><td align="center">音频名称</td></tr><tr><td align="center">audio.artist</td><td align="center">-</td><td align="center">音频艺术家</td></tr><tr><td align="center">audio.url</td><td align="center">-</td><td align="center">音频链接</td></tr><tr><td align="center">audio.cover</td><td align="center">-</td><td align="center">音频封面</td></tr><tr><td align="center">audio.lrc</td><td align="center">-</td><td align="center"><a href="https://aplayer.js.org/#/home?id=lrc">详情</a></td></tr><tr><td align="center">audio.theme</td><td align="center">-</td><td align="center">切换到此音频时的主题色，比上面的 theme 优先级高</td></tr><tr><td align="center">audio.type</td><td align="center">‘auto’</td><td align="center">可选值: ‘auto’, ‘hls’, ‘normal’ 或其他自定义类型, <a href="https://aplayer.js.org/#/home?id=mse-support">详情</a></td></tr><tr><td align="center">customAudioType</td><td align="center">-</td><td align="center">自定义类型，<a href="https://aplayer.js.org/#/home?id=mse-support">详情</a></td></tr><tr><td align="center">mutex</td><td align="center">true</td><td align="center">互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td></tr><tr><td align="center">lrcType</td><td align="center">0</td><td align="center"><a href="https://aplayer.js.org/#/home?id=lrc">详情</a></td></tr><tr><td align="center">listFolded</td><td align="center">false</td><td align="center">列表默认折叠</td></tr><tr><td align="center">listMaxHeight</td><td align="center">-</td><td align="center">列表最大高度</td></tr><tr><td align="center">storageName</td><td align="center">‘aplayer-setting’</td><td align="center">存储播放器设置的 localStorage key</td></tr></tbody></table><blockquote><p>其他详见：<a href="https://aplayer.js.org/#/zh-Hans/">APlayer官方文档</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-41e1b825c51055f39c22b95777bc620b_1440w.jpg?source=172ae18b&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想要给博客添加音乐，最简单的方法便是利用第三方音乐平台提供的外链播放器，可是效果并不好，外观丑没歌词且体验极差。&lt;/p&gt;
&lt;p&gt;如果使用&lt;code&gt;Hexo-Tag-Aplayer&lt;/code&gt;插件的话这个问题就能很好地解决了。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="Aplayer" scheme="https://amnesia-f.github.io/tags/Aplayer/"/>
    
    <category term="音乐" scheme="https://amnesia-f.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客技巧：优化博客文章链接</title>
    <link href="https://amnesia-f.github.io/posts/56ce.html"/>
    <id>https://amnesia-f.github.io/posts/56ce.html</id>
    <published>2021-01-24T14:16:59.000Z</published>
    <updated>2021-01-24T15:05:17.398Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-41e1b825c51055f39c22b95777bc620b_1440w.jpg?source=172ae18b" alt="封面"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Hexo的默认设定中，你的博客文章链接是由<code>:year/:month/:day/:title/</code>构成的，即按照年：月：日：标题的格式来生成链接，如果你的文章标题中还含有中文的话，复制URL链接就会有一大串编码字符，想分享博客文章链接可能会出现以下场景：</p><a id="more"></a><p><img src="https://img.imgdb.cn/item/600d84fd3ffa7d37b37b5730.png" alt="场景"></p><p>如果使用<code>hexo-abbrlink</code>插件的话，这个问题便能很好地解决了！</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>1.首先在博客根目录运行Git Bash，输入以下指令安装<code>hexo-abbrlink</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>2.打开站点配置文件<code>_config.yml</code>，修改permalink为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure><p>3,.在站点配置文件<code>_config.yml</code>中添加以下代码：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#abbrlink配置</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>其中alg和rep为算法和进制，具体区别见下表：</p><table><thead><tr><th align="center">算法</th><th align="center">进制</th><th align="center">生成链接</th></tr></thead><tbody><tr><td align="center">crc16</td><td align="center">hex</td><td align="center"><a href="https://amnesia-f.github.io/posts/66c8.html">https://amnesia-f.github.io/posts/66c8.html</a></td></tr><tr><td align="center">crc16</td><td align="center">dec</td><td align="center"><a href="https://amnesia-f.github.io/posts/65535.html">https://amnesia-f.github.io/posts/65535.html</a></td></tr><tr><td align="center">crc32</td><td align="center">hex</td><td align="center"><a href="https://amnesia-f.github.io/posts/8ddf18fb.html">https://amnesia-f.github.io/posts/8ddf18fb.html</a></td></tr><tr><td align="center">crc32</td><td align="center">dec</td><td align="center"><a href="https://amnesia-f.github.io/posts/1690090958.html">https://amnesia-f.github.io/posts/1690090958.html</a></td></tr></tbody></table><p>4.修改文件后，执行以下代码部署到GitHub即可！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>可以看到，使用这款插件后，博客文章链接缩短了很多，起到了很好的优化效果：</p><p><img src="https://img.imgdb.cn/item/600d88433ffa7d37b37d2dba.png" alt="效果"></p><blockquote><p>其他补充说明详见：<a href="https://github.com/rozbo/hexo-abbrlink">Hexo-Abbrlink说明文档</a></p></blockquote><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-41e1b825c51055f39c22b95777bc620b_1440w.jpg?source=172ae18b&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Hexo的默认设定中，你的博客文章链接是由&lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;构成的，即按照年：月：日：标题的格式来生成链接，如果你的文章标题中还含有中文的话，复制URL链接就会有一大串编码字符，想分享博客文章链接可能会出现以下场景：&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="链接" scheme="https://amnesia-f.github.io/tags/%E9%93%BE%E6%8E%A5/"/>
    
    <category term="优化" scheme="https://amnesia-f.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客技巧：添加自定义html页面</title>
    <link href="https://amnesia-f.github.io/posts/ecc2.html"/>
    <id>https://amnesia-f.github.io/posts/ecc2.html</id>
    <published>2021-01-23T04:32:47.000Z</published>
    <updated>2021-01-24T15:00:59.689Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-41e1b825c51055f39c22b95777bc620b_1440w.jpg?source=172ae18b" alt="封面"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>以前收集了很多有趣的html特效文件，自己也写过不少，但是这些文件都有一个缺点：只能本地浏览。</p><p>很早以前就有一个想法，就是将这些文件部署到网站上供人们随时随地浏览，只是一直没能实现。现在有了自己的博客，正好实现完成这个想法。</p><a id="more"></a><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a><strong>具体过程</strong></h1><p>1.首先在博客根目录的<code>source</code>文件夹下，新建一个文件夹用于存放要部署的HTML文件：</p><p><img src="https://img.imgdb.cn/item/600baef43ffa7d37b394b987.png" alt="封面"></p><p>我这里建了一个叫<code>HTML</code>的文件夹，里面的子文件夹可以存放各个HTML文件，当然也可以只创建一个主文件夹，直接在里面放HTML文件。</p><p>2.然后在博客根目录的配置文件<code>_config.yml</code>文件里，设置跳过渲染：</p><ul><li>单个文件，就写：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过渲染</span></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;xxxx.html&quot;</span></span><br></pre></td></tr></table></figure><ul><li>如果只创建了一个文件夹，要跳过它目录下所有文件的渲染，就写：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过文件夹下所有文件</span></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;文件夹名/*&quot;</span></span><br></pre></td></tr></table></figure><ul><li>如果父文件夹下还有子文件夹，就写：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过子文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;文件夹名/子文件夹名/*&quot;</span></span><br></pre></td></tr></table></figure><ul><li>或更简单粗暴的方式：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过文件夹下所有子文件夹和文件</span></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;文件夹名/**&quot;</span>   </span><br></pre></td></tr></table></figure><p>3.最后处理css、js文件</p><p>因为hexo部署的是静态文件，所有文章的md文件会被渲染成html文件，<br>hexo会帮我们把所有css、js文件都加到文章里，我们之前跳过了渲染，所以就需要手动把css、js整合到html文件里</p><p>一般我们的代码就是这种结构：</p><p><img src="https://img.imgdb.cn/item/600bb0653ffa7d37b395668f.png" alt="HTML结构"></p><p>下面处理分两部分：</p><ul><li>css：找到<code>index.html</code>文件里的语句,如：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/xxx.css&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>​          然后在css文件夹中找到对应的文件<code>xxx.css</code>，复制文件内容，把上面的代码改为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span> css代码内容 <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js：找到<code>index.html</code>文件里的语句，如：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/xxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​         然后在js文件夹中找到对应的文件<code>xxx.js</code>，复制文件内容，把上面的代码改为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> js代码内容 <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.检验成果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署后来到<a href="https://xxxxx.github.io/%E5%AD%98%E6%94%BEhtml%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/xxx.html">https://xxxxx.github.io/存放html文件的文件夹/xxx.html</a>  </p><p>即可查看到你的自定义html页面了！</p><p>建议在部署前先试试在本地能否打开，如果不行再按上文修改一次。</p><h1 id="其他的优化"><a href="#其他的优化" class="headerlink" title="其他的优化"></a>其他的优化</h1><p>如果想将这些html的界面放到导航菜单栏上，修改主题配置文件_config.butterfly.yml对应的导航菜单栏代码即可，这里将我的代码放出：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">   <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">   <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">   <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">   <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">   <span class="string">Demo||fas</span> <span class="attr">fa-file-code:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">all</span> <span class="string">html</span> <span class="string">demo</span> <span class="string">||</span> <span class="string">/Demo/</span> <span class="string">||</span> <span class="string">far</span> <span class="string">fa-file-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">圈小猫</span> <span class="string">||</span> <span class="string">/HTML/圈小猫.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">撕渔网</span> <span class="string">||</span> <span class="string">/HTML/撕渔网.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">纸飞机</span> <span class="string">||</span> <span class="string">/HTML/纸飞机.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">彩虹雨</span> <span class="string">||</span> <span class="string">/HTML/彩虹雨.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">方块穿梭</span> <span class="string">||</span> <span class="string">/HTML/方块穿梭.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">碰撞小球</span> <span class="string">||</span> <span class="string">/HTML/碰撞小球.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">烟花效果</span> <span class="string">||</span> <span class="string">/HTML/烟花效果.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">骇客帝国</span> <span class="string">||</span> <span class="string">/HTML/骇客帝国.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-code</span></span><br><span class="line">   <span class="string">娱乐||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">音乐</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">电影</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">   <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">   <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><hr><h1 id="我的Demo"><a href="#我的Demo" class="headerlink" title="我的Demo"></a>我的Demo</h1><p>可在导航菜单Demo栏查看我部署在网站上的html。</p><p>顺便也做个表格练练手吧：</p><table><thead><tr><th align="center">html文件名</th><th align="center">对应链接地址</th></tr></thead><tbody><tr><td align="center">圈小猫</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E5%9C%88%E5%B0%8F%E7%8C%AB.html">圈小猫.html</a></td></tr><tr><td align="center">撕渔网</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E6%92%95%E6%B8%94%E7%BD%91.html">撕渔网.html</a></td></tr><tr><td align="center">纸飞机</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E7%BA%B8%E9%A3%9E%E6%9C%BA.html">纸飞机.html</a></td></tr><tr><td align="center">彩虹雨</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E5%BD%A9%E8%99%B9%E9%9B%A8.html">彩虹雨.html</a></td></tr><tr><td align="center">方块穿梭</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E6%96%B9%E5%9D%97%E7%A9%BF%E6%A2%AD.html">方块穿梭.html</a></td></tr><tr><td align="center">碰撞小球</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E7%A2%B0%E6%92%9E%E5%B0%8F%E7%90%83.html">碰撞小球.html</a></td></tr><tr><td align="center">烟花效果</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E7%83%9F%E8%8A%B1%E6%95%88%E6%9E%9C.html">烟花效果.html</a></td></tr><tr><td align="center">骇客帝国</td><td align="center"><a href="https://amnesia-f.github.io/HTML/%E9%AA%87%E5%AE%A2%E5%B8%9D%E5%9B%BD.html">骇客帝国.html</a></td></tr></tbody></table><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-41e1b825c51055f39c22b95777bc620b_1440w.jpg?source=172ae18b&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;以前收集了很多有趣的html特效文件，自己也写过不少，但是这些文件都有一个缺点：只能本地浏览。&lt;/p&gt;
&lt;p&gt;很早以前就有一个想法，就是将这些文件部署到网站上供人们随时随地浏览，只是一直没能实现。现在有了自己的博客，正好实现完成这个想法。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="技巧" scheme="https://amnesia-f.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="html" scheme="https://amnesia-f.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：从踩坑到上岸</title>
    <link href="https://amnesia-f.github.io/posts/c2c.html"/>
    <id>https://amnesia-f.github.io/posts/c2c.html</id>
    <published>2021-01-22T12:56:05.000Z</published>
    <updated>2021-01-25T03:05:30.690Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upimage.alexhchu.com/2021/01/21/0149206606bc5.png" alt="封面"></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h1><p>自此，我的Hexo个人博客已经全部搭建且部署完成，基础功能也都正常了，剩下来的就是无尽的美化了。</p><a id="more"></a><p>这也意味着，Hexo搭建个人博客三部曲：从开始到放弃到踩坑到上岸，已经全部结束了。</p><p>接下来我还会写关于主题的美化过程…敬请期待</p><p>这篇博文其实没啥内容，就是想说一下这个结果</p><p>也顺便做个目录吧：</p><table><thead><tr><th align="center">Hexo搭建个人博客三部曲</th><th align="center">博文名称</th><th align="center">对应链接</th></tr></thead><tbody><tr><td align="center">一部曲</td><td align="center">Hexo搭建个人博客：从开始到放弃</td><td align="center"><a href="https://amnesia-f.github.io/posts/ckkb9pvlv0003bwql36025xso.html">跳转链接</a></td></tr><tr><td align="center">二部曲</td><td align="center">Hexo搭建个人博客：从放弃到踩坑</td><td align="center"><a href="https://amnesia-f.github.io/posts/ckkb9pvmb0007bwqlfyle4uib.html">跳转链接</a></td></tr><tr><td align="center">三部曲</td><td align="center">Hexo搭建个人博客：从踩坑到上岸</td><td align="center"><a href="https://amnesia-f.github.io/posts/ckkb9pvp50019bwql88tlf3yh.html">跳转链接</a></td></tr></tbody></table><h1 id="End"><a href="#End" class="headerlink" title="End"></a><strong>End</strong></h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://upimage.alexhchu.com/2021/01/21/0149206606bc5.png&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;自此，我的Hexo个人博客已经全部搭建且部署完成，基础功能也都正常了，剩下来的就是无尽的美化了。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="搭建" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="搭建博客三部曲" scheme="https://amnesia-f.github.io/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%89%E9%83%A8%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：从放弃到踩坑</title>
    <link href="https://amnesia-f.github.io/posts/f663.html"/>
    <id>https://amnesia-f.github.io/posts/f663.html</id>
    <published>2021-01-21T07:39:00.000Z</published>
    <updated>2021-01-28T14:42:03.979Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upimage.alexhchu.com/2021/01/21/0149206606bc5.png" alt="封面"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>相信每一位使用Hexo搭建博客的博主在搭建过程中都踩过大大小小的坑…如果官方文档有解决方法的话还好办，没有就只能老老实实去百度了…</p><p>经过两天的努力，我的博客终于搭成了，下面就盘点下我所踩过的坑吧…</p><a id="more"></a><p>遇到坑后建议先寻找官方的文档，看看里面有没有解决方案：</p><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li><li><a href="https://butterfly.js.org/posts/98d20436/">Butterfly主题问答</a>（这个是我所用主题的问答）</li></ul><h1 id="那些“坑”："><a href="#那些“坑”：" class="headerlink" title="那些“坑”："></a>那些“坑”：</h1><h3 id="1-运行后网页显示代码："><a href="#1-运行后网页显示代码：" class="headerlink" title="1.运行后网页显示代码："></a>1.运行后网页显示代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extends includes&#x2F;layout.pug block content #recent-posts.recent-posts include includes&#x2F;recent-posts.pug include includes&#x2F;pagination.pug #aside_content.aside_content include includes&#x2F;aside.pug</span><br></pre></td></tr></table></figure><p><img src="https://upimage.alexhchu.com/2021/01/21/6c7e6a0397380.png" alt="错误.png"></p><ul><li>下载安装：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p> or </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;yarn add hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure><h3 id="2-部署后提示：ERROR-Deployer-not-found-git"><a href="#2-部署后提示：ERROR-Deployer-not-found-git" class="headerlink" title="2.部署后提示：ERROR Deployer not found: git"></a>2.部署后提示：ERROR Deployer not found: git</h3><ul><li>下面两种方法，第一种不行就用第二种：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &#96;--&#96;save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="3-提示hexo-INFO-Validating-config"><a href="#3-提示hexo-INFO-Validating-config" class="headerlink" title="3.提示hexo INFO Validating config"></a>3.提示hexo INFO Validating config</h3><ul><li>下载安装</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果还不行就检查你的站点配置文件_config.yml中最后部署到GitHub的分支</p><p>从2020.10.1开始github默认分支从master改为了main，许多旧教程还是还是默认master，将master改为main即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h3 id="4-提示什么我忘记记录下来了，总之是因为版本过低"><a href="#4-提示什么我忘记记录下来了，总之是因为版本过低" class="headerlink" title="4.提示什么我忘记记录下来了，总之是因为版本过低"></a>4.提示什么我忘记记录下来了，总之是因为版本过低</h3><p>检查你的Node.js及Git版本是否为最新版：</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>Win+R 输入 cmd 并打开，依次输入： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>后回车，检查程序版本号；</p><p><img src="https://upimage.alexhchu.com/2021/01/21/c2811dc2ce0a2.png" alt="版本号.png"></p><h3 id="5-Butterfly主题无导航菜单和社交图标"><a href="#5-Butterfly主题无导航菜单和社交图标" class="headerlink" title="5.Butterfly主题无导航菜单和社交图标"></a>5.Butterfly主题无导航菜单和社交图标</h3><ul><li>在主题配置文件_config.butterfly.yml中删除相应代码前的#号，如下：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">   主页: &#x2F; || fas fa-home</span><br><span class="line">   时间轴: &#x2F;archives&#x2F; || fas fa-archive</span><br><span class="line">   标签: &#x2F;tags&#x2F; || fas fa-tags</span><br><span class="line">   分类: &#x2F;categories&#x2F; || fas fa-folder-open</span><br><span class="line">   清单||fas fa-list:</span><br><span class="line">     - 音乐 || &#x2F;music&#x2F; || fas fa-music</span><br><span class="line">     - 电影 || &#x2F;movies&#x2F; || fas fa-video</span><br><span class="line">   友链: &#x2F;link&#x2F; || fas fa-link</span><br><span class="line">   关于: &#x2F;about&#x2F; || fas fa-heart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># social settings (社交圖標設置)</span><br><span class="line"># formal:</span><br><span class="line"># icon: link || the description</span><br><span class="line">social:</span><br><span class="line">   fab fa-github: https:&#x2F;&#x2F;github.com&#x2F;xxxxxx || Github</span><br><span class="line">   fas fa-envelope: mailto:xxxxxx@gmail.com || Email</span><br></pre></td></tr></table></figure><h3 id="6-安装Aplayer时报错"><a href="#6-安装Aplayer时报错" class="headerlink" title="6.安装Aplayer时报错"></a>6.安装Aplayer时报错</h3><p><img src="https://img.imgdb.cn/item/600c303f3ffa7d37b3d9fa2d.png" alt="安装Aplayer报错"></p><ul><li>步骤一：删除C:\Users{账户}\下的<code>.npmrc</code>文件…<br>注意：这个文件默认是被隐藏的，需要选择将隐藏取消掉才能看见</li><li>步骤二：执行以下命令进行清理：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><p>​          但是会报以下错误：</p><p><img src="https://img.imgdb.cn/item/600c30403ffa7d37b3d9fa63.png" alt="clean报错"></p><p>​         解决方法：将博客根目录下的<code>node_modules</code>全部删除后再执行步骤二命令即可！</p><h3 id="7-运行hexo-d时提示client-loop-send-disconnect-Connection-reset-by-peer"><a href="#7-运行hexo-d时提示client-loop-send-disconnect-Connection-reset-by-peer" class="headerlink" title="7.运行hexo d时提示client_loop: send disconnect: Connection reset by peer"></a>7.运行<code>hexo d</code>时提示client_loop: send disconnect: Connection reset by peer</h3><p>如图：</p><p><img src="https://img.imgdb.cn/item/601236fb3ffa7d37b39aca75.png"></p><p>原因：http.postBuffer默认上限为1M</p><p>运行以下代码将上限改大就行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>之后便能成功上传了！</p><h3 id="8-上传时提示fatal-Could-not-read-from-remote-repository-Please-make-sure-you-have-the-correct-access-rights-and-the-repository-exists"><a href="#8-上传时提示fatal-Could-not-read-from-remote-repository-Please-make-sure-you-have-the-correct-access-rights-and-the-repository-exists" class="headerlink" title="8.上传时提示fatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists."></a>8.上传时提示fatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists.</h3><p>hexo d时报错：</p><p><img src="https://img.imgdb.cn/item/6012cb413ffa7d37b3f24fc6.png"></p><p>发现是和仓库的连接问题，输入<code>ssh -T git@github.com</code>后提示：</p><p><img src="https://img.imgdb.cn/item/6012cb413ffa7d37b3f24fcc.png"></p><p>发现无法连接了，于是重新生成ssh密钥文件：</p><p><img src="https://img.imgdb.cn/item/6012cd173ffa7d37b3f3507b.png"></p><p>再检测一遍连接状态，提示成功后，再次上传即可！</p><p><strong>暂时就这么多…以后遇到问题还会更新的。</strong></p><p>希望这篇博文永远也不用再更新…</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://upimage.alexhchu.com/2021/01/21/0149206606bc5.png&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;相信每一位使用Hexo搭建博客的博主在搭建过程中都踩过大大小小的坑…如果官方文档有解决方法的话还好办，没有就只能老老实实去百度了…&lt;/p&gt;
&lt;p&gt;经过两天的努力，我的博客终于搭成了，下面就盘点下我所踩过的坑吧…&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="搭建" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="搭建博客三部曲" scheme="https://amnesia-f.github.io/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%89%E9%83%A8%E6%9B%B2/"/>
    
    <category term="踩坑" scheme="https://amnesia-f.github.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：从开始到放弃</title>
    <link href="https://amnesia-f.github.io/posts/aea2.html"/>
    <id>https://amnesia-f.github.io/posts/aea2.html</id>
    <published>2021-01-21T02:41:34.000Z</published>
    <updated>2021-02-07T15:03:05.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upimage.alexhchu.com/2021/01/21/0149206606bc5.png" alt="封面"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>这是一个非常悲伤的故事，如标题所言，我已经被这Hexo搞崩溃了，原因就是bug太多…(其实这是篇教程)</p><a id="more"></a><p>不过言归正传，写这篇帖子是为了记录用Hexo搭建个人博客的过程的，也算是一个教程，仅是为了n年后我心血来潮又想搭建起博客时能有个正确的教程。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h1><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a><strong>GitHub Pages 是什么？</strong></h3><ul><li><a href="https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a><strong>Hexo 是什么？</strong></h3><ul><li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a><strong>Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p><img src="https://upimage.alexhchu.com/2021/01/21/3a1339324970c.jpg" alt="流程图.jpg"></p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h1><p>使用GitHub Pages来搭建Hexo静态博客网站的优点有很多，同时它的缺点也不少：</p><ul><li>零成本，不需购买服务器、域名，一切都托管在Github上；</li><li>不需维护且稳定，搭建完成后过几年再看你的文章可能还在；</li><li>方便，官方提供了很多现成的框架可以直接使用。</li></ul><p>缺点：</p><ul><li>搭建过程繁杂，需要搭建环境，容易出错；</li><li>国内访问可能会稍慢，不过可以设置通过国内服务器访问；</li><li>静态网页，每次改动都需要手动上传。</li></ul><h1 id="搭建步骤一：在GitHub创建个人仓库"><a href="#搭建步骤一：在GitHub创建个人仓库" class="headerlink" title="搭建步骤一：在GitHub创建个人仓库"></a><strong>搭建步骤一：在GitHub创建个人仓库</strong></h1><ol><li>注册一个GitHub账号：<a href="https://github.com/">GitHub</a></li><li>注册成功登录后，点击右上角加号然后再点击“New repository”</li><li>Repository name填 <strong>“你的GitHub用户名”.github.io</strong>（如下图）</li><li>勾选Add a README file</li></ol><p><img src="https://upimage.alexhchu.com/2021/01/21/4e6e17b1d23db.png" alt="新建仓库.png"></p><h1 id="搭建步骤二：配置本地环境"><a href="#搭建步骤二：配置本地环境" class="headerlink" title="搭建步骤二：配置本地环境"></a><strong>搭建步骤二：配置本地环境</strong></h1><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开，依次输入： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>后回车，如下图出现程序版本号即可。</p><p><img src="https://upimage.alexhchu.com/2021/01/21/c2811dc2ce0a2.png" alt="版本号.png"></p><h1 id="搭建步骤三：配置Git连接GitHub"><a href="#搭建步骤三：配置Git连接GitHub" class="headerlink" title="搭建步骤三：配置Git连接GitHub"></a><strong>搭建步骤三：配置Git连接GitHub</strong></h1><p>1.鼠标右键打开Git Bash：</p><p><img src="https://upimage.alexhchu.com/2021/01/21/6735f35ce37ed.png" alt="右键.png"></p><p>2.输入命令配置用户名和邮箱信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>3.生成ssh密钥文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱”</span><br></pre></td></tr></table></figure><p>其中有个y/n的选项，输入y后一路回车即可；</p><p>4.添加密匙：</p><ul><li>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），打开公钥 id_rsa.pub 文件并复制里面的内容。</li><li>打开GitHub的SSH设置页面：<a href="https://github.com/settings/keys">SSH and GPG keys</a></li><li>New SSH key，Title任取，Key粘贴刚刚复制的字符串，Add SSH key</li></ul><p><img src="https://upimage.alexhchu.com/2021/01/21/9731f759c0eda.png" alt="SSH keys.png"></p><p>5.验证连接：</p><p>打开 Git Bash，输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现：<img src="https://upimage.alexhchu.com/2021/01/21/86ec0fb35966b.png" alt="连接成功.png"></p><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><h1 id="搭建步骤四：本地安装Hexo博客程序"><a href="#搭建步骤四：本地安装Hexo博客程序" class="headerlink" title="搭建步骤四：本地安装Hexo博客程序"></a><strong>搭建步骤四：本地安装Hexo博客程序</strong></h1><p>1.安装 Hexo：</p><p>在你的电脑硬盘上新建一个文件夹，命名为你自己想要的名字，这个文件夹是用来储存博客文件的，例如我存放在<code>D:\Files\Hexo</code></p><p>在刚才新建的文件夹空白处右键，点击<code>Git Bash</code>，使用 npm 命令一键安装 Hexo 博客程序：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>（安装时间有点久，界面也没任何反应，耐心等待）</p><p>2.Hexo 初始化和本地预览：</p><ul><li>初始化并安装所需组件：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init       # 初始化</span><br><span class="line">npm install     # 安装组件</span><br></pre></td></tr></table></figure><ul><li>完成后依次输入下面命令，启动本地服务器进行预览：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g         # 生成页面</span><br><span class="line">hexo s         # 启动预览</span><br></pre></td></tr></table></figure><p>3.访问 <a href="http://localhost:4000/">http://localhost:4000</a>，出现 Hexo 默认页面，本地博客安装成功！</p><p><img src="https://upimage.alexhchu.com/2021/01/21/6e09abc7e116a.png" alt="本地界面.png"></p><p><strong>Tips</strong>：如果出现页面加载不出来，可能是端口被占用了，Ctrl+C 关闭服务器，运行 <em>hexo server -p 5000</em> 更改端口号后重试。</p><h1 id="搭建步骤五：部署-Hexo-到-GitHub-Pages"><a href="#搭建步骤五：部署-Hexo-到-GitHub-Pages" class="headerlink" title="搭建步骤五：部署 Hexo 到 GitHub Pages"></a><strong>搭建步骤五：部署 Hexo 到 GitHub Pages</strong></h1><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><ol><li>首先安装 <strong>hexo-deployer-git</strong>：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>​      2.然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>3.完成后运行 hexo d 将网站上传部署到 GitHub Pages，这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。</p><p><strong>搭建到这里就已经完成了</strong></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;      # 新建文章</span><br><span class="line"></span><br><span class="line">hexo new page &quot;name&quot; # 新建页面</span><br><span class="line"></span><br><span class="line">hexo g               # 生成页面</span><br><span class="line">  </span><br><span class="line">hexo d               # 部署</span><br><span class="line"></span><br><span class="line">hexo g -d            # 生成页面并部署</span><br><span class="line"></span><br><span class="line">hexo s               # 本地预览</span><br><span class="line"></span><br><span class="line">hexo clean           # 清除缓存和已生成的静态文件</span><br><span class="line"></span><br><span class="line">hexo help            # 帮助</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h1><p>我曾在2020年7月份成功部署过一个Hexo搭建的博客，只不过后来因为文件丢失所以无法接着写了，本想趁热打铁再部署一个同样的，奈何学业繁忙没有时间，昨天考完试后从昨晚到现在弄了一天一个晚上，bug层出不穷：</p><p><img src="https://upimage.alexhchu.com/2021/01/21/b500b3c2be871.png" alt="error.png"></p><p>本地预览却又是这样：</p><p><img src="https://upimage.alexhchu.com/2021/01/21/6c7e6a0397380.png" alt="错误.png"></p><p>迫使我放弃了搭建这个博客的念头…</p><p>再欣赏下之前的博客吧：</p><p><img src="https://upimage.alexhchu.com/2021/01/21/128a69e39c5bf.png" alt="界面.png"></p><p><img src="https://upimage.alexhchu.com/2021/01/21/bb3cc97db77bc.png" alt="第一篇.png"></p><p><img src="https://upimage.alexhchu.com/2021/01/21/16b8252ec9edd.png" alt="第二篇.png"></p><p>主题是用的<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>，我的项目地址：<a href="https://github.com/Amnesia-f/amnesia-f.github.io">https://github.com/Amnesia-f/amnesia-f.github.io</a></p><p><img src="https://upimage.alexhchu.com/2021/01/21/40dfdb4e4d1f4.png" alt="仓库图.png"></p><p>最后放个我认为不错的网址：</p><ul><li><a href="https://pic.alexhchu.com/">晚风图床</a>（之前愣是不会用图床，博客上的图片全是默认）</li></ul><p>关于搭建Hexo博客过程中我遇到的各种坑，会另起一篇来阐述…</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a><strong>End</strong></h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://upimage.alexhchu.com/2021/01/21/0149206606bc5.png&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这是一个非常悲伤的故事，如标题所言，我已经被这Hexo搞崩溃了，原因就是bug太多…(其实这是篇教程)&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo博客" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="搭建" scheme="https://amnesia-f.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://amnesia-f.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://amnesia-f.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="教程" scheme="https://amnesia-f.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="搭建博客三部曲" scheme="https://amnesia-f.github.io/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%89%E9%83%A8%E6%9B%B2/"/>
    
  </entry>
  
</feed>
